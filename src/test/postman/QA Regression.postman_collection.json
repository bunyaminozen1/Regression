{
	"info": {
		"_postman_id": "5fe7f7e4-2c02-4108-ba95-03cf35b555c9",
		"name": "QA Regression",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Initial Innovator Setup",
			"item": [
				{
					"name": "Create innovator",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let rand = Math.floor(Date.now() / 1000);",
									"pm.environment.set(\"innovator_email\",rand + \"@weavr-model10.io\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"postman.setEnvironmentVariable(\"innovator_id\", JSON.parse(responseBody).innovatorId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "call-ref",
								"value": "{{innovator_email}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Innovator\",\n  \"surname\": \"Surname\",\n  \"email\": \"{{innovator_email}}\",\n  \"password\": {\n    \"value\": \"Pass1234!\"\n  },\n  \"innovatorName\": \"Innovator\",\n  \"kybProviderKey\": \"SUM_SUB\",\n  \"amlProviderKey\": \"SUM_SUB\",\n  \"registrationAddress\": {\n    \"addressLine1\": \"regAddr1\",\n    \"addressLine2\": \"regAddr2\",\n    \"city\": \"regCity\",\n    \"country\": \"MT\",\n    \"postCode\": \"regMT123\",\n    \"state\": \"Rabat\"\n  },\n  \"businessAddress\": {\n    \"addressLine1\": \"busAddr1\",\n    \"addressLine2\": \"busAddr2\",\n    \"city\": \"busCity\",\n    \"country\": \"MT\",\n    \"postCode\": \"regMT123\",\n    \"state\": \"Rabat\"\n  },\n  \"industry\": \"ACCOUNTING\",\n  \"sourceOfFunds\": \"LABOUR_CONTRACT\",\n  \"sourceOfFundsOther\": \"string\"\n}\n"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/gateway/register",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"gateway",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login innovator root",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable(\"pm_token\", JSON.parse(responseBody).token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{innovator_email}}\",\n  \"password\": {\n    \"value\": \"Pass1234!\"\n  }\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/gateway/login",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"gateway",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login innovator root Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable(\"pm_token\", JSON.parse(responseBody).token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{innovator_email}}\",\n  \"password\": {\n    \"value\": \"Pass1234!\"\n  }\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/gateway/login",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"gateway",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Innovator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Innovator Details Correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.tenant.id).to.eql(parseInt(pm.environment.get(\"innovator_id\")));",
									"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
									"    pm.expect(jsonData.basicCompanyChecksVerified).to.eql(\"NOT_STARTED\");",
									"    pm.expect(jsonData.kybProviderKey).to.eql(\"SUM_SUB\");",
									"    pm.expect(jsonData.amlProviderKey).to.eql(\"SUM_SUB\");",
									"    pm.expect(jsonData.registrationAddress.addressLine1).to.eql(\"regAddr1\");",
									"    pm.expect(jsonData.registrationAddress.addressLine2).to.eql(\"regAddr2\");",
									"    pm.expect(jsonData.registrationAddress.city).to.eql(\"regCity\");",
									"    pm.expect(jsonData.registrationAddress.country).to.eql(\"MT\");",
									"    pm.expect(jsonData.registrationAddress.postCode).to.eql(\"regMT123\");",
									"    pm.expect(jsonData.registrationAddress.state).to.eql(\"Rabat\");",
									"    pm.expect(jsonData.businessAddress.addressLine1).to.eql(\"busAddr1\");",
									"    pm.expect(jsonData.businessAddress.addressLine2).to.eql(\"busAddr2\");",
									"    pm.expect(jsonData.businessAddress.city).to.eql(\"busCity\");",
									"    pm.expect(jsonData.businessAddress.country).to.eql(\"MT\");",
									"    pm.expect(jsonData.businessAddress.postCode).to.eql(\"regMT123\");",
									"    pm.expect(jsonData.businessAddress.state).to.eql(\"Rabat\");",
									"    pm.expect(jsonData.industry).to.eql(\"ACCOUNTING\");",
									"    pm.expect(jsonData.sourceOfFunds).to.eql(\"LABOUR_CONTRACT\");",
									"    pm.expect(jsonData.rootUser.name).to.eql(\"Innovator\");",
									"    pm.expect(jsonData.rootUser.surname).to.eql(\"Surname\");",
									"    pm.expect(jsonData.rootUser.email).to.eql(pm.environment.get(\"innovator_email\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "X-TOKEN {{pm_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{innovator_email}}\",\n  \"password\": {\n    \"value\": \"Pass1234!\"\n  }\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/innovator/get",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"innovator",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create programme",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"postman.setEnvironmentVariable(\"programme_id\", JSON.parse(responseBody).id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let rand = Math.floor(Date.now() / 1000);",
									"pm.environment.set(\"app_name\",rand);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{pm_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"modelId\": \"20\",\n  \"code\": \"{{app_name}}\",\n  \"name\": \"{{app_name}}\",\n  \"country\": [\n    \"UK\"\n  ],\n  \"supportedFeeGroups\": [\n  ]\n}\n"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/programmes/_/create",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"programmes",
								"_",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get programme",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{pm_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"modelId\": \"10\",\n  \"code\": \"{{app_name}}\",\n  \"name\": \"{{app_name}}\",\n  \"country\": [\n    \"UK\"\n  ],\n  \"supportedFeeGroups\": [\n  ]\n}\n"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/programmes/get",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"programmes",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get programme Keys",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"postman.setEnvironmentVariable(\"shared_programme_key\", JSON.parse(responseBody).sharedKey);",
									"postman.setEnvironmentVariable(\"secret_programme_key\", JSON.parse(responseBody).secretKey);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{pm_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"modelId\": \"10\",\n  \"code\": \"{{app_name}}\",\n  \"name\": \"{{app_name}}\",\n  \"country\": [\n    \"UK\"\n  ],\n  \"supportedFeeGroups\": [\n  ]\n}\n"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/programmes/{{programme_id}}/keys/get",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"programmes",
								"{{programme_id}}",
								"keys",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update programme in gateway",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{pm_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"webhookUrl\": \"https://enm0yuvh8bmbhc3.m.pipedream.net\",\n    \"webhookDisabled\": false,\n    \"securityModelConfig\": {\n        \"PASSWORD\": false,\n        \"CARD_NUMBER\": false,\n        \"CVV\": false,\n        \"PIN\": false\n    },\n    \"state\":\"ACTIVE\",\n    \"supportedFeeGroups\": [\n        \"DEFAULT\",\n        \"TEST1\",\n        \"TEST2\"\n    ]\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/programmes/{{programme_id}}/update",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"programmes",
								"{{programme_id}}",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get tenant id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"postman.setEnvironmentVariable(\"tenant_id\", JSON.parse(responseBody).tenant.id);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{pm_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/innovator/get",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"innovator",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login admin root Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"postman.setEnvironmentVariable(\"admin_token\", JSON.parse(responseBody).token);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin@weavr.io\",\n  \"password\": {\n    \"value\": \"!Password123!10\"\n  }\n}"
						},
						"url": {
							"raw": "{{server-url}}/admin/api/gateway/login",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"admin",
								"api",
								"gateway",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Paynetics Version Copy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"context\": {\n        \"dimension\": [\n            {\n                \"key\": \"TenantIdDimension\",\n                \"value\": \"{{innovator_id}}\"\n            }\n        ]\n    },\n    \"value\": {\n        \"part\": [\n            \"V2\"\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server-url}}/admin/api/configs/paynetics/values/PAYNETICS_API_VERSION/set",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"admin",
								"api",
								"configs",
								"paynetics_eea",
								"values",
								"PAYNETICS_API_VERSION",
								"set"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create corporates profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"emailVerificationURL\");",
									"",
									"postman.setEnvironmentVariable(\"corporates_profile_id\", JSON.parse(responseBody).profile.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Inputs here",
									"// 1. This is the innovator's URL that will be used for email verification",
									"postman.setEnvironmentVariable(\"emailVerificationURL\", \"https://model8.weavr.io\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{pm_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"default_corporates\",\n    \"payletTypeCode\": \"default_corporates\",\n    \"accountInformationFactors\":{\n      \"factorLevels\":{\n         \"1\":{\n            \"factors\":[\n               {\n                  \"type\":\"PASSWORD\",\n                  \"providerKey\":\"passwords\"\n               }\n            ]\n         }\n      }\n   },\n   \"paymentInitiationFactors\":{\n      \"factorLevels\":{\n         \"1\":{\n            \"factors\":[\n               {\n                  \"type\":\"SMS_OTP\",\n                  \"providerKey\":\"weavr_authfactors\"\n               }\n            ]\n         }\n      }\n   },\n    \"companyType\": [\n        \"SOLE_TRADER\",\n        \"LLC\"\n    ],\n    \"rootSupportedSecretTypes\": {\n        \"secretType\": [\n            {\n                \"firstSecretType\": \"passwords\"\n            }\n        ]\n    },\n    \"userSupportedSecretTypes\": {\n        \"secretType\": [\n            {\n                \"firstSecretType\": \"passwords\"\n            }\n        ]\n    },\n    \"emailVerificationUrl\": \"{{emailVerificationURL}}\",\n    \"baseUrl\":\"https://www.fake.com\",\n    \"kybProviderKey\": \"SUM_SUB\",\n    \"amlProviderKey\": \"SUM_SUB\"\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/corporates/programmes/{{programme_id}}/profiles/_/create",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"corporates",
								"programmes",
								"{{programme_id}}",
								"profiles",
								"_",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create corporates password profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{pm_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"configPerCredentialType\": {\n    \"ROOT\": {\n      \"minimumLength\": 8,\n      \"maximumLength\": 50,\n      \"complexity\": 1\n    },\n    \"USER\": {\n      \"minimumLength\": 8,\n      \"maximumLength\": 50,\n      \"complexity\": 1\n    }\n  }\n}\n"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/passwords/programmes/{{programme_id}}/profiles/{{corporates_profile_id}}/create",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"passwords",
								"programmes",
								"{{programme_id}}",
								"profiles",
								"{{corporates_profile_id}}",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create consumers profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"postman.setEnvironmentVariable(\"consumers_profile_id\", JSON.parse(responseBody).profile.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{pm_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"code\": \"default_consumers\",\n  \"payletTypeCode\": \"default_consumers\",\n  \"accountInformationFactors\":{\n      \"factorLevels\":{\n         \"1\":{\n            \"factors\":[\n               {\n                  \"type\":\"PASSWORD\",\n                  \"providerKey\":\"passwords\"\n               }\n            ]\n         }\n      }\n   },\n   \"paymentInitiationFactors\":{\n      \"factorLevels\":{\n         \"1\":{\n            \"factors\":[\n               {\n                  \"type\":\"SMS_OTP\",\n                  \"providerKey\":\"weavr_authfactors\"\n               }\n            ]\n         }\n      }\n   },\n  \"supportedSecretTypes\": {\n    \"secretType\": [\n      {\n        \"firstSecretType\": \"passwords\"\n      }\n    ]\n  },\n  \"kycProviderKey\": \"SUM_SUB\",\n  \"amlProviderKey\": \"SUM_SUB\",\n  \"emailVerificationUrl\" : \"https://qa.weavr.io\",\n  \"baseUrl\":\"https://www.faketaxi.com\"\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/consumers_v2/programmes/{{programme_id}}/profiles/_/create",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"consumers_v2",
								"programmes",
								"{{programme_id}}",
								"profiles",
								"_",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create consumers password profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{pm_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"configPerCredentialType\": {\n    \"ROOT\": {\n      \"minimumLength\": 8,\n      \"maximumLength\": 50,\n      \"complexity\": 1\n    },\n    \"USER\": {\n      \"minimumLength\": 8,\n      \"maximumLength\": 50,\n      \"complexity\": 1\n    }\n  }\n}\n"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/passwords/programmes/{{programme_id}}/profiles/{{consumers_profile_id}}/create",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"passwords",
								"programmes",
								"{{programme_id}}",
								"profiles",
								"{{consumers_profile_id}}",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create corporate managed accounts profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable(\"corporates_managed_accounts_profile_id\", JSON.parse(responseBody).profile.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{pm_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"code\": \"corporate_managed_accounts_gps\",\n  \"payletTypeCode\": \"corporate_managed_accounts\",\n  \"currency\": [\n    \"EUR\", \"USD\", \"GBP\"\n  ],\n  \"fiProvider\": [\n    \"paynetics\"\n  ],\n  \"channelProvider\": [\n    \"gps\"\n  ],\n   \"depositFee\":null,\n   \"withdrawalFee\":[\n      {\n         \"name\":null,\n         \"fee\":{\n            \"type\":\"FLAT\",\n            \"flatAmount\":[\n               {\n                  \"currency\":\"EUR\",\n                  \"amount\":100\n               },\n               {\n                  \"currency\":\"GBP\",\n                  \"amount\":102\n               },\n               {\n                  \"currency\":\"USD\",\n                  \"amount\":105\n               }\n            ],\n            \"percentage\":null\n         }\n      }\n   ],\n   \"depositTypeFee\":[\n      {\n         \"type\":\"SEPA\",\n         \"fees\":[\n            {\n               \"name\":null,\n               \"fee\":{\n                  \"type\":\"FLAT\",\n                  \"flatAmount\":[\n                     {\n                  \"currency\":\"EUR\",\n                  \"amount\":{{deposit_fee_eur}}\n               },\n               {\n                  \"currency\":\"GBP\",\n                  \"amount\":{{deposit_fee_gbp}}\n               },\n               {\n                  \"currency\":\"USD\",\n                  \"amount\":{{deposit_fee_usd}}\n               }\n                  ],\n                  \"percentage\":null\n               }\n            }\n         ]\n      },\n      {\n         \"type\":\"SWIFT\",\n         \"fees\":[\n            {\n               \"name\":null,\n               \"fee\":{\n                  \"type\":\"FLAT\",\n                  \"flatAmount\":[\n                     {\n                  \"currency\":\"EUR\",\n                  \"amount\":{{deposit_fee_eur}}\n               },\n               {\n                  \"currency\":\"GBP\",\n                  \"amount\":{{deposit_fee_gbp}}\n               },\n               {\n                  \"currency\":\"USD\",\n                  \"amount\":{{deposit_fee_usd}}\n               }\n                  ],\n                  \"percentage\":null\n               }\n            }\n         ]\n      },\n      {\n         \"type\":\"FASTER_PAYMENTS\",\n         \"fees\":[\n            {\n               \"name\":null,\n               \"fee\":{\n                  \"type\":\"FLAT\",\n                  \"flatAmount\":[\n                     {\n                  \"currency\":\"EUR\",\n                  \"amount\":{{deposit_fee_eur}}\n               },\n               {\n                  \"currency\":\"GBP\",\n                  \"amount\":{{deposit_fee_gbp}}\n               },\n               {\n                  \"currency\":\"USD\",\n                  \"amount\":{{deposit_fee_usd}}\n               }\n                  ],\n                  \"percentage\":null\n               }\n            }\n         ]\n      }\n   ]\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/managed_accounts_v2/programmes/{{programme_id}}/profiles/_/create",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"managed_accounts_v2",
								"programmes",
								"{{programme_id}}",
								"profiles",
								"_",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create consumer managed accounts profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable(\"consumer_managed_accounts_profile_id\", JSON.parse(responseBody).profile.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{pm_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"code\": \"consumer_managed_accounts_gps\",\n  \"payletTypeCode\": \"consumer_managed_accounts\",\n  \"currency\": [\n    \"EUR\", \"USD\", \"GBP\"\n  ],\n  \"fiProvider\": [\n    \"paynetics\"\n  ],\n  \"channelProvider\": [\n    \"gps\"\n  ],\n   \"depositFee\":null,\n   \"withdrawalFee\":[\n      {\n         \"name\":null,\n         \"fee\":{\n            \"type\":\"FLAT\",\n            \"flatAmount\":[\n               {\n                  \"currency\":\"EUR\",\n                  \"amount\":100\n               },\n               {\n                  \"currency\":\"GBP\",\n                  \"amount\":102\n               },\n               {\n                  \"currency\":\"USD\",\n                  \"amount\":105\n               }\n            ],\n            \"percentage\":null\n         }\n      }\n   ],\n   \"depositTypeFee\":[\n      {\n         \"type\":\"SEPA\",\n         \"fees\":[\n            {\n               \"name\":null,\n               \"fee\":{\n                  \"type\":\"FLAT\",\n                  \"flatAmount\":[\n                     {\n                  \"currency\":\"EUR\",\n                  \"amount\":{{deposit_fee_eur}}\n               },\n               {\n                  \"currency\":\"GBP\",\n                  \"amount\":{{deposit_fee_gbp}}\n               },\n               {\n                  \"currency\":\"USD\",\n                  \"amount\":{{deposit_fee_usd}}\n               }\n                  ],\n                  \"percentage\":null\n               }\n            }\n         ]\n      },\n      {\n         \"type\":\"SWIFT\",\n         \"fees\":[\n            {\n               \"name\":null,\n               \"fee\":{\n                  \"type\":\"FLAT\",\n                  \"flatAmount\":[\n                     {\n                  \"currency\":\"EUR\",\n                  \"amount\":{{deposit_fee_eur}}\n               },\n               {\n                  \"currency\":\"GBP\",\n                  \"amount\":{{deposit_fee_gbp}}\n               },\n               {\n                  \"currency\":\"USD\",\n                  \"amount\":{{deposit_fee_usd}}\n               }\n                  ],\n                  \"percentage\":null\n               }\n            }\n         ]\n      },\n      {\n         \"type\":\"FASTER_PAYMENTS\",\n         \"fees\":[\n            {\n               \"name\":null,\n               \"fee\":{\n                  \"type\":\"FLAT\",\n                  \"flatAmount\":[\n                     {\n                  \"currency\":\"EUR\",\n                  \"amount\":{{deposit_fee_eur}}\n               },\n               {\n                  \"currency\":\"GBP\",\n                  \"amount\":{{deposit_fee_gbp}}\n               },\n               {\n                  \"currency\":\"USD\",\n                  \"amount\":{{deposit_fee_usd}}\n               }\n                  ],\n                  \"percentage\":null\n               }\n            }\n         ]\n      }\n   ]\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/managed_accounts_v2/programmes/{{programme_id}}/profiles/_/create",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"managed_accounts_v2",
								"programmes",
								"{{programme_id}}",
								"profiles",
								"_",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create consumer managed cards profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"card_type\");",
									"pm.environment.unset(\"card_brand\");",
									"",
									"postman.setEnvironmentVariable(\"consumer_managed_cards_profile_id\", JSON.parse(responseBody).prepaidManagedCardsProfile.managedCardsProfile.profile.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Inputs here",
									"// 1. This is the card type",
									"postman.setEnvironmentVariable(\"card_type\", \"VIRTUAL\");",
									" ",
									"// 2. This is the card brand ",
									"postman.setEnvironmentVariable(\"card_brand\", \"MASTERCARD\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{pm_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"createPrepaidProfileRequest\": {\n        \"createManagedCardsProfileRequest\": {\n            \"code\": \"consumer_managed_cards\",\n            \"payletTypeCode\": \"consumer_managed_cards\",\n            \"cardType\": \"VIRTUAL\",\n            \"cardBrand\": \"MASTERCARD\",\n            \"expiryPeriodMonths\": 36,\n            \"renewalType\": \"NO_RENEW\",\n            \"singleSpend\": false,\n            \"forexFeePercentage\": \"ONE_PERCENT\",\n            \"cardBureau\": \"NITECREST\",\n            \"unassignedCardPoolEnabled\": \"TRUE\",\n            \"cardFundingType\": \"PREPAID\",\n            \"purchaseFee\": [\n                {\n                    \"name\": \"DEFAULT\",\n                    \"fee\": {\n                        \"type\": \"FLAT\",\n                        \"flatAmount\": [\n                            {\n                                \"currency\": \"EUR\",\n                                \"amount\": \"{{purchase_fee_eur}}\"\n                            },\n                            {\n                                \"currency\": \"GBP\",\n                                \"amount\": \"{{purchase_fee_gbp}}\"\n                            },\n                            {\n                                \"currency\": \"USD\",\n                                \"amount\": \"{{purchase_fee_usd}}\"\n                            }\n                        ],\n                        \"percentage\": {\n                            \"value\": \"0\",\n                            \"scale\": 2\n                        }\n                    }\n                }\n            ]\n        },\n        \"currency\": [\n            \"EUR\",\n            \"USD\",\n            \"GBP\"\n        ],\n        \"fiProvider\": [\n            \"paynetics\"\n        ],\n        \"channelProvider\": [\n            \"gps\"\n        ]\n    },\n    \"cardFundingType\": \"PREPAID\"\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/managed_cards_v2/programmes/{{programme_id}}/profiles/_/create",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"managed_cards_v2",
								"programmes",
								"{{programme_id}}",
								"profiles",
								"_",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create corporate managed cards profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"card_type\");",
									"pm.environment.unset(\"card_brand\");",
									"",
									"postman.setEnvironmentVariable(\"corporate_managed_cards_profile_id\", JSON.parse(responseBody).prepaidManagedCardsProfile.managedCardsProfile.profile.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Inputs here",
									"// 1. This is the card type",
									"postman.setEnvironmentVariable(\"card_type\", \"VIRTUAL\");",
									" ",
									"// 2. This is the card brand ",
									"postman.setEnvironmentVariable(\"card_brand\", \"MASTERCARD\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{pm_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"createPrepaidProfileRequest\":{\n      \"createManagedCardsProfileRequest\":{\n         \"code\":\"corporate_managed_cards\",\n         \"payletTypeCode\":\"corporate_managed_cards\",\n         \"cardType\":\"VIRTUAL\",\n         \"cardBrand\":\"MASTERCARD\",\n         \"expiryPeriodMonths\":36,\n         \"renewalType\":\"NO_RENEW\",\n         \"singleSpend\":false,\n         \"forexFeePercentage\":\"ONE_PERCENT\",\n         \"cardBureau\":\"NITECREST\",\n         \"unassignedCardPoolEnabled\":\"TRUE\",\n         \"cardFundingType\":\"PREPAID\",\n          \"purchaseFee\": [\n        {\n            \"name\": \"DEFAULT\",\n            \"fee\": {\n                \"type\": \"FLAT\",\n                \"flatAmount\": [\n                    {\n                        \"currency\": \"EUR\",\n                        \"amount\": \"{{purchase_fee_eur}}\"\n                    },\n                    {\n                        \"currency\": \"GBP\",\n                        \"amount\": \"{{purchase_fee_gbp}}\"\n                    },\n                    {\n                        \"currency\": \"USD\",\n                        \"amount\": \"{{purchase_fee_usd}}\"\n                    }\n                ],\n                \"percentage\": {\n                    \"value\": \"0\",\n                    \"scale\": 2\n                }\n            }\n        }\n    ]\n      },\n      \"currency\":[\n         \"EUR\",\n         \"USD\",\n         \"GBP\"\n      ],\n      \"fiProvider\":[\n         \"paynetics\"\n      ],\n      \"channelProvider\":[\n         \"gps\"\n      ]\n   },\n   \"cardFundingType\":\"PREPAID\"\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/managed_cards_v2/programmes/{{programme_id}}/profiles/_/create",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"managed_cards_v2",
								"programmes",
								"{{programme_id}}",
								"profiles",
								"_",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create transfers profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable(\"transfers_profile_id\", JSON.parse(responseBody).profile.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{pm_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"code\": \"default_transfers\",\n  \"payletTypeCode\": \"default_transfers\",\n  \"forexProvider\": \"ecb\"\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/transfers_v2/programmes/{{programme_id}}/profiles/_/create",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"transfers_v2",
								"programmes",
								"{{programme_id}}",
								"profiles",
								"_",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create send profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable(\"send_profile_id\", JSON.parse(responseBody).profile.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{pm_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"code\": \"default_send\",\n  \"payletTypeCode\": \"default_send\",\n  \"forexProvider\": \"ecb\"\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/send_v2/programmes/{{programme_id}}/profiles/_/create",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"send_v2",
								"programmes",
								"{{programme_id}}",
								"profiles",
								"_",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update transfers profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{pm_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferCardToAccountFee\": [\n    {\n      \"fee\": {\n        \"type\": \"FLAT\",\n        \"flatAmount\": [\n          {\n            \"currency\": \"EUR\",\n            \"amount\": {{transfer_send_fee_eur}}\n          },\n          {\n            \"currency\": \"GBP\",\n            \"amount\": {{transfer_send_fee_gbp}}\n          },\n          {\n            \"currency\": \"USD\",\n            \"amount\": {{transfer_send_fee_usd}}\n          }\n        ],\n        \"percentage\": {\n          \"value\": 0,\n          \"scale\": 0\n        }\n      }\n    }\n  ],\n  \"transferAccountToCardFee\": [\n    {\n      \"fee\": {\n        \"type\": \"FLAT\",\n        \"flatAmount\": [\n          {\n            \"currency\": \"EUR\",\n            \"amount\": {{transfer_send_fee_eur}}\n          },\n          {\n            \"currency\": \"GBP\",\n            \"amount\": {{transfer_send_fee_gbp}}\n          },\n          {\n            \"currency\": \"USD\",\n            \"amount\": {{transfer_send_fee_usd}}\n          }\n        ],\n        \"percentage\": {\n          \"value\": 0,\n          \"scale\": 0\n        }\n      }\n    }\n  ],\n  \"transferCardToCardFee\": [\n    {\n      \"fee\": {\n        \"type\": \"FLAT\",\n        \"flatAmount\": [\n          {\n            \"currency\": \"EUR\",\n            \"amount\": {{transfer_send_fee_eur}}\n          },\n          {\n            \"currency\": \"GBP\",\n            \"amount\": {{transfer_send_fee_gbp}}\n          },\n          {\n            \"currency\": \"USD\",\n            \"amount\": {{transfer_send_fee_usd}}\n          }\n        ],\n        \"percentage\": {\n          \"value\": 0,\n          \"scale\": 0\n        }\n      }\n    }\n  ],\n  \"transferAccountToAccountFee\": [\n    {\n      \"fee\": {\n        \"type\": \"FLAT\",\n        \"flatAmount\": [\n          {\n            \"currency\": \"EUR\",\n            \"amount\": {{transfer_send_fee_eur}}\n          },\n          {\n            \"currency\": \"GBP\",\n            \"amount\": {{transfer_send_fee_gbp}}\n          },\n          {\n            \"currency\": \"USD\",\n            \"amount\": {{transfer_send_fee_usd}}\n          }\n        ],\n        \"percentage\": {\n          \"value\": 0,\n          \"scale\": 0\n        }\n      }\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/transfers_v2/programmes/{{programme_id}}/profiles/{{transfers_profile_id}}/update",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"transfers_v2",
								"programmes",
								"{{programme_id}}",
								"profiles",
								"{{transfers_profile_id}}",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update send profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{pm_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"sendCardToAccountFee\": [\n    {\n      \"fee\": {\n        \"type\": \"FLAT\",\n        \"flatAmount\": [\n          {\n            \"currency\": \"EUR\",\n            \"amount\": {{transfer_send_fee_eur}}\n          },\n          {\n            \"currency\": \"GBP\",\n            \"amount\": {{transfer_send_fee_gbp}}\n          },\n          {\n            \"currency\": \"USD\",\n            \"amount\": {{transfer_send_fee_usd}}\n          }\n        ],\n        \"percentage\": {\n          \"value\": 0,\n          \"scale\": 0\n        }\n      }\n    }\n  ],\n  \"sendAccountToCardFee\": [\n    {\n      \"fee\": {\n        \"type\": \"FLAT\",\n        \"flatAmount\": [\n          {\n            \"currency\": \"EUR\",\n            \"amount\": {{transfer_send_fee_eur}}\n          },\n          {\n            \"currency\": \"GBP\",\n            \"amount\": {{transfer_send_fee_gbp}}\n          },\n          {\n            \"currency\": \"USD\",\n            \"amount\": {{transfer_send_fee_usd}}\n          }\n        ],\n        \"percentage\": {\n          \"value\": 0,\n          \"scale\": 0\n        }\n      }\n    }\n  ],\n  \"sendCardToCardFee\": [\n    {\n      \"fee\": {\n        \"type\": \"FLAT\",\n        \"flatAmount\": [\n          {\n            \"currency\": \"EUR\",\n            \"amount\": {{transfer_send_fee_eur}}\n          },\n          {\n            \"currency\": \"GBP\",\n            \"amount\": {{transfer_send_fee_gbp}}\n          },\n          {\n            \"currency\": \"USD\",\n            \"amount\": {{transfer_send_fee_usd}}\n          }\n        ],\n        \"percentage\": {\n          \"value\": 0,\n          \"scale\": 0\n        }\n      }\n    }\n  ],\n  \"sendAccountToAccountFee\": [\n    {\n      \"fee\": {\n        \"type\": \"FLAT\",\n        \"flatAmount\": [\n          {\n            \"currency\": \"EUR\",\n            \"amount\": {{transfer_send_fee_eur}}\n          },\n          {\n            \"currency\": \"GBP\",\n            \"amount\": {{transfer_send_fee_gbp}}\n          },\n          {\n            \"currency\": \"USD\",\n            \"amount\": {{transfer_send_fee_usd}}\n          }\n        ],\n        \"percentage\": {\n          \"value\": 0,\n          \"scale\": 0\n        }\n      }\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/send_v2/programmes/{{programme_id}}/profiles/{{send_profile_id}}/update",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"send_v2",
								"programmes",
								"{{programme_id}}",
								"profiles",
								"{{send_profile_id}}",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create outgoing wire transfer profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable(\"owt_profile_id\", JSON.parse(responseBody).profile.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{pm_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"default_owts\",\n    \"payletTypeCode\": \"default_owts\",\n    \"supportedType\": [\"SEPA\", \"FASTER_PAYMENTS\"]\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/outgoing_wire_transfers/programmes/{{programme_id}}/profiles/_/create",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"outgoing_wire_transfers",
								"programmes",
								"{{programme_id}}",
								"profiles",
								"_",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update outgoing wire transfer profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{pm_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fee\": [\n        {\n            \"type\": \"FASTER_PAYMENTS\",\n            \"fees\": [\n                {\n                    \"name\": \"DEFAULT\",\n                    \"fee\": {\n                        \"type\": \"FLAT\",\n                        \"flatAmount\": [\n                            {\n                                \"currency\": \"EUR\",\n                                \"amount\": {{transfer_send_fee_eur}}\n                            },\n                            {\n                                \"currency\": \"GBP\",\n                                \"amount\": {{transfer_send_fee_gbp}}\n                            },\n                            {\n                                \"currency\": \"USD\",\n                                \"amount\": {{transfer_send_fee_usd}}\n                            }\n                        ]\n                    }\n                }\n            ]\n        },\n        {\n            \"type\": \"SEPA\",\n            \"fees\": [\n                {\n                    \"name\": \"DEFAULT\",\n                    \"fee\": {\n                        \"type\": \"FLAT\",\n                        \"flatAmount\": [\n                            {\n                                \"currency\": \"EUR\",\n                                \"amount\": {{transfer_send_fee_eur}}\n                            },\n                            {\n                                \"currency\": \"GBP\",\n                                \"amount\": {{transfer_send_fee_gbp}}\n                            },\n                            {\n                                \"currency\": \"USD\",\n                                \"amount\": {{transfer_send_fee_usd}}\n                            }\n                        ]\n                    }\n                }\n            ]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/outgoing_wire_transfers/programmes/{{programme_id}}/profiles/{{owt_profile_id}}/update",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"outgoing_wire_transfers",
								"programmes",
								"{{programme_id}}",
								"profiles",
								"{{owt_profile_id}}",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get outgoing wire transfer profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{pm_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/outgoing_wire_transfers/programmes/{{programme_id}}/profiles/{{owt_profile_id}}/get",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"outgoing_wire_transfers",
								"programmes",
								"{{programme_id}}",
								"profiles",
								"{{owt_profile_id}}",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get outgoing wire transfer profiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{pm_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/outgoing_wire_transfers/programmes/{{programme_id}}/profiles/get",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"outgoing_wire_transfers",
								"programmes",
								"{{programme_id}}",
								"profiles",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update consumers profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{pm_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"supportedSecretTypes\": {\n    \"secretType\": [\n      {\n        \"firstSecretType\": \"passwords\"\n      }\n    ]\n  },\n  \"emailVerificationUrl\" : \"https://qa.weavr.io\",\n  \"emailSender\": \"model10consumers@weavr.io\",\n  \"customFee\": [\n    {\n      \"feeKey\": \"PRINTED_CARD_ACCOUNT_STATEMENT\",\n      \"fee\": [\n        {\n          \"fee\": {\n            \"type\": \"FLAT\",\n            \"flatAmount\": [\n                    {\n                        \"currency\": \"EUR\",\n                        \"amount\": {{custom_fee_eur}}\n                    },\n                    {\n                        \"currency\": \"GBP\",\n                        \"amount\": {{custom_fee_gbp}}\n                    },\n                    {\n                        \"currency\": \"USD\",\n                        \"amount\": {{custom_fee_usd}}\n                    }\n                ]\n          }\n        }\n      ]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/consumers_v2/programmes/{{programme_id}}/profiles/{{consumers_profile_id}}/update",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"consumers_v2",
								"programmes",
								"{{programme_id}}",
								"profiles",
								"{{consumers_profile_id}}",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update corporates profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"emailVerificationURL\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Inputs here",
									"// 1. This is the innovator's URL that will be used for email verification",
									"postman.setEnvironmentVariable(\"emailVerificationURL\", \"https://model8.weavr.io\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{pm_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"emailVerificationUrl\": \"{{emailVerificationURL}}\",\n    \"emailSender\": \"noreply@model10.io\",\n    \"customFee\": [\n    {\n      \"feeKey\": \"PRINTED_CARD_ACCOUNT_STATEMENT\",\n\t\t\t\"fee\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"TEST1\",\n\t\t\t\t\t\"fee\": {\n\t\t\t\t\t\t\"type\": \"FLAT\",\n\t\t\t\t\t\t\"flatAmount\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"currency\": \"EUR\",\n\t\t\t\t\t\t\t\t\"amount\": \"400\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"currency\": \"GBP\",\n\t\t\t\t\t\t\t\t\"amount\": \"0\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"currency\": \"USD\",\n\t\t\t\t\t\t\t\t\"amount\": \"0\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"percentage\": {\n\t\t\t\t\t\t\t\"value\": \"0\",\n\t\t\t\t\t\t\t\"scale\": 2\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},{\n\t\t\t\t\t\"name\": \"DEFAULT\",\n\t\t\t\t\t\"fee\": {\n\t\t\t\t\t\t\"type\": \"FLAT\",\n\t\t\t\t\t\t\"flatAmount\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"currency\": \"EUR\",\n\t\t\t\t\t\t\t\t\"amount\": \"300\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"currency\": \"GBP\",\n\t\t\t\t\t\t\t\t\"amount\": \"0\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"currency\": \"USD\",\n\t\t\t\t\t\t\t\t\"amount\": \"0\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"percentage\": {\n\t\t\t\t\t\t\t\"value\": \"0\",\n\t\t\t\t\t\t\t\"scale\": 2\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"TEST2\",\n\t\t\t\t\t\"fee\": {\n\t\t\t\t\t\t\"type\": \"FLAT\",\n\t\t\t\t\t\t\"flatAmount\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"currency\": \"EUR\",\n\t\t\t\t\t\t\t\t\"amount\": \"200\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"currency\": \"GBP\",\n\t\t\t\t\t\t\t\t\"amount\": \"0\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"currency\": \"USD\",\n\t\t\t\t\t\t\t\t\"amount\": \"0\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"percentage\": {\n\t\t\t\t\t\t\t\"value\": \"0\",\n\t\t\t\t\t\t\t\"scale\": 2\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/corporates/programmes/{{programme_id}}/profiles/{{corporates_profile_id}}/update",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"corporates",
								"programmes",
								"{{programme_id}}",
								"profiles",
								"{{corporates_profile_id}}",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update consumer managed cards profile Auth Rule Set",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Inputs here",
									"// 1. This is the card type",
									"postman.setEnvironmentVariable(\"card_type\", \"VIRTUAL\");",
									" ",
									"// 2. This is the card brand ",
									"postman.setEnvironmentVariable(\"card_brand\", \"MASTERCARD\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{pm_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"blockedMerchantCategories\": [\n    \"7995\"\n  ],\n  \"blockedMerchantIds\": [\n    \"mcGame4_profile\"\n  ],\n  \"allowContactless\": \"TRUE\",\n  \"allowAtm\": \"FALSE\",\n  \"allowECommerce\": \"TRUE\",\n  \"allowCreditAuthorisations\": \"FALSE\"\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/managed_cards_v2/programmes/{{programme_id}}/profiles/{{consumer_managed_cards_profile_id}}/spend_rule/set",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"managed_cards_v2",
								"programmes",
								"{{programme_id}}",
								"profiles",
								"{{consumer_managed_cards_profile_id}}",
								"spend_rule",
								"set"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update consumer managed cards profile Auth Rule Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Inputs here",
									"// 1. This is the card type",
									"postman.setEnvironmentVariable(\"card_type\", \"VIRTUAL\");",
									" ",
									"// 2. This is the card brand ",
									"postman.setEnvironmentVariable(\"card_brand\", \"MASTERCARD\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{pm_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/managed_cards_v2/programmes/{{programme_id}}/profiles/{{consumer_managed_cards_profile_id}}/spend_rule/get",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"managed_cards_v2",
								"programmes",
								"{{programme_id}}",
								"profiles",
								"{{consumer_managed_cards_profile_id}}",
								"spend_rule",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update corporate managed cards profile Auth Rule Set",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Inputs here",
									"// 1. This is the card type",
									"postman.setEnvironmentVariable(\"card_type\", \"VIRTUAL\");",
									" ",
									"// 2. This is the card brand ",
									"postman.setEnvironmentVariable(\"card_brand\", \"MASTERCARD\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{pm_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"blockedMerchantCategories\": [\n    \"7995\"\n  ],\n  \"blockedMerchantIds\": [\n    \"mcGame4_profile\"\n  ],\n  \"allowContactless\": \"TRUE\",\n  \"allowAtm\": \"FALSE\",\n  \"allowECommerce\": \"TRUE\"\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/managed_cards_v2/programmes/{{programme_id}}/profiles/{{corporate_managed_cards_profile_id}}/spend_rule/set",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"managed_cards_v2",
								"programmes",
								"{{programme_id}}",
								"profiles",
								"{{corporate_managed_cards_profile_id}}",
								"spend_rule",
								"set"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update corporate managed accounts profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{pm_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"depositFee\": [\n    {\n      \"fee\": {\n        \"type\": \"FLAT\",\n        \"flatAmount\": [\n\t      {\n\t        \"currency\": \"EUR\",\n\t        \"amount\": {{deposit_fee_eur}}\n\t      },\n\t      {\n\t        \"currency\": \"GBP\",\n\t        \"amount\": {{deposit_fee_gbp}}\n\t      },\n\t      {\n\t        \"currency\": \"USD\",\n\t        \"amount\": {{deposit_fee_usd}}\n\t      }\n    \t]\n      }\n    }\n  ],\n  \"withdrawalFee\": [\n    {\n      \"fee\": {\n        \"type\": \"FLAT\",\n        \"flatAmount\": [\n\t      {\n\t        \"currency\": \"EUR\",\n\t        \"amount\": {{withdraw_fee_eur}}\n\t      },\n\t      {\n\t        \"currency\": \"GBP\",\n\t        \"amount\": {{withdraw_fee_gbp}}\n\t      },\n\t      {\n\t        \"currency\": \"USD\",\n\t        \"amount\": {{withdraw_fee_usd}}\n\t      }\n    \t]\n      }\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/managed_accounts_v2/programmes/{{programme_id}}/profiles/{{corporates_managed_accounts_profile_id}}/update",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"managed_accounts_v2",
								"programmes",
								"{{programme_id}}",
								"profiles",
								"{{corporates_managed_accounts_profile_id}}",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update consumer managed accounts profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{pm_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"depositFee\": [\n    {\n      \"fee\": {\n        \"type\": \"FLAT\",\n        \"flatAmount\": [\n\t      {\n\t        \"currency\": \"EUR\",\n\t        \"amount\": {{deposit_fee_eur}}\n\t      },\n\t      {\n\t        \"currency\": \"GBP\",\n\t        \"amount\": {{deposit_fee_gbp}}\n\t      },\n\t      {\n\t        \"currency\": \"USD\",\n\t        \"amount\": {{deposit_fee_usd}}\n\t      }\n    \t]\n      }\n    }\n  ],\n  \"withdrawalFee\": [\n    {\n      \"fee\": {\n        \"type\": \"FLAT\",\n        \"flatAmount\": [\n\t      {\n\t        \"currency\": \"EUR\",\n\t        \"amount\": {{withdraw_fee_eur}}\n\t      },\n\t      {\n\t        \"currency\": \"GBP\",\n\t        \"amount\": {{withdraw_fee_gbp}}\n\t      },\n\t      {\n\t        \"currency\": \"USD\",\n\t        \"amount\": {{withdraw_fee_usd}}\n\t      }\n    \t]\n      }\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/managed_accounts_v2/programmes/{{programme_id}}/profiles/{{consumer_managed_accounts_profile_id}}/update",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"managed_accounts_v2",
								"programmes",
								"{{programme_id}}",
								"profiles",
								"{{consumer_managed_accounts_profile_id}}",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Corporate Card Pool Replenish EUR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{pm_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"prepaidCardBatchRequest\": {\n        \"prepaidUnassignedCardBatchRequest\": {\n            \"profileId\": {{corporate_managed_cards_profile_id}},\n            \"tag\": \"batch_tag\",\n            \n            \"type\": \"VIRTUAL\",\n            \"cardLevelClassification\": \"CORPORATE\",\n            \"deliveryMethod\": \"STANDARD_DELIVERY\",\n            \"deliveryAddress\": {\n                \"addressLine1\": \"10\",\n                \"addressLine2\": \"Triq Ta Franton\",\n                \"city\": \"Rabat\",\n                \"country\": \"MT\",\n                \"postCode\": \"RBT1742\",\n                \"state\": \"string\"\n            },\n            \"activationCode\": \"123456\",\n            \"batchSize\": 1\n        },\n        \"currency\": \"EUR\"\n       \n    },\n     \"cardFundingType\": \"PREPAID\"\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/managed_cards_v2/card_pool/replenish",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"managed_cards_v2",
								"card_pool",
								"replenish"
							]
						}
					},
					"response": []
				},
				{
					"name": "Corporate Card Pool Replenish EUR Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"postman.setEnvironmentVariable(\"corporate_card_pool_eur_ext_handle\", JSON.parse(responseBody).cardPool[0].prepaidUnassignedCard.managedCard.externalHandle);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{pm_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"paging\": {\n    \"offset\": 0,\n    \"limit\": 50\n  },\n  \"countOnly\": false\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/managed_cards_v2/card_pool/get",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"managed_cards_v2",
								"card_pool",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invite Innovator User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let rand = Math.floor(Date.now() / 1000);",
									"pm.environment.set(\"invited_innovator_email\",rand + \"@weavr-model10.io\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "X-TOKEN {{pm_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"invited\",\n  \"surname\": \"user\",\n  \"email\": \"{{invited_innovator_email}}\",\n  \"role\": \"INNOVATOR_OPERATOR\"\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/gateway/invites/create",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"gateway",
								"invites",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invite Innovator Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let rand = Math.floor(Date.now() / 1000);",
									"pm.environment.set(\"invited_innovator_email\",rand + \"@weavr-model10.io\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{pm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"invited\",\n  \"surname\": \"user\",\n  \"email\": \"{{invited_innovator_email}}\",\n  \"role\": \"INNOVATOR_OPERATOR\"\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/gateway/invites/get",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"gateway",
								"invites",
								"get"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Corporates",
			"item": [
				{
					"name": "Registration",
					"item": [
						{
							"name": "Create corporate EUR Missing Industry",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response checks\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.validation.fields[0].name).to.eql(\"industry\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"corp_name_eur\", \"corp\" + _.random(11111111, 999999999));",
											"// pm.environment.set(\"corp_name\", \"democorp2\");",
											"",
											"var registrationDate = new Date(\"2018-12-17\");",
											"pm.environment.set(\"reg_date\", registrationDate.getTime());",
											"pm.environment.set(\"corp_mobile_eur\",_.random(111111, 999999))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"profileId\": \"{{corporates_profile_id}}\",\n    \"companyName\": \"{{corp_name_eur}}\",\n    \"companyType\": \"SOLE_TRADER\",\n    \"supportEmail\": \"{{tenant_name}}.{{corp_name_eur}}@fakemail.com\",\n    \"active\": true,\n    \"rootUsername\": \"{{corp_name_eur}}\",\n    \"rootTitle\": \"Mr.\",\n    \"rootName\": \"root\",\n    \"rootSurname\": \"root\",\n    \"rootEmail\": \"{{corp_name_eur}}@fakemail.com\",\n    \"companyRegistrationNumber\": \"C8989\",\n    \"companyRegistrationAddress\": \"4 Triq A. De Saavedra, In-Naxxar, NXR 2232, Malta\",\n    \"companyBusinessAddress\": \"4 Triq A. De Saavedra, In-Naxxar, NXR 2232, Malta\",\n    \"registrationCountry\": \"MT\",\n    \"ipAddress\": \"111.222.333.444\",\n    \"rootCompanyPosition\": \"CEO\",\n    \"rootMobileCountryCode\": \"+356\",\n    \"rootMobileNumber\": \"{{corp_mobile_eur}}\",\n    \"baseCurrency\": \"EUR\",\n    \"incorporatedOn\": {\n\t    \"year\": 1985,\n\t    \"month\": 1,\n\t    \"day\": 15\n\t},\n\t\"sourceOfFunds\": \"LABOUR_CONTRACT\",\n    \"registrationAddress\": {\n        \"addressLine1\": \"regAddr1\",\n        \"addressLine2\": \"regAddr2\",\n        \"city\": \"regCity\",\n        \"country\": \"MT\",\n        \"postCode\": \"regMT123\",\n        \"state\": \"Rabat\"\n    },\n    \"businessAddress\": {\n        \"addressLine1\": \"busAddr1\",\n        \"addressLine2\": \"busAddr2\",\n        \"city\": \"busCity\",\n        \"country\": \"MT\",\n        \"postCode\": \"regMT123\",\n        \"state\": \"Rabat\"\n    }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create corporate EUR Missing SOF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response checks\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.validation.fields[0].name).to.eql(\"sourceOfFunds\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"corp_name_eur\", \"corp\" + _.random(11111111, 999999999));",
											"// pm.environment.set(\"corp_name\", \"democorp2\");",
											"",
											"var registrationDate = new Date(\"2018-12-17\");",
											"pm.environment.set(\"reg_date\", registrationDate.getTime());",
											"pm.environment.set(\"corp_mobile_eur\",_.random(111111, 999999))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"profileId\": \"{{corporates_profile_id}}\",\n    \"companyName\": \"{{corp_name_eur}}\",\n    \"companyType\": \"SOLE_TRADER\",\n    \"supportEmail\": \"{{tenant_name}}.{{corp_name_eur}}@fakemail.com\",\n    \"active\": true,\n    \"rootUsername\": \"{{corp_name_eur}}\",\n    \"rootTitle\": \"Mr.\",\n    \"rootName\": \"root\",\n    \"rootSurname\": \"root\",\n    \"rootEmail\": \"{{corp_name_eur}}@fakemail.com\",\n    \"companyRegistrationNumber\": \"C8989\",\n    \"companyRegistrationAddress\": \"4 Triq A. De Saavedra, In-Naxxar, NXR 2232, Malta\",\n    \"companyBusinessAddress\": \"4 Triq A. De Saavedra, In-Naxxar, NXR 2232, Malta\",\n    \"registrationCountry\": \"MT\",\n    \"ipAddress\": \"111.222.333.444\",\n    \"rootCompanyPosition\": \"CEO\",\n    \"rootMobileCountryCode\": \"+356\",\n    \"rootMobileNumber\": \"{{corp_mobile_eur}}\",\n    \"baseCurrency\": \"EUR\",\n    \"incorporatedOn\": {\n\t    \"year\": 1985,\n\t    \"month\": 1,\n\t    \"day\": 15\n\t},\n\t\"industry\": \"ACCOUNTING\",\n    \"registrationAddress\": {\n        \"addressLine1\": \"regAddr1\",\n        \"addressLine2\": \"regAddr2\",\n        \"city\": \"regCity\",\n        \"country\": \"MT\",\n        \"postCode\": \"regMT123\",\n        \"state\": \"Rabat\"\n    },\n    \"businessAddress\": {\n        \"addressLine1\": \"busAddr1\",\n        \"addressLine2\": \"busAddr2\",\n        \"city\": \"busCity\",\n        \"country\": \"MT\",\n        \"postCode\": \"regMT123\",\n        \"state\": \"Rabat\"\n    }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create corporate EUR Missing SOF Other",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Response checks\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"SOURCE_OF_FUNDS_OTHER_MISSING\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"corp_name_eur\", \"corp\" + _.random(11111111, 999999999));",
											"// pm.environment.set(\"corp_name\", \"democorp2\");",
											"",
											"var registrationDate = new Date(\"2018-12-17\");",
											"pm.environment.set(\"reg_date\", registrationDate.getTime());",
											"pm.environment.set(\"corp_mobile_eur\",_.random(111111, 999999))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"profileId\": \"{{corporates_profile_id}}\",\n    \"companyName\": \"{{corp_name_eur}}\",\n    \"companyType\": \"SOLE_TRADER\",\n    \"supportEmail\": \"{{tenant_name}}.{{corp_name_eur}}@fakemail.com\",\n    \"active\": true,\n    \"rootUsername\": \"{{corp_name_eur}}\",\n    \"rootTitle\": \"Mr.\",\n    \"rootName\": \"root\",\n    \"rootSurname\": \"root\",\n    \"rootEmail\": \"{{corp_name_eur}}@fakemail.com\",\n    \"companyRegistrationNumber\": \"C8989\",\n    \"companyRegistrationAddress\": \"4 Triq A. De Saavedra, In-Naxxar, NXR 2232, Malta\",\n    \"companyBusinessAddress\": \"4 Triq A. De Saavedra, In-Naxxar, NXR 2232, Malta\",\n    \"registrationCountry\": \"MT\",\n    \"ipAddress\": \"111.222.333.444\",\n    \"rootCompanyPosition\": \"CEO\",\n    \"rootMobileCountryCode\": \"+356\",\n    \"rootMobileNumber\": \"{{corp_mobile_eur}}\",\n    \"baseCurrency\": \"EUR\",\n    \"incorporatedOn\": {\n\t    \"year\": 1985,\n\t    \"month\": 1,\n\t    \"day\": 15\n\t},\n\t\"industry\": \"ACCOUNTING\",\n\t\"sourceOfFunds\": \"OTHER\",\n    \"registrationAddress\": {\n        \"addressLine1\": \"regAddr1\",\n        \"addressLine2\": \"regAddr2\",\n        \"city\": \"regCity\",\n        \"country\": \"MT\",\n        \"postCode\": \"regMT123\",\n        \"state\": \"Rabat\"\n    },\n    \"businessAddress\": {\n        \"addressLine1\": \"busAddr1\",\n        \"addressLine2\": \"busAddr2\",\n        \"city\": \"busCity\",\n        \"country\": \"MT\",\n        \"postCode\": \"regMT123\",\n        \"state\": \"Rabat\"\n    }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate Password Correct",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"value": "{{secret_programme_key}}",
										"type": "text"
									},
									{
										"key": "call-ref",
										"value": "test",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"identityProfileId\": {{corporates_profile_id}},\n  \"credentialType\": \"ROOT\",\n  \"password\": {\n    \"value\": \"Pass1234!\"\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/validate",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"validate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate Password Short",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Password Too Short\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"PASSWORD_TOO_SHORT\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "call-ref",
										"type": "text",
										"value": "test",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"identityProfileId\": {{corporates_profile_id}},\n  \"credentialType\": \"ROOT\",\n  \"password\": {\n    \"value\": \"Pass12\"\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/validate",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"validate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate Password Long",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Password Too Long\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"PASSWORD_TOO_LONG\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "call-ref",
										"type": "text",
										"value": "test",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"identityProfileId\": {{corporates_profile_id}},\n  \"credentialType\": \"ROOT\",\n  \"password\": {\n    \"value\": \"Pass121111111111111435253253252525325525325444344324324243242425\"\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/validate",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"validate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create corporate EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corporate_id_eur\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"corporate_root_user_id_eur\", JSON.parse(responseBody).rootUser.id);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_profile_id\"));",
											"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"corp_name_eur\"));",
											"    pm.expect(jsonData.companyType).to.eql(\"SOLE_TRADER\");",
											"    pm.expect(jsonData.active).to.eql(true);",
											"    pm.expect(jsonData.companyRegistrationNumber).to.eql(\"C8989\");",
											"    pm.expect(jsonData.companyRegistrationAddress).to.eql(\"regAddr1\");",
											"    pm.expect(jsonData.companyBusinessAddress).to.eql(\"busAddr1\");",
											"    pm.expect(jsonData.registrationCountry).to.eql(\"MT\");",
											"    pm.expect(jsonData.acceptedTerms).to.eql(true);",
											"    pm.expect(jsonData.kyb.rootEmailVerified).to.eql(false);",
											"    pm.expect(jsonData.kyb.rootMobileVerified).to.eql(false);",
											"    pm.expect(jsonData.kyb.basicCompanyChecksVerified).to.eql(\"NOT_STARTED\");",
											"    pm.expect(jsonData.kyb.fullCompanyChecksVerified).to.eql(\"NOT_STARTED\");",
											"    pm.expect(jsonData.baseCurrency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.incorporatedOn.year).to.eql(1985);",
											"    pm.expect(jsonData.incorporatedOn.month).to.eql(1);",
											"    pm.expect(jsonData.incorporatedOn.day).to.eql(15);",
											"    pm.expect(jsonData.industry).to.eql(\"ACCOUNTING\");",
											"    pm.expect(jsonData.registrationAddress.addressLine1).to.eql(\"regAddr1\");",
											"    pm.expect(jsonData.registrationAddress.addressLine2).to.eql(\"regAddr2\");",
											"    pm.expect(jsonData.registrationAddress.city).to.eql(\"regCity\");",
											"    pm.expect(jsonData.registrationAddress.country).to.eql(\"MT\");",
											"    pm.expect(jsonData.registrationAddress.postCode).to.eql(\"regMT123\");",
											"    pm.expect(jsonData.registrationAddress.state).to.eql(\"Rabat\");",
											"    pm.expect(jsonData.businessAddress.addressLine1).to.eql(\"busAddr1\");",
											"    pm.expect(jsonData.businessAddress.addressLine2).to.eql(\"busAddr2\");",
											"    pm.expect(jsonData.businessAddress.city).to.eql(\"busCity\");",
											"    pm.expect(jsonData.businessAddress.country).to.eql(\"MT\");",
											"    pm.expect(jsonData.businessAddress.postCode).to.eql(\"regMT123\");",
											"    pm.expect(jsonData.businessAddress.state).to.eql(\"Rabat\");",
											"});",
											"",
											"pm.environment.unset(\"corp_token\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"corp_name_eur\", \"corp\" + _.random(11111111, 999999999));",
											"// pm.environment.set(\"corp_name\", \"democorp2\");",
											"",
											"var registrationDate = new Date(\"2018-12-17\");",
											"pm.environment.set(\"reg_date\", registrationDate.getTime());",
											"pm.environment.set(\"corp_mobile_eur\",_.random(111111, 999999))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"profileId\": \"{{corporates_profile_id}}\",\n    \"companyName\": \"{{corp_name_eur}}\",\n    \"companyType\": \"SOLE_TRADER\",\n    \"supportEmail\": \"{{tenant_name}}.{{corp_name_eur}}@fakemail.com\",\n    \"active\": true,\n    \"rootUsername\": \"{{corp_name_eur}}\",\n    \"rootTitle\": \"Mr.\",\n    \"rootName\": \"root\",\n    \"rootSurname\": \"root\",\n    \"rootEmail\": \"{{corp_name_eur}}@fakemail.com\",\n    \"companyRegistrationNumber\": \"C8989\",\n    \"companyRegistrationAddress\": \"4 Triq A. De Saavedra, In-Naxxar, NXR 2232, Malta\",\n    \"companyBusinessAddress\": \"4 Triq A. De Saavedra, In-Naxxar, NXR 2232, Malta\",\n    \"registrationCountry\": \"MT\",\n    \"ipAddress\": \"111.222.333.444\",\n    \"rootCompanyPosition\": \"CEO\",\n    \"rootMobileCountryCode\": \"+356\",\n    \"rootMobileNumber\": \"{{corp_mobile_eur}}\",\n    \"baseCurrency\": \"EUR\",\n    \"incorporatedOn\": {\n\t    \"year\": 1985,\n\t    \"month\": 1,\n\t    \"day\": 15\n\t},\n\t\"industry\": \"ACCOUNTING\",\n\t\"sourceOfFunds\": \"LABOUR_CONTRACT\",\n    \"registrationAddress\": {\n        \"addressLine1\": \"regAddr1\",\n        \"addressLine2\": \"regAddr2\",\n        \"city\": \"regCity\",\n        \"country\": \"MT\",\n        \"postCode\": \"regMT123\",\n        \"state\": \"Rabat\"\n    },\n    \"businessAddress\": {\n        \"addressLine1\": \"busAddr1\",\n        \"addressLine2\": \"busAddr2\",\n        \"city\": \"busCity\",\n        \"country\": \"MT\",\n        \"postCode\": \"regMT123\",\n        \"state\": \"Rabat\"\n    }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create corporate GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corporate_id_gbp\", JSON.parse(responseBody).id.id);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_profile_id\"));",
											"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"corp_name_gbp\"));",
											"    pm.expect(jsonData.companyType).to.eql(\"SOLE_TRADER\");",
											"    pm.expect(jsonData.active).to.eql(true);",
											"    pm.expect(jsonData.companyRegistrationNumber).to.eql(\"C8989\");",
											"    pm.expect(jsonData.companyRegistrationAddress).to.eql(\"4 Triq A. De Saavedra, In-Naxxar, NXR 2232, Malta\");",
											"    pm.expect(jsonData.companyBusinessAddress).to.eql(\"4 Triq A. De Saavedra, In-Naxxar, NXR 2232, Malta\");",
											"    pm.expect(jsonData.registrationCountry).to.eql(\"MT\");",
											"    pm.expect(jsonData.acceptedTerms).to.eql(true);",
											"    pm.expect(jsonData.kyb.rootEmailVerified).to.eql(false);",
											"    pm.expect(jsonData.kyb.rootMobileVerified).to.eql(false);",
											"    pm.expect(jsonData.kyb.basicCompanyChecksVerified).to.eql(\"NOT_STARTED\");",
											"    pm.expect(jsonData.kyb.fullCompanyChecksVerified).to.eql(\"NOT_STARTED\");",
											"    pm.expect(jsonData.baseCurrency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.incorporatedOn.year).to.eql(1983);",
											"    pm.expect(jsonData.incorporatedOn.month).to.eql(2);",
											"    pm.expect(jsonData.incorporatedOn.day).to.eql(20);",
											"    pm.expect(jsonData.industry).to.eql(\"ART_ENTERTAINMENT\");",
											"    pm.expect(jsonData.sourceOfFunds).to.eql(\"LOAN_FROM_FINANCIAL_INSTITUTIONS_CREDIT_UNIONS\");",
											"});",
											"",
											"pm.environment.unset(\"corp_token\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"pm.environment.set(\"corp_name_gbp\", \"corp\" + _.random(11111111, 999999999));",
											"// pm.environment.set(\"corp_name\", \"democorp2\");",
											"",
											"var registrationDate = new Date(\"2018-12-17\");",
											"pm.environment.set(\"reg_date\", registrationDate.getTime());",
											"pm.environment.set(\"corp_mobile_gbp\",_.random(111111, 999999))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"profileId\": \"{{corporates_profile_id}}\",\n    \"companyName\": \"{{corp_name_gbp}}\",\n    \"companyType\": \"SOLE_TRADER\",\n    \"supportEmail\": \"{{tenant_name}}.{{corp_name_gbp}}@fakemail.com\",\n    \"active\": true,\n    \"rootUsername\": \"{{corp_name_gbp}}\",\n    \"rootTitle\": \"Mr.\",\n    \"rootName\": \"root\",\n    \"rootSurname\": \"root\",\n    \"rootEmail\": \"{{corp_name_gbp}}@fakemail.com\",\n    \"companyRegistrationNumber\": \"C8989\",\n    \"companyRegistrationAddress\": \"4 Triq A. De Saavedra, In-Naxxar, NXR 2232, Malta\",\n    \"companyBusinessAddress\": \"4 Triq A. De Saavedra, In-Naxxar, NXR 2232, Malta\",\n    \"registrationCountry\": \"MT\",\n    \"acceptedTerms\": \"TRUE\",\n    \"ipAddress\": \"111.222.333.444\",\n    \"rootCompanyPosition\": \"CEO\",\n    \"rootMobileCountryCode\": \"+356\",\n    \"rootMobileNumber\": \"{{corp_mobile_gbp}}\",\n    \"baseCurrency\": \"GBP\",\n    \"incorporatedOn\": {\n\t    \"year\": 1983,\n\t    \"month\": 2,\n\t    \"day\": 20\n\t},\n\t\"industry\": \"ART_ENTERTAINMENT\",\n  \"sourceOfFunds\": \"LOAN_FROM_FINANCIAL_INSTITUTIONS_CREDIT_UNIONS\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create corporate USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corporate_id_usd\", JSON.parse(responseBody).id.id);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_profile_id\"));",
											"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"corp_name_usd\"));",
											"    pm.expect(jsonData.companyType).to.eql(\"SOLE_TRADER\");",
											"    pm.expect(jsonData.active).to.eql(true);",
											"    pm.expect(jsonData.companyRegistrationNumber).to.eql(\"C8989\");",
											"    pm.expect(jsonData.companyRegistrationAddress).to.eql(\"4 Triq A. De Saavedra, In-Naxxar, NXR 2232, Malta\");",
											"    pm.expect(jsonData.companyBusinessAddress).to.eql(\"4 Triq A. De Saavedra, In-Naxxar, NXR 2232, Malta\");",
											"    pm.expect(jsonData.registrationCountry).to.eql(\"MT\");",
											"    pm.expect(jsonData.acceptedTerms).to.eql(true);",
											"    pm.expect(jsonData.kyb.rootEmailVerified).to.eql(false);",
											"    pm.expect(jsonData.kyb.rootMobileVerified).to.eql(false);",
											"    pm.expect(jsonData.kyb.basicCompanyChecksVerified).to.eql(\"NOT_STARTED\");",
											"    pm.expect(jsonData.kyb.fullCompanyChecksVerified).to.eql(\"NOT_STARTED\");",
											"    pm.expect(jsonData.baseCurrency).to.eql(\"USD\");",
											"    pm.expect(jsonData.incorporatedOn.year).to.eql(2000);",
											"    pm.expect(jsonData.incorporatedOn.month).to.eql(5);",
											"    pm.expect(jsonData.incorporatedOn.day).to.eql(25);",
											"    pm.expect(jsonData.industry).to.eql(\"PR_MARKETING\");",
											"    pm.expect(jsonData.sourceOfFunds).to.eql(\"OTHER\");",
											"    pm.expect(jsonData.sourceOfFundsOther).to.eql(\"Other funds\");",
											"});",
											"",
											"pm.environment.unset(\"corp_token\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"corp_name_usd\", \"corp\" + _.random(11111111, 999999999));",
											"// pm.environment.set(\"corp_name\", \"democorp2\");",
											"",
											"var registrationDate = new Date(\"2018-12-17\");",
											"pm.environment.set(\"reg_date\", registrationDate.getTime());",
											"pm.environment.set(\"corp_mobile_usd\",_.random(111111, 999999))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"profileId\": \"{{corporates_profile_id}}\",\n    \"companyName\": \"{{corp_name_usd}}\",\n    \"companyType\": \"SOLE_TRADER\",\n    \"supportEmail\": \"{{tenant_name}}.{{corp_name_usd}}@fakemail.com\",\n    \"active\": true,\n    \"rootUsername\": \"{{corp_name_usd}}\",\n    \"rootTitle\": \"Mr.\",\n    \"rootName\": \"root\",\n    \"rootSurname\": \"root\",\n    \"rootEmail\": \"{{corp_name_usd}}@fakemail.com\",\n    \"companyRegistrationNumber\": \"C8989\",\n    \"companyRegistrationAddress\": \"4 Triq A. De Saavedra, In-Naxxar, NXR 2232, Malta\",\n    \"companyBusinessAddress\": \"4 Triq A. De Saavedra, In-Naxxar, NXR 2232, Malta\",\n    \"registrationCountry\": \"MT\",\n    \"acceptedTerms\": \"TRUE\",\n    \"ipAddress\": \"111.222.333.444\",\n    \"rootCompanyPosition\": \"CEO\",\n    \"rootMobileCountryCode\": \"+356\",\n    \"rootMobileNumber\": \"{{corp_mobile_usd}}\",\n    \"baseCurrency\": \"USD\",\n    \"incorporatedOn\": {\n\t    \"year\": 2000,\n\t    \"month\": 5,\n\t    \"day\": 25\n\t},\n\t\"industry\": \"PR_MARKETING\",\n\t\"sourceOfFunds\": \"OTHER\",\n\t\"sourceOfFundsOther\": \"Other funds\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create corporate password identity EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{corporates_profile_id}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/identities/{{corporate_id_eur}}/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"identities",
										"{{corporate_id_eur}}",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create corporate password identity GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{corporates_profile_id}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/identities/{{corporate_id_gbp}}/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"identities",
										"{{corporate_id_gbp}}",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create corporate password identity USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{corporates_profile_id}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/identities/{{corporate_id_usd}}/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"identities",
										"{{corporate_id_usd}}",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create corporate password EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Expected Credential\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.credentialType).to.eql(\"ROOT\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"credentialType\": \"ROOT\",\n  \"identityId\": \"{{corporate_id_eur}}\",\n  \"password\": {\n    \"value\": \"Pass1234\"\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/{{corporate_id_eur}}/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"{{corporate_id_eur}}",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create corporate password GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Expected Credential\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.credentialType).to.eql(\"ROOT\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"credentialType\": \"ROOT\",\n  \"identityId\": \"{{corporate_id_gbp}}\",\n  \"password\": {\n    \"value\": \"Pass1234\"\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/{{corporate_id_gbp}}/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"{{corporate_id_gbp}}",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create corporate password USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Expected Credential\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.credentialType).to.eql(\"ROOT\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"credentialType\": \"ROOT\",\n  \"identityId\": \"{{corporate_id_usd}}\",\n  \"password\": {\n    \"value\": \"Pass1234\"\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/{{corporate_id_usd}}/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"{{corporate_id_usd}}",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login corporate Root User EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_token_eur\", JSON.parse(responseBody).token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Login Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.credential.type).to.eql(\"ROOT\");",
											"    pm.expect(jsonData.identity.type).to.eql(\"corporates\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"value": "{{secret_programme_key}}",
										"type": "text"
									},
									{
										"key": "call-ref",
										"value": "test",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"{{corp_name_eur}}\",\n  \"password\": \"Pass1234\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/login_with_password",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"login_with_password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login corporate Root User GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_token_gbp\", JSON.parse(responseBody).token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Login Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.credential.type).to.eql(\"ROOT\");",
											"    pm.expect(jsonData.identity.type).to.eql(\"corporates\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"value": "{{secret_programme_key}}",
										"type": "text"
									},
									{
										"key": "call-ref",
										"value": "test",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"{{corp_name_gbp}}\",\n  \"password\": \"Pass1234\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/login_with_password",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"login_with_password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login corporate Root User USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_token_usd\", JSON.parse(responseBody).token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Login Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.credential.type).to.eql(\"ROOT\");",
											"    pm.expect(jsonData.identity.type).to.eql(\"corporates\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"value": "{{secret_programme_key}}",
										"type": "text"
									},
									{
										"key": "call-ref",
										"value": "test",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"{{corp_name_usd}}\",\n  \"password\": \"Pass1234\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/login_with_password",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"login_with_password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Corporate EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_profile_id\"));",
											"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"corp_name_eur\"));",
											"    pm.expect(jsonData.companyType).to.eql(\"SOLE_TRADER\");",
											"    pm.expect(jsonData.active).to.eql(true);",
											"    pm.expect(jsonData.companyRegistrationNumber).to.eql(\"C8989\");",
											"    pm.expect(jsonData.companyRegistrationAddress).to.eql(\"regAddr1\");",
											"    pm.expect(jsonData.companyBusinessAddress).to.eql(\"busAddr1\");",
											"    pm.expect(jsonData.registrationCountry).to.eql(\"MT\");",
											"    pm.expect(jsonData.acceptedTerms).to.eql(true);",
											"    pm.expect(jsonData.kyb.rootEmailVerified).to.eql(false);",
											"    pm.expect(jsonData.kyb.rootMobileVerified).to.eql(false);",
											"    pm.expect(jsonData.kyb.basicCompanyChecksVerified).to.eql(\"NOT_STARTED\");",
											"    pm.expect(jsonData.kyb.fullCompanyChecksVerified).to.eql(\"NOT_STARTED\");",
											"    pm.expect(jsonData.baseCurrency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.incorporatedOn.year).to.eql(1985);",
											"    pm.expect(jsonData.incorporatedOn.month).to.eql(1);",
											"    pm.expect(jsonData.incorporatedOn.day).to.eql(15);",
											"    pm.expect(jsonData.industry).to.eql(\"ACCOUNTING\");",
											"    pm.expect(jsonData.registrationAddress.addressLine1).to.eql(\"regAddr1\");",
											"    pm.expect(jsonData.registrationAddress.addressLine2).to.eql(\"regAddr2\");",
											"    pm.expect(jsonData.registrationAddress.city).to.eql(\"regCity\");",
											"    pm.expect(jsonData.registrationAddress.country).to.eql(\"MT\");",
											"    pm.expect(jsonData.registrationAddress.postCode).to.eql(\"regMT123\");",
											"    pm.expect(jsonData.registrationAddress.state).to.eql(\"Rabat\");",
											"    pm.expect(jsonData.businessAddress.addressLine1).to.eql(\"busAddr1\");",
											"    pm.expect(jsonData.businessAddress.addressLine2).to.eql(\"busAddr2\");",
											"    pm.expect(jsonData.businessAddress.city).to.eql(\"busCity\");",
											"    pm.expect(jsonData.businessAddress.country).to.eql(\"MT\");",
											"    pm.expect(jsonData.businessAddress.postCode).to.eql(\"regMT123\");",
											"    pm.expect(jsonData.businessAddress.state).to.eql(\"Rabat\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_eur}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_eur}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Corporate GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_profile_id\"));",
											"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"corp_name_gbp\"));",
											"    pm.expect(jsonData.companyType).to.eql(\"SOLE_TRADER\");",
											"    pm.expect(jsonData.active).to.eql(true);",
											"    pm.expect(jsonData.companyRegistrationNumber).to.eql(\"C8989\");",
											"    pm.expect(jsonData.companyRegistrationAddress).to.eql(\"4 Triq A. De Saavedra, In-Naxxar, NXR 2232, Malta\");",
											"    pm.expect(jsonData.companyBusinessAddress).to.eql(\"4 Triq A. De Saavedra, In-Naxxar, NXR 2232, Malta\");",
											"    pm.expect(jsonData.registrationCountry).to.eql(\"MT\");",
											"    pm.expect(jsonData.acceptedTerms).to.eql(true);",
											"    pm.expect(jsonData.kyb.rootEmailVerified).to.eql(false);",
											"    pm.expect(jsonData.kyb.rootMobileVerified).to.eql(false);",
											"    pm.expect(jsonData.kyb.basicCompanyChecksVerified).to.eql(\"NOT_STARTED\");",
											"    pm.expect(jsonData.kyb.fullCompanyChecksVerified).to.eql(\"NOT_STARTED\");",
											"    pm.expect(jsonData.baseCurrency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.incorporatedOn.year).to.eql(1983);",
											"    pm.expect(jsonData.incorporatedOn.month).to.eql(2);",
											"    pm.expect(jsonData.incorporatedOn.day).to.eql(20);",
											"    pm.expect(jsonData.industry).to.eql(\"ART_ENTERTAINMENT\");",
											"    pm.expect(jsonData.sourceOfFunds).to.eql(\"LOAN_FROM_FINANCIAL_INSTITUTIONS_CREDIT_UNIONS\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_gbp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_gbp}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_gbp}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Corporate USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_profile_id\"));",
											"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"corp_name_usd\"));",
											"    pm.expect(jsonData.companyType).to.eql(\"SOLE_TRADER\");",
											"    pm.expect(jsonData.active).to.eql(true);",
											"    pm.expect(jsonData.companyRegistrationNumber).to.eql(\"C8989\");",
											"    pm.expect(jsonData.companyRegistrationAddress).to.eql(\"4 Triq A. De Saavedra, In-Naxxar, NXR 2232, Malta\");",
											"    pm.expect(jsonData.companyBusinessAddress).to.eql(\"4 Triq A. De Saavedra, In-Naxxar, NXR 2232, Malta\");",
											"    pm.expect(jsonData.registrationCountry).to.eql(\"MT\");",
											"    pm.expect(jsonData.acceptedTerms).to.eql(true);",
											"    pm.expect(jsonData.kyb.rootEmailVerified).to.eql(false);",
											"    pm.expect(jsonData.kyb.rootMobileVerified).to.eql(false);",
											"    pm.expect(jsonData.kyb.basicCompanyChecksVerified).to.eql(\"NOT_STARTED\");",
											"    pm.expect(jsonData.kyb.fullCompanyChecksVerified).to.eql(\"NOT_STARTED\");",
											"    pm.expect(jsonData.baseCurrency).to.eql(\"USD\");",
											"    pm.expect(jsonData.incorporatedOn.year).to.eql(2000);",
											"    pm.expect(jsonData.incorporatedOn.month).to.eql(5);",
											"    pm.expect(jsonData.incorporatedOn.day).to.eql(25);",
											"    pm.expect(jsonData.industry).to.eql(\"PR_MARKETING\");",
											"    pm.expect(jsonData.sourceOfFunds).to.eql(\"OTHER\");",
											"    pm.expect(jsonData.sourceOfFundsOther).to.eql(\"Other funds\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_usd}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_usd}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_usd}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Corporate Verification Code EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"emailAddress\": \"{{corp_name_eur}}@fakemail.com\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_eur}}/users/email/send_verification_code",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_eur}}",
										"users",
										"email",
										"send_verification_code"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Corporate Verification Code GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"emailAddress\": \"{{corp_name_gbp}}@fakemail.com\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_gbp}}/users/email/send_verification_code",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_gbp}}",
										"users",
										"email",
										"send_verification_code"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Corporate Verification Code USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"emailAddress\": \"{{corp_name_usd}}@fakemail.com\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_usd}}/users/email/send_verification_code",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_usd}}",
										"users",
										"email",
										"send_verification_code"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Corporate Root User Email EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"emailAddress\": \"{{corp_name_eur}}@fakemail.com\",\n  \"nonce\": \"{{nonce}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_eur}}/users/email/verify",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_eur}}",
										"users",
										"email",
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Corporate Root User Email GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"emailAddress\": \"{{corp_name_gbp}}@fakemail.com\",\n  \"nonce\": \"{{nonce}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_gbp}}/users/email/verify",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_gbp}}",
										"users",
										"email",
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Corporate Root User Email USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"verify_email_nonce\", \"1111\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"emailAddress\": \"{{corp_name_usd}}@fakemail.com\",\n  \"nonce\": \"{{nonce}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_usd}}/users/email/verify",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_usd}}",
										"users",
										"email",
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Corporate EUR After Email Verif",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.kyb.rootEmailVerified).to.eql(true);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_eur}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_eur}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Corporate GBP After Email Verif",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.kyb.rootEmailVerified).to.eql(true);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_gbp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_gbp}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_gbp}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Corporate USD After Email Verif",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.kyb.rootEmailVerified).to.eql(true);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_usd}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_usd}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_usd}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Corporate Mobile Verification EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "X-TOKEN {{corp_token_eur}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"mobileNumber\": \"{{corp_mobile_eur}}\",\n  \"mobileCountryCode\": \"+356\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_eur}}/users/mobile/send_verification_code",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_eur}}",
										"users",
										"mobile",
										"send_verification_code"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Corporate Mobile Verification GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_gbp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"mobileNumber\": \"{{corp_mobile_gbp}}\",\n  \"mobileCountryCode\": \"+356\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_gbp}}/users/mobile/send_verification_code",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_gbp}}",
										"users",
										"mobile",
										"send_verification_code"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Corporate Mobile Verification USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_usd}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"mobileNumber\": \"{{corp_mobile_usd}}\",\n  \"mobileCountryCode\": \"+356\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_usd}}/users/mobile/send_verification_code",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_usd}}",
										"users",
										"mobile",
										"send_verification_code"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Corporate Mobile EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"mobileNumber\": \"{{corp_mobile_eur}}\",\n  \"mobileCountryCode\": \"+356\",\n  \"nonce\": \"{{nonce}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_eur}}/users/mobile/verify",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_eur}}",
										"users",
										"mobile",
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Corporate Mobile GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_gbp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"mobileNumber\": \"{{corp_mobile_gbp}}\",\n  \"mobileCountryCode\": \"+356\",\n  \"nonce\": \"{{nonce}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_gbp}}/users/mobile/verify",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_gbp}}",
										"users",
										"mobile",
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Corporate Mobile USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_usd}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"mobileNumber\": \"{{corp_mobile_usd}}\",\n  \"mobileCountryCode\": \"+356\",\n  \"nonce\": \"{{nonce}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_usd}}/users/mobile/verify",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_usd}}",
										"users",
										"mobile",
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Corporate EUR After Mobile Verif",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.kyb.rootMobileVerified).to.eql(true);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_eur}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_eur}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Corporate GBP After Mobile Verif",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.kyb.rootMobileVerified).to.eql(true);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_gbp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_gbp}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_gbp}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Corporate USD After Mobile Verif",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.kyb.rootMobileVerified).to.eql(true);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_usd}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_usd}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_usd}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Corporate KYB Approval EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{test-server-url}}/api/corporates/{{corporate_id_eur}}/verify",
									"host": [
										"{{test-server-url}}"
									],
									"path": [
										"api",
										"corporates",
										"{{corporate_id_eur}}",
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Corporate KYB Approval GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{test-server-url}}/api/corporates/{{corporate_id_gbp}}/verify",
									"host": [
										"{{test-server-url}}"
									],
									"path": [
										"api",
										"corporates",
										"{{corporate_id_gbp}}",
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Corporate KYB Approval USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{test-server-url}}/api/corporates/{{corporate_id_usd}}/verify",
									"host": [
										"{{test-server-url}}"
									],
									"path": [
										"api",
										"corporates",
										"{{corporate_id_usd}}",
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Corporate EUR After KYB Full Approval",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.kyb.basicCompanyChecksVerified).to.eql(\"APPROVED\");",
											"    pm.expect(jsonData.kyb.fullCompanyChecksVerified).to.eql(\"APPROVED\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_eur}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_eur}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Corporate GBP After KYB Full Approval",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.kyb.basicCompanyChecksVerified).to.eql(\"APPROVED\");",
											"    pm.expect(jsonData.kyb.fullCompanyChecksVerified).to.eql(\"APPROVED\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_gbp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_gbp}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_gbp}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Corporate USD After KYB Full Approval",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.kyb.basicCompanyChecksVerified).to.eql(\"APPROVED\");",
											"    pm.expect(jsonData.kyb.fullCompanyChecksVerified).to.eql(\"APPROVED\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_usd}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_usd}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_usd}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Corporate EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_profile_id\"));",
											"    //pm.expect(jsonData.name).to.eql(pm.environment.get(\"corp_name_updated\"));",
											"    //pm.expect(jsonData.companyType).to.eql(\"SOLE_TRADER\");",
											"    pm.expect(jsonData.active).to.eql(true);",
											"    //pm.expect(jsonData.companyRegistrationNumber).to.eql(\"C56\");",
											"    //pm.expect(jsonData.registrationCountry).to.eql(\"MT\");",
											"    pm.expect(jsonData.acceptedTerms).to.eql(true);",
											"    pm.expect(jsonData.baseCurrency).to.eql(\"GBP\");",
											"    //pm.expect(jsonData.incorporatedOn.year).to.eql(1989);",
											"    //pm.expect(jsonData.incorporatedOn.month).to.eql(4);",
											"    //pm.expect(jsonData.incorporatedOn.day).to.eql(24);",
											"    pm.expect(jsonData.registrationAddress.addressLine1).to.eql(\"regAddr1\");",
											"    pm.expect(jsonData.registrationAddress.addressLine2).to.eql(\"regAddr2\");",
											"    pm.expect(jsonData.registrationAddress.city).to.eql(\"regCity\");",
											"    pm.expect(jsonData.registrationAddress.country).to.eql(\"MT\");",
											"    pm.expect(jsonData.registrationAddress.postCode).to.eql(\"regMT123\");",
											"    pm.expect(jsonData.registrationAddress.state).to.eql(\"Rabat\");",
											"    pm.expect(jsonData.businessAddress.addressLine1).to.eql(\"bus_addr1_updated\");",
											"    pm.expect(jsonData.businessAddress.addressLine2).to.eql(\"bus_addr2_updated\");",
											"    pm.expect(jsonData.businessAddress.city).to.eql(\"bus_city_updated\");",
											"    pm.expect(jsonData.businessAddress.country).to.eql(\"IT\");",
											"    pm.expect(jsonData.businessAddress.postCode).to.eql(\"buspc\");",
											"    pm.expect(jsonData.businessAddress.state).to.eql(\"bus_state_updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"corp_name_updated\", \"corp\" + _.random(11111111, 999999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tag\": \"updated_tag\",\n  \"industry\": \"ACCOUNTING\",\n  \"sourceOfFunds\": \"LABOUR_CONTRACT\",\n  \"businessAddress\": {\n    \"addressLine1\": \"bus_addr1_updated\",\n    \"addressLine2\": \"bus_addr2_updated\",\n    \"city\": \"bus_city_updated\",\n    \"country\": \"IT\",\n    \"postCode\": \"buspc\",\n    \"state\": \"bus_state_updated\"\n  },\n  \"baseCurrency\": \"GBP\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_eur}}/update",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_eur}}",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Corporate EUR After Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"     pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_profile_id\"));",
											"    //pm.expect(jsonData.name).to.eql(pm.environment.get(\"corp_name_updated\"));",
											"    //pm.expect(jsonData.companyType).to.eql(\"SOLE_TRADER\");",
											"    pm.expect(jsonData.active).to.eql(true);",
											"    //pm.expect(jsonData.companyRegistrationNumber).to.eql(\"C56\");",
											"    pm.expect(jsonData.registrationCountry).to.eql(\"MT\");",
											"    pm.expect(jsonData.acceptedTerms).to.eql(true);",
											"    pm.expect(jsonData.baseCurrency).to.eql(\"GBP\");",
											"    //pm.expect(jsonData.incorporatedOn.year).to.eql(1989);",
											"    //pm.expect(jsonData.incorporatedOn.month).to.eql(4);",
											"    //pm.expect(jsonData.incorporatedOn.day).to.eql(24);",
											"    pm.expect(jsonData.registrationAddress.addressLine1).to.eql(\"regAddr1\");",
											"    pm.expect(jsonData.registrationAddress.addressLine2).to.eql(\"regAddr2\");",
											"    pm.expect(jsonData.registrationAddress.city).to.eql(\"regCity\");",
											"    pm.expect(jsonData.registrationAddress.country).to.eql(\"MT\");",
											"    pm.expect(jsonData.registrationAddress.postCode).to.eql(\"regMT123\");",
											"    pm.expect(jsonData.registrationAddress.state).to.eql(\"Rabat\");",
											"    pm.expect(jsonData.businessAddress.addressLine1).to.eql(\"bus_addr1_updated\");",
											"    pm.expect(jsonData.businessAddress.addressLine2).to.eql(\"bus_addr2_updated\");",
											"    pm.expect(jsonData.businessAddress.city).to.eql(\"bus_city_updated\");",
											"    pm.expect(jsonData.businessAddress.country).to.eql(\"IT\");",
											"    pm.expect(jsonData.businessAddress.postCode).to.eql(\"buspc\");",
											"    pm.expect(jsonData.businessAddress.state).to.eql(\"bus_state_updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_eur}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_eur}}",
										"get"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "KYB",
					"item": [
						{
							"name": "Create corporate EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corporate_id_eur\", JSON.parse(responseBody).id.id);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_profile_id\"));",
											"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"corp_name_eur\"));",
											"    pm.expect(jsonData.companyType).to.eql(\"SOLE_TRADER\");",
											"    pm.expect(jsonData.active).to.eql(true);",
											"    pm.expect(jsonData.companyRegistrationNumber).to.eql(\"C8989\");",
											"    pm.expect(jsonData.companyRegistrationAddress).to.eql(\"regAddr1\");",
											"    pm.expect(jsonData.companyBusinessAddress).to.eql(\"busAddr1\");",
											"    pm.expect(jsonData.registrationCountry).to.eql(\"MT\");",
											"    pm.expect(jsonData.acceptedTerms).to.eql(true);",
											"    pm.expect(jsonData.kyb.rootEmailVerified).to.eql(false);",
											"    pm.expect(jsonData.kyb.rootMobileVerified).to.eql(false);",
											"    pm.expect(jsonData.kyb.basicCompanyChecksVerified).to.eql(\"NOT_STARTED\");",
											"    pm.expect(jsonData.kyb.fullCompanyChecksVerified).to.eql(\"NOT_STARTED\");",
											"    pm.expect(jsonData.kyb.allowedLimits[0].limit.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.kyb.allowedLimits[0].limit.amount).to.eql(\"0\");",
											"    pm.expect(jsonData.kyb.allowedLimits[1].limit.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.kyb.allowedLimits[1].limit.amount).to.eql(\"0\");",
											"    pm.expect(jsonData.kyb.remainingLimits[0].limit.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.kyb.remainingLimits[0].limit.amount).to.eql(\"0\");",
											"    pm.expect(jsonData.kyb.remainingLimits[1].limit.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.kyb.remainingLimits[1].limit.amount).to.eql(\"0\");",
											"    pm.expect(jsonData.baseCurrency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.incorporatedOn.year).to.eql(1985);",
											"    pm.expect(jsonData.incorporatedOn.month).to.eql(1);",
											"    pm.expect(jsonData.incorporatedOn.day).to.eql(15);",
											"    pm.expect(jsonData.industry).to.eql(\"ACCOUNTING\");",
											"    pm.expect(jsonData.registrationAddress.addressLine1).to.eql(\"regAddr1\");",
											"    pm.expect(jsonData.registrationAddress.addressLine2).to.eql(\"regAddr2\");",
											"    pm.expect(jsonData.registrationAddress.city).to.eql(\"regCity\");",
											"    pm.expect(jsonData.registrationAddress.country).to.eql(\"MT\");",
											"    pm.expect(jsonData.registrationAddress.postCode).to.eql(\"regMT123\");",
											"    pm.expect(jsonData.registrationAddress.state).to.eql(\"Rabat\");",
											"    pm.expect(jsonData.businessAddress.addressLine1).to.eql(\"busAddr1\");",
											"    pm.expect(jsonData.businessAddress.addressLine2).to.eql(\"busAddr2\");",
											"    pm.expect(jsonData.businessAddress.city).to.eql(\"busCity\");",
											"    pm.expect(jsonData.businessAddress.country).to.eql(\"MT\");",
											"    pm.expect(jsonData.businessAddress.postCode).to.eql(\"regMT123\");",
											"    pm.expect(jsonData.businessAddress.state).to.eql(\"Rabat\");",
											"});",
											"",
											"pm.environment.unset(\"corp_token\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"corp_name_eur\", \"corp\" + _.random(11111111, 999999999));",
											"// pm.environment.set(\"corp_name\", \"democorp2\");",
											"",
											"var registrationDate = new Date(\"2018-12-17\");",
											"pm.environment.set(\"reg_date\", registrationDate.getTime());",
											"pm.environment.set(\"corp_mobile_eur\",_.random(111111, 999999))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"profileId\": \"{{corporates_profile_id}}\",\n    \"companyName\": \"{{corp_name_eur}}\",\n    \"companyType\": \"SOLE_TRADER\",\n    \"supportEmail\": \"{{tenant_name}}.{{corp_name_eur}}@fakemail.com\",\n    \"active\": true,\n    \"rootUsername\": \"{{corp_name_eur}}\",\n    \"rootTitle\": \"Mr.\",\n    \"rootName\": \"root\",\n    \"rootSurname\": \"root\",\n    \"rootEmail\": \"{{corp_name_eur}}@fakemail.com\",\n    \"companyRegistrationNumber\": \"C8989\",\n    \"companyRegistrationAddress\": \"4 Triq A. De Saavedra, In-Naxxar, NXR 2232, Malta\",\n    \"companyBusinessAddress\": \"4 Triq A. De Saavedra, In-Naxxar, NXR 2232, Malta\",\n    \"registrationCountry\": \"MT\",\n    \"acceptedTerms\": true,\n    \"ipAddress\": \"111.222.333.444\",\n    \"rootCompanyPosition\": \"CEO\",\n    \"rootMobileCountryCode\": \"+356\",\n    \"rootMobileNumber\": \"{{corp_mobile_eur}}\",\n    \"baseCurrency\": \"EUR\",\n    \"incorporatedOn\": {\n\t    \"year\": 1985,\n\t    \"month\": 1,\n\t    \"day\": 15\n\t},\n\t\"industry\": \"ACCOUNTING\",\n\t\"sourceOfFunds\": \"LABOUR_CONTRACT\",\n    \"registrationAddress\": {\n        \"addressLine1\": \"regAddr1\",\n        \"addressLine2\": \"regAddr2\",\n        \"city\": \"regCity\",\n        \"country\": \"MT\",\n        \"postCode\": \"regMT123\",\n        \"state\": \"Rabat\"\n    },\n    \"businessAddress\": {\n        \"addressLine1\": \"busAddr1\",\n        \"addressLine2\": \"busAddr2\",\n        \"city\": \"busCity\",\n        \"country\": \"MT\",\n        \"postCode\": \"regMT123\",\n        \"state\": \"Rabat\"\n    }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create corporate password identity EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{corporates_profile_id}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/identities/{{corporate_id_eur}}/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"identities",
										"{{corporate_id_eur}}",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create corporate password EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Expected Credential\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.credentialType).to.eql(\"ROOT\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"credentialType\": \"ROOT\",\n  \"identityId\": \"{{corporate_id_eur}}\",\n  \"password\": {\n    \"value\": \"Pass1234\"\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/{{corporate_id_eur}}/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"{{corporate_id_eur}}",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login corporate Root User EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_token_eur\", JSON.parse(responseBody).token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Login Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.credential.type).to.eql(\"ROOT\");",
											"    pm.expect(jsonData.identity.type).to.eql(\"corporates\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"value": "{{secret_programme_key}}",
										"type": "text"
									},
									{
										"key": "call-ref",
										"value": "test",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"{{corp_name_eur}}\",\n  \"password\": \"Pass1234\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/login_with_password",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"login_with_password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Corporate EUR KYB Start",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"postman.setEnvironmentVariable(\"kyb_reference\", JSON.parse(responseBody).reference);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_eur}}/kyb/start",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_eur}}",
										"kyb",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Corporate EUR KYB Get Params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pm.test(\"Status code is 200\", function () {",
											"//     pm.response.to.have.status(200);",
											"// });",
											"",
											"// pm.test(\"Corporate Details Correct\", function () {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.verificationFlow).to.eql(\"corporate-kyb-flow\");",
											"//     pm.expect(jsonData.identityType).to.eql(\"corporates\");",
											"//     pm.expect(jsonData.kybProviderKey).to.eql(\"sumsub\");",
											"// });",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_eur}}/kyb/params/{{kyb_reference}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_eur}}",
										"kyb",
										"params",
										"{{kyb_reference}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login admin root",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"postman.setEnvironmentVariable(\"admin_token\", JSON.parse(responseBody).token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"admin@weavr.io\",\n  \"password\": {\n    \"value\": \"!Password123!10\"\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/admin/api/gateway/login",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"admin",
										"api",
										"gateway",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Impersonate tenant admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"postman.setEnvironmentVariable(\"tenant_admin_token\", JSON.parse(responseBody).token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tenantId\": \"{{tenant_id}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/admin/api/gateway/switch_tenant",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"admin",
										"api",
										"gateway",
										"switch_tenant"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update KYB Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(function() {",
											" console.log(\"Give time for subscriptions manager to register identity with providers\");",
											"}, 10000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{tenant_admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"rootEmailVerified\": true,\n  \"rootMobileVerified\": true,\n \"directorsVerified\": \"APPROVED\",\n \"UBOsVerified\": \"APPROVED\",\n \"basicCompanyChecksVerified\": \"APPROVED\",\n \"fullCompanyChecksVerified\": \"APPROVED\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/admin/api/corporates/{{corporate_id_eur}}/kyb/update",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"admin",
										"api",
										"corporates",
										"{{corporate_id_eur}}",
										"kyb",
										"update"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User Management",
					"item": [
						{
							"name": "Login corporate Root User EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_token_eur\", JSON.parse(responseBody).token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Login Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.credential.type).to.eql(\"ROOT\");",
											"    pm.expect(jsonData.identity.type).to.eql(\"corporates\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"value": "{{secret_programme_key}}",
										"type": "text"
									},
									{
										"key": "call-ref",
										"value": "test",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"{{corp_name_eur}}\",\n  \"password\": \"Pass1234\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/login_with_password",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"login_with_password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login corporate Root User GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_token_gbp\", JSON.parse(responseBody).token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Login Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.credential.type).to.eql(\"ROOT\");",
											"    pm.expect(jsonData.identity.type).to.eql(\"corporates\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"value": "{{secret_programme_key}}",
										"type": "text"
									},
									{
										"key": "call-ref",
										"value": "test",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"{{corp_name_gbp}}\",\n  \"password\": \"Pass1234\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/login_with_password",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"login_with_password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login corporate Root User USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_token_usd\", JSON.parse(responseBody).token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Login Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.credential.type).to.eql(\"ROOT\");",
											"    pm.expect(jsonData.identity.type).to.eql(\"corporates\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"value": "{{secret_programme_key}}",
										"type": "text"
									},
									{
										"key": "call-ref",
										"value": "test",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"{{corp_name_usd}}\",\n  \"password\": \"Pass1234\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/login_with_password",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"login_with_password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new user linked to corporate EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"new_corp_user_identity_id_eur\", JSON.parse(responseBody).corporateUser.id);",
											"postman.setEnvironmentVariable(\"new_corp_user_identity_id_eur_invite_id\", JSON.parse(responseBody).inviteId);",
											"postman.setEnvironmentVariable(\"original_user_email\", JSON.parse(responseBody).corporateUser.email);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate User Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.corporateUser.type).to.eql(\"USER\");",
											"    pm.expect(jsonData.corporateUser.email).to.eql(pm.environment.get(\"new_corp_user_eur\")+\"@fakemail.com\");",
											"    pm.expect(jsonData.corporateUser.title).to.eql(\"Mr.\");",
											"    pm.expect(jsonData.corporateUser.name).to.eql(\"eurfirst\");",
											"    pm.expect(jsonData.corporateUser.surname).to.eql(\"eurlast\");",
											"    pm.expect(jsonData.corporateUser.companyPosition).to.eql(\"CETO\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let rand = Math.floor(Date.now() / 1000);",
											"pm.environment.set(\"new_corp_user_eur\", \"new_corp_user_eur\" + _.random(111111, 999999));",
											"pm.environment.set(\"new_corp_mobile_eur\", _.random(111111, 999999))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"USER\",\n  \"title\": \"Mr.\",\n  \"name\": \"eurfirst\",\n  \"surname\": \"eurlast\",\n  \"email\": \"{{new_corp_user_eur}}@fakemail.com\",\n  \"active\": true,\n  \"companyPosition\": \"CETO\",\n  \"mobileCountryCode\": \"+356\",\n  \"mobileNumber\": \"{{new_corp_mobile_eur}}\"\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_eur}}/users/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_eur}}",
										"users",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new user send invite EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_eur}}/users/{{new_corp_user_identity_id_eur}}/invites/send",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_eur}}",
										"users",
										"{{new_corp_user_identity_id_eur}}",
										"invites",
										"send"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new user linked to corporate EUR Mobile Not Unique",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Corporate User Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MOBILE_NOT_UNIQUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let rand = Math.floor(Date.now() / 1000);",
											"pm.environment.set(\"new_corp_user_eur_mobile\", \"new_corp_user_eur_mobile\" + rand);",
											"// pm.environment.set(\"new_corp_mobile_eur\", _.random(111111, 999999))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"USER\",\n  \"title\": \"Mr.\",\n  \"name\": \"eurfirst\",\n  \"surname\": \"eurlast\",\n  \"email\": \"{{new_corp_user_eur_mobile}}@fakemail.com\",\n  \"active\": true,\n  \"companyPosition\": \"CETO\",\n  \"mobileCountryCode\": \"+356\",\n  \"mobileNumber\": \"{{new_corp_mobile_eur}}\"\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_eur}}/users/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_eur}}",
										"users",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new user linked to corporate GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"new_corp_user_identity_id_gbp\", JSON.parse(responseBody).corporateUser.id);",
											"postman.setEnvironmentVariable(\"new_corp_user_identity_id_gbp_invite_id\", JSON.parse(responseBody).inviteId);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate User Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.corporateUser.type).to.eql(\"USER\");",
											"    pm.expect(jsonData.corporateUser.email).to.eql(pm.environment.get(\"new_corp_user_gbp\")+\"@fakemail.com\");",
											"    pm.expect(jsonData.corporateUser.title).to.eql(\"Mrs.\");",
											"    pm.expect(jsonData.corporateUser.name).to.eql(\"gbpfirst\");",
											"    pm.expect(jsonData.corporateUser.surname).to.eql(\"gbplast\");",
											"    pm.expect(jsonData.corporateUser.companyPosition).to.eql(\"CGTO\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let rand = Math.floor(Date.now() / 1000);",
											"pm.environment.set(\"new_corp_user_gbp\", \"new_corp_user_gbp\" + rand);",
											"pm.environment.set(\"new_corp_mobile_gbp\",_.random(111111, 999999))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_gbp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"USER\",\n  \"username\": \"{{new_corp_user_gbp}}\",\n  \"title\": \"Mrs.\",\n  \"name\": \"gbpfirst\",\n  \"surname\": \"gbplast\",\n  \"email\": \"{{new_corp_user_gbp}}@fakemail.com\",\n  \"active\": true,\n  \"companyPosition\": \"CGTO\",\n  \"mobileCountryCode\": \"+356\",\n  \"mobileNumber\": \"{{new_corp_mobile_gbp}}\"\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_gbp}}/users/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_gbp}}",
										"users",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new user send invite GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_gbp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"USER\",\n  \"username\": \"{{new_corp_user_gbp}}\",\n  \"title\": \"Mrs.\",\n  \"name\": \"gbpfirst\",\n  \"surname\": \"gbplast\",\n  \"email\": \"{{new_corp_user_gbp}}@fakemail.com\",\n  \"active\": true,\n  \"companyPosition\": \"CGTO\",\n  \"mobileCountryCode\": \"+356\",\n  \"mobileNumber\": \"{{new_corp_mobile_gbp}}\"\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_gbp}}/invites/{{new_corp_user_identity_id_gbp_invite_id}}/send",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_gbp}}",
										"invites",
										"{{new_corp_user_identity_id_gbp_invite_id}}",
										"send"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new user linked to corporate USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"new_corp_user_identity_id_usd\", JSON.parse(responseBody).corporateUser.id);",
											"postman.setEnvironmentVariable(\"new_corp_user_identity_id_usd_invite_id\", JSON.parse(responseBody).inviteId);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate User Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.corporateUser.type).to.eql(\"USER\");",
											"    pm.expect(jsonData.corporateUser.email).to.eql(pm.environment.get(\"new_corp_user_usd\")+\"@fakemail.com\");",
											"    pm.expect(jsonData.corporateUser.title).to.eql(\"Dr.\");",
											"    pm.expect(jsonData.corporateUser.name).to.eql(\"usdfirst\");",
											"    pm.expect(jsonData.corporateUser.surname).to.eql(\"usdlast\");",
											"    pm.expect(jsonData.corporateUser.companyPosition).to.eql(\"CUTO\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let rand = Math.floor(Date.now() / 1000);",
											"pm.environment.set(\"new_corp_user_usd\", \"new_corp_user_usd\" + rand);",
											"pm.environment.set(\"new_corp_mobile_usd\",_.random(111111, 999999))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_usd}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"USER\",\n  \"title\": \"Dr.\",\n  \"name\": \"usdfirst\",\n  \"surname\": \"usdlast\",\n  \"email\": \"{{new_corp_user_usd}}@fakemail.com\",\n  \"active\": true,\n  \"companyPosition\": \"CUTO\",\n  \"mobileCountryCode\": \"+356\",\n  \"mobileNumber\": \"{{new_corp_mobile_usd}}\"\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_usd}}/users/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_usd}}",
										"users",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new user send invite USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_usd}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_usd}}/invites/{{new_corp_user_identity_id_usd_invite_id}}/send",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_usd}}",
										"invites",
										"{{new_corp_user_identity_id_usd_invite_id}}",
										"send"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Corporate Users EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"User Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.user[0].type).to.eql(\"USER\");",
											"    pm.expect(jsonData.user[0].email).to.eql(pm.environment.get(\"new_corp_user_eur\")+\"@fakemail.com\");",
											"    pm.expect(jsonData.user[0].title).to.eql(\"Mr.\");",
											"    pm.expect(jsonData.user[0].name).to.eql(\"eurfirst\");",
											"    pm.expect(jsonData.user[0].surname).to.eql(\"eurlast\");",
											"    pm.expect(jsonData.user[0].companyPosition).to.eql(\"CETO\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"offset\": 0,\n    \"limit\": 0\n  },\n  \"email\": \"{{new_corp_user_eur}}@fakemail.com\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_eur}}/users/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_eur}}",
										"users",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Corporate Users GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"User Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.user[0].type).to.eql(\"USER\");",
											"    pm.expect(jsonData.user[0].username).to.eql(pm.environment.get(\"new_corp_user_gbp\"));",
											"    pm.expect(jsonData.user[0].title).to.eql(\"Mrs.\");",
											"    pm.expect(jsonData.user[0].name).to.eql(\"gbpfirst\");",
											"    pm.expect(jsonData.user[0].surname).to.eql(\"gbplast\");",
											"    pm.expect(jsonData.user[0].companyPosition).to.eql(\"CGTO\");",
											"   ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_gbp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"offset\": 0,\n    \"limit\": 0\n  },\n  \"email\": \"{{new_corp_user_gbp}}@fakemail.com\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_gbp}}/users/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_gbp}}",
										"users",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Corporate Users USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"User Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.user[0].type).to.eql(\"USER\");",
											"    pm.expect(jsonData.user[0].email).to.eql(pm.environment.get(\"new_corp_user_usd\")+\"@fakemail.com\");",
											"    pm.expect(jsonData.user[0].title).to.eql(\"Dr.\");",
											"    pm.expect(jsonData.user[0].name).to.eql(\"usdfirst\");",
											"    pm.expect(jsonData.user[0].surname).to.eql(\"usdlast\");",
											"    pm.expect(jsonData.user[0].companyPosition).to.eql(\"CUTO\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_usd}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"offset\": 0,\n    \"limit\": 0\n  },\n  \"email\": \"{{new_corp_user_usd}}@fakemail.com\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_usd}}/users/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_usd}}",
										"users",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate New Corporate User Invite EUR Correct",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nonce\": \"{{nonce}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_eur}}/invites/{{new_corp_user_identity_id_eur_invite_id}}/validate",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_eur}}",
										"invites",
										"{{new_corp_user_identity_id_eur_invite_id}}",
										"validate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate New Corporate User Invite GBP Correct",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nonce\": \"{{nonce}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_gbp}}/invites/{{new_corp_user_identity_id_gbp_invite_id}}/validate",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_gbp}}",
										"invites",
										"{{new_corp_user_identity_id_gbp_invite_id}}",
										"validate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate New Corporate User Invite USD Correct",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nonce\": \"{{nonce}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_usd}}/invites/{{new_corp_user_identity_id_usd_invite_id}}/validate",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_usd}}",
										"invites",
										"{{new_corp_user_identity_id_usd_invite_id}}",
										"validate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate New Corporate User Invite EUR Invalid Nonce",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Error Code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_NONCE_OR_EMAIL\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nonce\": \"1112\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_eur}}/invites/{{new_corp_user_identity_id_eur_invite_id}}/validate",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_eur}}",
										"invites",
										"{{new_corp_user_identity_id_eur_invite_id}}",
										"validate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate New Corporate User Invite GBP Invalid Nonce",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Error Code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_NONCE_OR_EMAIL\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nonce\": \"1112\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_gbp}}/invites/{{new_corp_user_identity_id_gbp_invite_id}}/validate",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_gbp}}",
										"invites",
										"{{new_corp_user_identity_id_gbp_invite_id}}",
										"validate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate New Corporate User Invite USD Invalid Nonce",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Error Code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_NONCE_OR_EMAIL\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nonce\": \"1112\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_usd}}/invites/{{new_corp_user_identity_id_usd_invite_id}}/validate",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_usd}}",
										"invites",
										"{{new_corp_user_identity_id_usd_invite_id}}",
										"validate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consume New Corporate User Invite EUR Incorrect",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Error Code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_NONCE_OR_EMAIL\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"identityId\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_eur}}\n  },\n  \"userId\": {{new_corp_user_identity_id_eur}},\n  \"nonce\": \"{{nonce}}1\",\n  \"password\": {\n    \"value\": \"Pass1234\"\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/invites/{{new_corp_user_identity_id_eur_invite_id}}/consume",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"invites",
										"{{new_corp_user_identity_id_eur_invite_id}}",
										"consume"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consume New Corporate User Invite GBP Incorrect",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Error Code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_NONCE_OR_EMAIL\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"identityId\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_gbp}}\n  },\n  \"userId\": {{new_corp_user_identity_id_gbp}},\n  \"nonce\": \"{{nonce}}1\",\n  \"password\": {\n    \"value\": \"Pass1234\"\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/invites/{{new_corp_user_identity_id_gbp_invite_id}}/consume",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"invites",
										"{{new_corp_user_identity_id_gbp_invite_id}}",
										"consume"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consume New Corporate User Invite USD Incorrect",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Error Code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_NONCE_OR_EMAIL\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"identityId\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_usd}}\n  },\n  \"userId\": {{new_corp_user_identity_id_usd}},\n  \"nonce\": \"{{nonce}}1\",\n  \"password\": {\n    \"value\": \"Pass1234\"\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/invites/{{new_corp_user_identity_id_usd_invite_id}}/consume",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"invites",
										"{{new_corp_user_identity_id_usd_invite_id}}",
										"consume"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consume New Corporate User Invite EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"identityId\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_eur}}\n  },\n  \"userId\": {{new_corp_user_identity_id_eur}},\n  \"nonce\": \"{{nonce}}\",\n  \"password\": {\n    \"value\": \"Pass1234\"\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/invites/{{new_corp_user_identity_id_eur_invite_id}}/consume",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"invites",
										"{{new_corp_user_identity_id_eur_invite_id}}",
										"consume"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consume New Corporate User Invite GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"identityId\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_gbp}}\n  },\n  \"userId\": {{new_corp_user_identity_id_gbp}},\n  \"nonce\": \"{{nonce}}\",\n  \"password\": {\n    \"value\": \"Pass1234\"\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/invites/{{new_corp_user_identity_id_gbp_invite_id}}/consume",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"invites",
										"{{new_corp_user_identity_id_gbp_invite_id}}",
										"consume"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consume New Corporate User Invite USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"identityId\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_usd}}\n  },\n  \"userId\": {{new_corp_user_identity_id_usd}},\n  \"nonce\": \"{{nonce}}\",\n  \"password\": {\n    \"value\": \"Pass1234\"\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/invites/{{new_corp_user_identity_id_usd_invite_id}}/consume",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"invites",
										"{{new_corp_user_identity_id_usd_invite_id}}",
										"consume"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login New Corporate User EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"new_corp_user_token_eur\", JSON.parse(responseBody).token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"{{new_corp_user_eur}}@fakemail.com\",\n  \"password\": \"Pass1234\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/login_with_password",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"login_with_password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Corporate User EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"new_corp_user_token_eur\", JSON.parse(responseBody).token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{new_corp_user_token_eur}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"{{new_corp_user_eur}}@fakemail.com\",\n  \"password\": \"Pass1234\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_eur}}/users/{{new_corp_user_identity_id_eur}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_eur}}",
										"users",
										"{{new_corp_user_identity_id_eur}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login New Corporate User GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"new_corp_user_token_gbp\", JSON.parse(responseBody).token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"{{new_corp_user_gbp}}\",\n  \"password\": \"Pass1234\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/login_with_password",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"login_with_password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login New Corporate User USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"new_corp_user_token_usd\", JSON.parse(responseBody).token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"{{new_corp_user_usd}}@fakemail.com\",\n  \"password\": \"Pass1234\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/login_with_password",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"login_with_password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Corporate Lost Password Start New User EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{new_corp_user_eur}}@fakemail.com\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/lost_password/start",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"lost_password",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Corporate Lost Password Validate New User EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{new_corp_user_eur}}@fakemail.com\",\n  \"nonce\": \"{{nonce}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/lost_password/validate",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"lost_password",
										"validate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Corporate Lost Password Validate Incorrect Nonce",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Error Code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_NONCE_OR_EMAIL\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{corp_name}}@fakemail.com\",\n  \"nonce\": \"{{nonce}}1\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/lost_password/validate",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"lost_password",
										"validate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Corporate Lost Password Validate Incorrect  Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Error Code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_NONCE_OR_EMAIL\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{corp_name}}1@fakemail.com\",\n  \"nonce\": \"{{nonce}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/lost_password/validate",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"lost_password",
										"validate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Corporate Lost Password Resume New User EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{new_corp_user_eur}}@fakemail.com\",\n  \"nonce\": \"{{nonce}}\",\n  \"password\": {\n    \"value\": \"Pass1235!\"\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/lost_password/resume",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"lost_password",
										"resume"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login New Corporate User EUR After Password Reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"new_corp_user_token_eur\", JSON.parse(responseBody).token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"{{new_corp_user_eur}}@fakemail.com\",\n  \"password\": \"Pass1235!\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/login_with_password",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"login_with_password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Corporate Lost Password Start Root User USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{corp_name_usd}}@fakemail.com\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/lost_password/start",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"lost_password",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Corporate Lost Password Validate Root User USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{corp_name_usd}}@fakemail.com\",\n  \"nonce\": \"{{nonce}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/lost_password/validate",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"lost_password",
										"validate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Corporate Lost Password Resume Root User USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{corp_name_usd}}@fakemail.com\",\n  \"nonce\": \"{{nonce}}\",\n  \"password\": {\n    \"value\": \"Pass1235!\"\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/lost_password/resume",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"lost_password",
										"resume"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login corporate Root User USD AFter Lost Pwd",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_token_usd\", JSON.parse(responseBody).token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Login Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.credential.type).to.eql(\"ROOT\");",
											"    pm.expect(jsonData.identity.type).to.eql(\"corporates\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "call-ref",
										"type": "text",
										"value": "test",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"{{corp_name_usd}}\",\n  \"password\": \"Pass1235!\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/login_with_password",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"login_with_password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Corporate Change Password Root User USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Authorization",
										"value": "X-TOKEN {{corp_token_usd}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": {\n    \"value\": \"Pass1234\"\n  },\n  \"oldPassword\": {\n    \"value\": \"Pass1235!\"\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/{{corporate_id_usd}}/update",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"{{corporate_id_usd}}",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login corporate Root User USD AFter Change Pwd",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_token_usd\", JSON.parse(responseBody).token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Login Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.credential.type).to.eql(\"ROOT\");",
											"    pm.expect(jsonData.identity.type).to.eql(\"corporates\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "call-ref",
										"type": "text",
										"value": "test",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"{{corp_name_usd}}\",\n  \"password\": \"Pass1234\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/login_with_password",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"login_with_password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deactivate EUR New User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_eur}}/users/{{new_corp_user_identity_id_eur}}/deactivate",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_eur}}",
										"users",
										"{{new_corp_user_identity_id_eur}}",
										"deactivate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login New Corporate User EUR After Deactivate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Failed Login Check\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"FAILED_LOGIN\");",
											"});",
											"",
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"{{new_corp_user_eur}}@fakemail.com\",\n  \"password\": \"Pass1235!\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/login_with_password",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"login_with_password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate EUR New User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_eur}}/users/{{new_corp_user_identity_id_eur}}/activate",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_eur}}",
										"users",
										"{{new_corp_user_identity_id_eur}}",
										"activate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login New Corporate User EUR After Activate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"new_corp_user_token_eur\", JSON.parse(responseBody).token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"{{new_corp_user_eur}}@fakemail.com\",\n  \"password\": \"Pass1235!\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/login_with_password",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"login_with_password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update New Corporate User EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate User Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.type).to.eql(\"USER\");",
											"    pm.expect(jsonData.email).to.eql(pm.environment.get(\"new_corp_user_eur\")+\"@fakemail.com\");",
											"    pm.expect(jsonData.mobileNumber).to.eql(JSON.stringify(pm.environment.get(\"new_corp_mobile_eur\")));",
											"    pm.expect(jsonData.title).to.eql(\"Ms.\");",
											"    pm.expect(jsonData.active).to.eql(true);",
											"    pm.expect(jsonData.name).to.eql(\"eurfirstupdated\");",
											"    pm.expect(jsonData.surname).to.eql(\"eurlastupdated\");",
											"    pm.expect(jsonData.companyPosition).to.eql(\"CFTO\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let rand = Math.floor(Date.now() / 1000);",
											"pm.environment.set(\"new_corp_user_eur\", \"new_corp_user_eur\" + rand);",
											"pm.environment.set(\"new_corp_mobile_eur\", _.random(111111, 999999))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{new_corp_user_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Ms.\",\n  \"name\": \"eurfirstupdated\",\n  \"surname\": \"eurlastupdated\",\n  \"email\": \"{{new_corp_user_eur}}@fakemail.com\",\n  \"companyPosition\": \"CFTO\",\n  \"mobileCountryCode\": \"+356\",\n  \"mobileNumber\": \"{{new_corp_mobile_eur}}\"\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/corporates/{{corporate_id_eur}}/users/{{new_corp_user_identity_id_eur}}/update",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"corporates",
										"{{corporate_id_eur}}",
										"users",
										"{{new_corp_user_identity_id_eur}}",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login New Corporate User EUR After Udpate Old Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"FAILED_LOGIN\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"{{original_user_email}}\",\n  \"password\": \"Pass1235!\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/login_with_password",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"login_with_password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login New Corporate User EUR After Update New Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"new_corp_user_token_eur\", JSON.parse(responseBody).token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"{{new_corp_user_eur}}@fakemail.com\",\n  \"password\": \"Pass1235!\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/login_with_password",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"login_with_password"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "MA MC Management / Transfers",
					"item": [
						{
							"name": "Login corporate Root User EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_token_eur\", JSON.parse(responseBody).token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Login Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.credential.type).to.eql(\"ROOT\");",
											"    pm.expect(jsonData.identity.type).to.eql(\"corporates\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"value": "{{secret_programme_key}}",
										"type": "text"
									},
									{
										"key": "apikey",
										"value": "{{secret_programme_key}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"{{corp_name_eur}}\",\n  \"password\": \"Pass1234\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/login_with_password",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"login_with_password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create corporate EUR managed account EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_managed_account_id_eur\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_account_id_eur_iban\", JSON.parse(responseBody).bankAccountDetails.iban);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"eur_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Paynetics AD\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"PATCBGSF\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "X-TOKEN {{corp_token_eur}}",
										"type": "text"
									},
									{
										"key": "apikey",
										"value": "{{secret_programme_key}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{corporates_managed_accounts_profile_id}}\",\n  \"friendlyName\": \"eur_account\",\n  \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create corporate EUR managed account GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_managed_account_id_gbp\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_account_id_gbp_iban\", JSON.parse(responseBody).bankAccountDetails.iban);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_account_id_gbp_paymentreference\", JSON.parse(responseBody).bankAccountDetails.paymentReference);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"gbp_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"    pm.expect(jsonData.bankAccountDetails.accountNumber).to.eql(\"00010675\");",
											"    pm.expect(jsonData.bankAccountDetails.sortCode).to.eql(\"608382 (BANKING CIRCLE S.A.)\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{corporates_managed_accounts_profile_id}}\",\n  \"owner\": {\n    \"type\": \"corporates\",\n    \"id\": \"{{corporate_id_eur}}\"\n  },\n  \"friendlyName\": \"gbp_account\",\n  \"currency\": \"GBP\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create corporate EUR managed account USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_managed_account_id_usd\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_account_id_usd_iban\", JSON.parse(responseBody).bankAccountDetails.iban);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_account_id_usd_paymentreference\", JSON.parse(responseBody).bankAccountDetails.paymentReference);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"usd_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{corporates_managed_accounts_profile_id}}\",\n  \"owner\": {\n    \"type\": \"corporates\",\n    \"id\": \"{{corporate_id_eur}}\"\n  },\n  \"friendlyName\": \"usd_account\",\n  \"currency\": \"USD\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.environment.get(\"server-url\") == 'api.build.weavr.io') {",
											"    pm.test(\"Response time is less than 200ms\", function () {",
											"        pm.expect(pm.response.responseTime).to.be.below(200);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 10\n  },\n  \"owner\": {\n    \"type\": \"corporates\",\n    \"id\": \"{{corporate_id_eur}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Cards EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.environment.get(\"server-url\") == 'api.build.weavr.io') {",
											"    pm.test(\"Response time is less than 200ms\", function () {",
											"        pm.expect(pm.response.responseTime).to.be.below(200);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 10\n  },\n  \"owner\": {\n    \"type\": \"corporates\",\n    \"id\": \"{{corporate_id_eur}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account By ID EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"eur_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Paynetics AD\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"PATCBGSF\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_eur}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_eur}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account By ID GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"gbp_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_gbp}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_gbp}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account By ID USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"usd_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_usd}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_usd}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Managed Account Deposit EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Code Completed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"COMPLETED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"iban\": \"{{corp_managed_account_id_eur_iban}}\",\n  \"depositAmount\": \n    {\n      \"currency\": \"EUR\",\n      \"amount\": {{deposit_amount}}\n    }\n}"
								},
								"url": {
									"raw": "{{test-server-url}}/api/accounts/deposit",
									"host": [
										"{{test-server-url}}"
									],
									"path": [
										"api",
										"accounts",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Managed Account Deposit GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Code Completed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"COMPLETED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"iban\": \"{{corp_managed_account_id_gbp_iban}}\",\n  \"paymentReference\": \"{{corp_managed_account_id_gbp_paymentreference}}\",\n  \"depositAmount\": \n    {\n      \"currency\": \"GBP\",\n      \"amount\": {{deposit_amount}}\n    }\n  \n}"
								},
								"url": {
									"raw": "{{test-server-url}}/api/accounts/deposit",
									"host": [
										"{{test-server-url}}"
									],
									"path": [
										"api",
										"accounts",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Managed Account Deposit USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Code Completed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"COMPLETED\");",
											"});",
											"",
											"setTimeout(function(){}, 120000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"iban\": \"{{corp_managed_account_id_usd_iban}}\",\n  \"paymentReference\": \"{{corp_managed_account_id_usd_paymentreference}}\",\n  \"depositAmount\": \n    {\n      \"currency\": \"USD\",\n      \"amount\": {{deposit_amount}}\n    }\n  \n}"
								},
								"url": {
									"raw": "{{test-server-url}}/api/accounts/deposit",
									"host": [
										"{{test-server-url}}"
									],
									"path": [
										"api",
										"accounts",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account By ID EUR After Deposit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"eur_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Paynetics AD\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"PATCBGSF\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_eur}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_eur}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account By ID GBP After Deposit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"gbp_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_gbp}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_gbp}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account By ID USD After Deposit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"usd_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_usd}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_usd}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account Statement EUR After Deposit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Deposit Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"DEPOSIT\");",
											"    ",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
											"    ",
											"    pm.expect(jsonData.entry[0].balanceAfter.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
											"    ",
											"    pm.expect(jsonData.entry[0].cardholderFee.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[0].cardholderFee.amount).to.eql(pm.environment.get(\"deposit_fee_eur\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_eur}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_eur}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account Statement GBP After Deposit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Deposit Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"DEPOSIT\");",
											"    ",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")));",
											"    ",
											"    pm.expect(jsonData.entry[0].balanceAfter.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")));",
											"    ",
											"    pm.expect(jsonData.entry[0].cardholderFee.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[0].cardholderFee.amount).to.eql(pm.environment.get(\"deposit_fee_gbp\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_gbp}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_gbp}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account Statement USD After Deposit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Deposit Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"DEPOSIT\");",
											"    ",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")));",
											"    ",
											"    pm.expect(jsonData.entry[0].balanceAfter.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")));",
											"    ",
											"    pm.expect(jsonData.entry[0].cardholderFee.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[0].cardholderFee.amount).to.eql(pm.environment.get(\"deposit_fee_usd\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_usd}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_usd}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Managed Account EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_managed_eur\");",
											"    pm.expect(jsonData.tag).to.eql(\"eur_string\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Paynetics AD\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"PATCBGSF\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tag\": \"eur_string\",\n  \"friendlyName\": \"updated_managed_eur\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_eur}}/update",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_eur}}",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Managed Account GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_managed_gbp\");",
											"     pm.expect(jsonData.tag).to.eql(\"gbp_string\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tag\": \"gbp_string\",\n  \"friendlyName\": \"updated_managed_gbp\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_gbp}}/update",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_gbp}}",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Managed Account USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_managed_usd\");",
											"    pm.expect(jsonData.tag).to.eql(\"usd_string\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tag\": \"usd_string\",\n  \"friendlyName\": \"updated_managed_usd\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_usd}}/update",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_usd}}",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Corporate EUR Managed Card EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_managed_card_id_eur\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_card_id_eur_cardNumber\", JSON.parse(responseBody).cardNumber);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_card_id_eur_cvv\", JSON.parse(responseBody).cvv);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_card_id_eur_expiryMmyy\", JSON.parse(responseBody).expiryMmyy);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{corporate_managed_cards_profile_id}},\n  \"friendlyName\": \"EUR_MANAGED_CARD\",\n  \"currency\": \"EUR\",\n  \"nameOnCard\": \"euro card\",\n  \"cardholderMobileNumber\": \"+35699123123\",\n  \"billingAddress\": {\n    \"addressLine1\": \"string1\",\n    \"addressLine2\": \"string2\",\n    \"city\": \"city\",\n    \"country\": \"MT\",\n    \"postCode\": \"PST\",\n    \"state\": \"US\"\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Corporate EUR Managed Card EUR AuthControl Set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blockedMerchantCategories\": [\n    \"7995\"\n  ],\n  \"blockedMerchantIds\": [\n    \"mcGame3\"\n  ],\n  \"allowAtm\": \"FALSE\",\n  \"allowCashback\": \"TRUE\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/auth_rule/set",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"auth_rule",
										"set"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Corporate EUR Managed Card GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_managed_card_id_gbp\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_card_id_gbp_cardNumber\", JSON.parse(responseBody).cardNumber);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_card_id_gbp_cvv\", JSON.parse(responseBody).cvv);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_card_id_gbp_expiryMmyy\", JSON.parse(responseBody).expiryMmyy);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"gbp card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"GBP_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123124\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{corporate_managed_cards_profile_id}},\n  \"owner\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_eur}}\n   },\n  \"friendlyName\": \"GBP_MANAGED_CARD\",\n  \"currency\": \"GBP\",\n  \"nameOnCard\": \"gbp card\",\n  \"cardholderMobileNumber\": \"+35699123124\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Corporate EUR Managed Card USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_managed_card_id_usd\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_card_id_usd_cardNumber\", JSON.parse(responseBody).cardNumber);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_card_id_usd_cvv\", JSON.parse(responseBody).cvv);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_card_id_usd_expiryMmyy\", JSON.parse(responseBody).expiryMmyy);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"usd card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"USD_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123125\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{corporate_managed_cards_profile_id}},\n  \"owner\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_eur}}\n   },\n  \"friendlyName\": \"USD_MANAGED_CARD\",\n  \"currency\": \"USD\",\n  \"nameOnCard\": \"usd card\",\n  \"cardholderMobileNumber\": \"+35699123125\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Card By ID EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{corporate_managed_cards_profile_id}},\n  \"ownerId\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_eur}}\n   }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Card By ID GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"gbp card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"GBP_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123124\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{corporate_managed_cards_profile_id}},\n  \"ownerId\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_eur}}\n   }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_gbp}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_gbp}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Card By ID USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"usd card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"USD_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123125\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{corporate_managed_cards_profile_id}},\n  \"ownerId\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_eur}}\n   }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_usd}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_usd}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Managed Card EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_eur_name\");",
											"    pm.expect(jsonData.tag).to.eql(\"updated_eur_tag\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912341\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tag\": \"updated_eur_tag\",\n  \"friendlyName\": \"updated_eur_name\",\n  \"cardholderMobileNumber\": \"+35678912341\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/update",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Managed Card GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"gbp card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_gbp_name\");",
											"    pm.expect(jsonData.tag).to.eql(\"updated_gbp_tag\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912342\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tag\": \"updated_gbp_tag\",\n  \"friendlyName\": \"updated_gbp_name\",\n  \"cardholderMobileNumber\": \"+35678912342\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_gbp}}/update",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_gbp}}",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Managed Card USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"usd card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_usd_name\");",
											"    pm.expect(jsonData.tag).to.eql(\"updated_usd_tag\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912343\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tag\": \"updated_usd_tag\",\n  \"friendlyName\": \"updated_usd_name\",\n  \"cardholderMobileNumber\": \"+35678912343\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_usd}}/update",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_usd}}",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MA To MC EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_transfer_ma_mc_id_eur\", JSON.parse(responseBody).id.id);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transfer Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"transfers\");",
											"    pm.expect(jsonData.source.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"corp_managed_account_id_eur\"));",
											"    pm.expect(jsonData.destination.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"corp_managed_card_id_eur\"));",
											"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.destinationAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
											"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{corp_managed_account_id_eur}}\n  },\n  \"destination\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{corp_managed_card_id_eur}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"EUR\",\n    \"amount\": {{transfer_send_amount}}\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Card By ID EUR After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_eur_name\");",
											"    pm.expect(jsonData.tag).to.eql(\"updated_eur_tag\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912341\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{corporate_managed_cards_profile_id}},\n  \"ownerId\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_eur}}\n   }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account By ID EUR After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_managed_eur\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-pm.environment.get(\"transfer_send_fee_eur\")-pm.environment.get(\"transfer_send_amount\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-pm.environment.get(\"transfer_send_fee_eur\")-pm.environment.get(\"transfer_send_amount\")));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Paynetics AD\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"PATCBGSF\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_eur}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_eur}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account Statement EUR After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Transfer Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(JSON.stringify(-pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_fee_eur\")));",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_fee_eur\")));",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentType).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentId).to.eql(pm.environment.get(\"corp_managed_card_id_eur\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentFriendlyName).to.eql(\"updated_eur_name\");",
											"    pm.expect(jsonData.entry[0].cardholderFee.amount).to.eql(pm.environment.get(\"transfer_send_fee_eur\"));",
											"    pm.expect(jsonData.entry[1].txId.type).to.eql(\"DEPOSIT\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
											"    pm.expect(jsonData.entry[1].balanceAfter.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[1].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
											"    pm.expect(jsonData.entry[1].cardholderFee.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[1].cardholderFee.amount).to.eql(pm.environment.get(\"deposit_fee_eur\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_eur}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_eur}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Card Statement EUR After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Transfer Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentType).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentId).to.eql(pm.environment.get(\"corp_managed_account_id_eur\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentFriendlyName).to.eql(\"updated_managed_eur\");",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MA To MC GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transfer Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"transfers\");",
											"    pm.expect(jsonData.source.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"corp_managed_account_id_gbp\"));",
											"    pm.expect(jsonData.destination.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"corp_managed_card_id_gbp\"));",
											"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.destinationAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
											"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{corp_managed_account_id_gbp}}\n  },\n  \"destination\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{corp_managed_card_id_gbp}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"GBP\",\n    \"amount\": {{transfer_send_amount}}\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Card By ID GBP After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"gbp card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_gbp_name\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912342\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{corporate_managed_cards_profile_id}},\n  \"ownerId\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_eur}}\n   }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_gbp}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_gbp}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account By ID GBP After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_managed_gbp\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")-pm.environment.get(\"transfer_send_fee_gbp\")-pm.environment.get(\"transfer_send_amount\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")-pm.environment.get(\"transfer_send_fee_gbp\")-pm.environment.get(\"transfer_send_amount\")));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_gbp}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_gbp}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account Statement GBP After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Transfer Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(JSON.stringify(-pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_fee_gbp\")));",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")-pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_fee_gbp\")));",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentType).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentId).to.eql(pm.environment.get(\"corp_managed_card_id_gbp\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentFriendlyName).to.eql(\"updated_gbp_name\");",
											"    pm.expect(jsonData.entry[0].cardholderFee.amount).to.eql(pm.environment.get(\"transfer_send_fee_gbp\"));",
											"    pm.expect(jsonData.entry[1].txId.type).to.eql(\"DEPOSIT\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")));",
											"    pm.expect(jsonData.entry[1].balanceAfter.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[1].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")));",
											"    pm.expect(jsonData.entry[1].cardholderFee.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[1].cardholderFee.amount).to.eql(pm.environment.get(\"deposit_fee_gbp\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_gbp}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_gbp}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Card Statement GBP After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Transfer Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentType).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentId).to.eql(pm.environment.get(\"corp_managed_account_id_gbp\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentFriendlyName).to.eql(\"updated_managed_gbp\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_gbp}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_gbp}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MA To MC USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transfer Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"transfers\");",
											"    pm.expect(jsonData.source.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"corp_managed_account_id_usd\"));",
											"    pm.expect(jsonData.destination.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"corp_managed_card_id_usd\"));",
											"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.destinationAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    ",
											"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
											"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{corp_managed_account_id_usd}}\n  },\n  \"destination\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{corp_managed_card_id_usd}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"USD\",\n    \"amount\": {{transfer_send_amount}}\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Card By ID USD After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"usd card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_usd_name\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912343\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{corporate_managed_cards_profile_id}},\n  \"ownerId\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_eur}}\n   }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_usd}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_usd}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account By ID USD After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_managed_usd\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")-pm.environment.get(\"transfer_send_fee_usd\")-pm.environment.get(\"transfer_send_amount\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")-pm.environment.get(\"transfer_send_fee_usd\")-pm.environment.get(\"transfer_send_amount\")));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_usd}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_usd}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account Statement USD After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Transfer Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(JSON.stringify(-pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_fee_usd\")));",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")-pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_fee_usd\")));",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentType).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentId).to.eql(pm.environment.get(\"corp_managed_card_id_usd\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentFriendlyName).to.eql(\"updated_usd_name\");",
											"    pm.expect(jsonData.entry[0].cardholderFee.amount).to.eql(pm.environment.get(\"transfer_send_fee_usd\"));",
											"    pm.expect(jsonData.entry[1].txId.type).to.eql(\"DEPOSIT\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")));",
											"    pm.expect(jsonData.entry[1].balanceAfter.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[1].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")));",
											"    pm.expect(jsonData.entry[1].cardholderFee.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[1].cardholderFee.amount).to.eql(pm.environment.get(\"deposit_fee_usd\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_usd}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_usd}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Card Statement USD After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Transfer Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentType).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentId).to.eql(pm.environment.get(\"corp_managed_account_id_usd\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentFriendlyName).to.eql(\"updated_managed_usd\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_usd}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_usd}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Sends",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transfer Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"transfers\");",
											"    pm.expect(jsonData.source.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"corp_managed_card_id_eur\"));",
											"    pm.expect(jsonData.destination.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"corp_managed_account_id_eur\"));",
											"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.destinationAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount_mc_to_ma\"));",
											"    ",
											"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
											"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{corp_managed_card_id_eur}}\n  },\n  \"destination\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{corp_managed_account_id_eur}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"EUR\",\n    \"amount\": \"{{transfer_send_amount_mc_to_ma}}\"\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Card By ID EUR After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_eur_name\");",
											"    pm.expect(jsonData.tag).to.eql(\"updated_eur_tag\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_eur\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_eur\")));",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912341\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{corporate_managed_cards_profile_id}},\n  \"ownerId\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_eur}}\n   }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account By ID EUR After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_managed_eur\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-pm.environment.get(\"transfer_send_fee_eur\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-pm.environment.get(\"transfer_send_fee_eur\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Paynetics AD\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"PATCBGSF\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_eur}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_eur}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account Statement EUR After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Transfer Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount_mc_to_ma\"));",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_fee_eur\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentType).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentId).to.eql(pm.environment.get(\"corp_managed_card_id_eur\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentFriendlyName).to.eql(\"updated_eur_name\");",
											"    ",
											"    pm.expect(jsonData.entry[1].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.amount).to.eql(JSON.stringify(-pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_fee_eur\")));",
											"    pm.expect(jsonData.entry[1].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_fee_eur\")));",
											"    pm.expect(jsonData.entry[1].additionalFields.destinationInstrumentType).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.entry[1].additionalFields.destinationInstrumentId).to.eql(pm.environment.get(\"corp_managed_card_id_eur\"));",
											"    pm.expect(jsonData.entry[1].additionalFields.destinationInstrumentFriendlyName).to.eql(\"updated_eur_name\");",
											"    pm.expect(jsonData.entry[1].cardholderFee.amount).to.eql(pm.environment.get(\"transfer_send_fee_eur\"));",
											"    ",
											"    pm.expect(jsonData.entry[2].txId.type).to.eql(\"DEPOSIT\");",
											"    pm.expect(jsonData.entry[2].transactionAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[2].transactionAmount.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
											"    pm.expect(jsonData.entry[2].balanceAfter.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[2].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
											"    pm.expect(jsonData.entry[2].cardholderFee.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[2].cardholderFee.amount).to.eql(pm.environment.get(\"deposit_fee_eur\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_eur}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_eur}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Card Statement EUR After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Transfer Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(JSON.stringify(-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_eur\")))",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_eur\")));",
											"    pm.expect(jsonData.entry[0].cardholderFee.amount).to.eql(pm.environment.get(\"transfer_send_fee_eur\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentType).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentId).to.eql(pm.environment.get(\"corp_managed_account_id_eur\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentFriendlyName).to.eql(\"updated_managed_eur\");",
											"    pm.expect(jsonData.entry[1].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.entry[1].balanceAfter.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.entry[1].additionalFields.sourceInstrumentType).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.entry[1].additionalFields.sourceInstrumentId).to.eql(pm.environment.get(\"corp_managed_account_id_eur\"));",
											"    pm.expect(jsonData.entry[1].additionalFields.sourceInstrumentFriendlyName).to.eql(\"updated_managed_eur\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MC To MA GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transfer Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"transfers\");",
											"    pm.expect(jsonData.source.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"corp_managed_card_id_gbp\"));",
											"    pm.expect(jsonData.destination.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"corp_managed_account_id_gbp\"));",
											"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.destinationAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount_mc_to_ma\"));",
											"    ",
											"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
											"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{corp_managed_card_id_gbp}}\n  },\n  \"destination\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{corp_managed_account_id_gbp}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"GBP\",\n    \"amount\": {{transfer_send_amount_mc_to_ma}}\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Card By ID GBP After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"gbp card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_gbp_name\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_gbp\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_gbp\")));",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912342\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_gbp}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_gbp}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account By ID GBP After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_managed_gbp\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")-pm.environment.get(\"transfer_send_fee_gbp\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")-pm.environment.get(\"transfer_send_fee_gbp\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_gbp}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_gbp}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account Statement GBP After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Transfer Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount_mc_to_ma\"));",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")-pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_fee_gbp\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentType).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentId).to.eql(pm.environment.get(\"corp_managed_card_id_gbp\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentFriendlyName).to.eql(\"updated_gbp_name\");",
											"    ",
											"    ",
											"    pm.expect(jsonData.entry[1].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.amount).to.eql(JSON.stringify(-pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_fee_gbp\")));",
											"    pm.expect(jsonData.entry[1].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")-pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_fee_gbp\")));",
											"    pm.expect(jsonData.entry[1].additionalFields.destinationInstrumentType).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.entry[1].additionalFields.destinationInstrumentId).to.eql(pm.environment.get(\"corp_managed_card_id_gbp\"));",
											"    pm.expect(jsonData.entry[1].additionalFields.destinationInstrumentFriendlyName).to.eql(\"updated_gbp_name\");",
											"    pm.expect(jsonData.entry[1].cardholderFee.amount).to.eql(pm.environment.get(\"transfer_send_fee_gbp\"));",
											"    ",
											"    pm.expect(jsonData.entry[2].txId.type).to.eql(\"DEPOSIT\");",
											"    pm.expect(jsonData.entry[2].transactionAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[2].transactionAmount.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")));",
											"    pm.expect(jsonData.entry[2].balanceAfter.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[2].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")));",
											"    pm.expect(jsonData.entry[2].cardholderFee.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[2].cardholderFee.amount).to.eql(pm.environment.get(\"deposit_fee_gbp\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_gbp}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_gbp}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Card Statement GBP After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Transfer Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(JSON.stringify(-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_gbp\")))",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_gbp\")));",
											"    pm.expect(jsonData.entry[0].cardholderFee.amount).to.eql(pm.environment.get(\"transfer_send_fee_gbp\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentType).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentId).to.eql(pm.environment.get(\"corp_managed_account_id_gbp\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentFriendlyName).to.eql(\"updated_managed_gbp\");",
											"    ",
											"    pm.expect(jsonData.entry[1].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.entry[1].balanceAfter.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.entry[1].additionalFields.sourceInstrumentType).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.entry[1].additionalFields.sourceInstrumentId).to.eql(pm.environment.get(\"corp_managed_account_id_gbp\"));",
											"    pm.expect(jsonData.entry[1].additionalFields.sourceInstrumentFriendlyName).to.eql(\"updated_managed_gbp\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_gbp}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_gbp}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MC To MA USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transfer Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"transfers\");",
											"    pm.expect(jsonData.source.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"corp_managed_card_id_usd\"));",
											"    pm.expect(jsonData.destination.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"corp_managed_account_id_usd\"));",
											"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.destinationAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount_mc_to_ma\"));",
											"    ",
											"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
											"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{corp_managed_card_id_usd}}\n  },\n  \"destination\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{corp_managed_account_id_usd}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"USD\",\n    \"amount\": {{transfer_send_amount_mc_to_ma}}\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Card By ID USD After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"usd card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_usd_name\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_usd\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_usd\")));",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912343\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{corporate_managed_cards_profile_id}},\n  \"ownerId\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_eur}}\n   }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_usd}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_usd}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account By ID USD After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_managed_usd\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")-pm.environment.get(\"transfer_send_fee_usd\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")-pm.environment.get(\"transfer_send_fee_usd\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_usd}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_usd}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account Statement USD After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Transfer Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount_mc_to_ma\"));",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")-pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_fee_usd\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentType).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentId).to.eql(pm.environment.get(\"corp_managed_card_id_usd\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentFriendlyName).to.eql(\"updated_usd_name\");",
											"    ",
											"    pm.expect(jsonData.entry[1].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.amount).to.eql(JSON.stringify(-pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_fee_usd\")));",
											"    pm.expect(jsonData.entry[1].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")-pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_fee_usd\")));",
											"    pm.expect(jsonData.entry[1].additionalFields.destinationInstrumentType).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.entry[1].additionalFields.destinationInstrumentId).to.eql(pm.environment.get(\"corp_managed_card_id_usd\"));",
											"    pm.expect(jsonData.entry[1].additionalFields.destinationInstrumentFriendlyName).to.eql(\"updated_usd_name\");",
											"    pm.expect(jsonData.entry[1].cardholderFee.amount).to.eql(pm.environment.get(\"transfer_send_fee_usd\"));",
											"",
											"    ",
											"    pm.expect(jsonData.entry[2].txId.type).to.eql(\"DEPOSIT\");",
											"    pm.expect(jsonData.entry[2].transactionAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[2].transactionAmount.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")));",
											"    pm.expect(jsonData.entry[2].balanceAfter.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[2].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")));",
											"    pm.expect(jsonData.entry[2].cardholderFee.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[2].cardholderFee.amount).to.eql(pm.environment.get(\"deposit_fee_usd\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_usd}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_usd}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Card Statement USD After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Transfer Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(JSON.stringify(-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_usd\")))",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_usd\")));",
											"    pm.expect(jsonData.entry[0].cardholderFee.amount).to.eql(pm.environment.get(\"transfer_send_fee_usd\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentType).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentId).to.eql(pm.environment.get(\"corp_managed_account_id_usd\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentFriendlyName).to.eql(\"updated_managed_usd\");",
											"    ",
											"    pm.expect(jsonData.entry[1].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.entry[1].balanceAfter.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.entry[1].additionalFields.sourceInstrumentType).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.entry[1].additionalFields.sourceInstrumentId).to.eql(pm.environment.get(\"corp_managed_account_id_usd\"));",
											"     pm.expect(jsonData.entry[01].additionalFields.sourceInstrumentFriendlyName).to.eql(\"updated_managed_usd\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_usd}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_usd}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Block Managed Account EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_managed_eur\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-pm.environment.get(\"transfer_send_fee_eur\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-pm.environment.get(\"transfer_send_fee_eur\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Paynetics AD\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"PATCBGSF\");",
											"    pm.expect(jsonData.state.blockTypes.USER).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_eur}}/freeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_eur}}",
										"freeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Block Managed Account GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_managed_gbp\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")-pm.environment.get(\"transfer_send_fee_gbp\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")-pm.environment.get(\"transfer_send_fee_gbp\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"    pm.expect(jsonData.state.blockTypes.USER).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_gbp}}/freeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_gbp}}",
										"freeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Block Managed Account USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_managed_usd\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")-pm.environment.get(\"transfer_send_fee_usd\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")-pm.environment.get(\"transfer_send_fee_usd\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"    pm.expect(jsonData.state.blockTypes.USER).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_usd}}/freeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_usd}}",
										"freeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Block Managed Account EUR Already Frozen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Instrument Already Frozen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INSTRUMENT_ALREADY_FROZEN\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_eur}}/freeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_eur}}",
										"freeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Block Managed Account GBP Already Frozen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Instrument Already Frozen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INSTRUMENT_ALREADY_FROZEN\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_gbp}}/freeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_gbp}}",
										"freeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Block Managed Account USD Already Frozen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Instrument Already Frozen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INSTRUMENT_ALREADY_FROZEN\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_usd}}/freeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_usd}}",
										"freeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MA To MC EUR After Freeze",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Transfer Block\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"SOURCE_INSTRUMENT_BLOCKED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{corp_managed_account_id_eur}}\n  },\n  \"destination\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{corp_managed_card_id_eur}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"EUR\",\n    \"amount\": 5000\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MA To MC GBP After Freeze",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Transfer Block\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"SOURCE_INSTRUMENT_BLOCKED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{corp_managed_account_id_gbp}}\n  },\n  \"destination\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{corp_managed_card_id_gbp}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"GBP\",\n    \"amount\": 1500\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MA To MC USD After Freeze",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Transfer Block\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"SOURCE_INSTRUMENT_BLOCKED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{corp_managed_account_id_usd}}\n  },\n  \"destination\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{corp_managed_card_id_usd}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"USD\",\n    \"amount\": 2000\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unblock Managed Account EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_managed_eur\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-pm.environment.get(\"transfer_send_fee_eur\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-pm.environment.get(\"transfer_send_fee_eur\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Paynetics AD\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"PATCBGSF\");",
											"    pm.expect(jsonData.state.blockTypes).to.eql({});",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blockType\": \"USER\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_eur}}/unfreeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_eur}}",
										"unfreeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unblock Managed Account GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_managed_gbp\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")-pm.environment.get(\"transfer_send_fee_gbp\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")-pm.environment.get(\"transfer_send_fee_gbp\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"    pm.expect(jsonData.state.blockTypes).to.eql({});",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_gbp}}/unfreeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_gbp}}",
										"unfreeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unblock Managed Account USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_managed_usd\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")-pm.environment.get(\"transfer_send_fee_usd\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")-pm.environment.get(\"transfer_send_fee_usd\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"    pm.expect(jsonData.state.blockTypes).to.eql({});",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_usd}}/unfreeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_usd}}",
										"unfreeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Block Managed Card EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_eur_name\");",
											"    pm.expect(jsonData.tag).to.eql(\"updated_eur_tag\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_eur\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_eur\")));",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912341\");",
											"    //pm.expect(jsonData.state.blockTypes.USER).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/freeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"freeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Block Managed Card GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"gbp card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_gbp_name\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_gbp\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_gbp\")));",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912342\");",
											"    //pm.expect(jsonData.state.blockTypes.USER).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_gbp}}/freeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_gbp}}",
										"freeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Block Managed Card USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"usd card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_usd_name\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_usd\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_usd\")));",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912343\");",
											"    //pm.expect(jsonData.state.blockTypes.USER).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{corporate_managed_cards_profile_id}},\n  \"ownerId\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_eur}}\n   }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_usd}}/freeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_usd}}",
										"freeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Block Managed Card EUR Already Frozen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Already Frozen Error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INSTRUMENT_ALREADY_FROZEN\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/freeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"freeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Block Managed Card GBP Already Frozen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Already Frozen Error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INSTRUMENT_ALREADY_FROZEN\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_gbp}}/freeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_gbp}}",
										"freeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Block Managed Card USD Already Frozen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Already Frozen Error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INSTRUMENT_ALREADY_FROZEN\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{corporate_managed_cards_profile_id}},\n  \"ownerId\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_eur}}\n   }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_usd}}/freeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_usd}}",
										"freeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Card Purchase EUR Frozen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Approved\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"DENIED_CARD_INACTIVE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"value": "{{secret_programme_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardNumber\": \"{{corp_managed_card_id_eur_cardNumber}}\",\n  \"cvv\": \"{{corp_managed_card_id_eur_cvv}}\",\n  \"expiryDate\": \"{{corp_managed_card_id_eur_expiryMmyy}}\",\n  \"merchantName\": \"eur_merchant\",\n  \"transactionAmount\": \n    {\n      \"currency\": \"EUR\",\n      \"amount\": 68\n    }\n}"
								},
								"url": {
									"raw": "{{test-server-url}}/api/cards/purchase",
									"host": [
										"{{test-server-url}}"
									],
									"path": [
										"api",
										"cards",
										"purchase"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Card Purchase GBP Frozen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Approved\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"DENIED_CARD_INACTIVE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardNumber\": \"{{corp_managed_card_id_gbp_cardNumber}}\",\n  \"cvv\": \"{{corp_managed_card_id_gbp_cvv}}\",\n  \"expiryDate\": \"{{corp_managed_card_id_gbp_expiryMmyy}}\",\n  \"merchantName\": \"gbp_merchant\",\n  \"transactionAmount\": \n    {\n      \"currency\": \"GBP\",\n      \"amount\": 69\n    }\n}"
								},
								"url": {
									"raw": "{{test-server-url}}/api/cards/purchase",
									"host": [
										"{{test-server-url}}"
									],
									"path": [
										"api",
										"cards",
										"purchase"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Card Purchase USD Frozen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Approved\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"DENIED_CARD_INACTIVE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardNumber\": \"{{corp_managed_card_id_usd_cardNumber}}\",\n  \"cvv\": \"{{corp_managed_card_id_usd_cvv}}\",\n  \"expiryDate\": \"{{corp_managed_card_id_usd_expiryMmyy}}\",\n  \"merchantName\": \"usd_merchant\",\n  \"transactionAmount\": \n    {\n      \"currency\": \"USD\",\n      \"amount\": 70\n    }\n}"
								},
								"url": {
									"raw": "{{test-server-url}}/api/cards/purchase",
									"host": [
										"{{test-server-url}}"
									],
									"path": [
										"api",
										"cards",
										"purchase"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MC To MA EUR After Freeze",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Account Blocked Error Code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"SOURCE_INSTRUMENT_BLOCKED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{corp_managed_card_id_eur}}\n  },\n  \"destination\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{corp_managed_account_id_eur}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"EUR\",\n    \"amount\": 200\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MC To MA GBP After Freeze",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Account Blocked Error Code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"SOURCE_INSTRUMENT_BLOCKED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{corp_managed_card_id_gbp}}\n  },\n  \"destination\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{corp_managed_account_id_gbp}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"GBP\",\n    \"amount\": 170\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MC To MA USD After Freeze",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Account Blocked Error Code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"SOURCE_INSTRUMENT_BLOCKED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{corp_managed_card_id_usd}}\n  },\n  \"destination\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{corp_managed_account_id_usd}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"USD\",\n    \"amount\": 120\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unblock Managed Card EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_eur_name\");",
											"    pm.expect(jsonData.tag).to.eql(\"updated_eur_tag\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_eur\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_eur\")));",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912341\");",
											"    pm.expect(jsonData.state.blockTypes).to.eql({});",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/unfreeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"unfreeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unblock Managed Card GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"gbp card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_gbp_name\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_gbp\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_gbp\")));",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912342\");",
											"    pm.expect(jsonData.state.blockTypes).to.eql({});",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_gbp}}/unfreeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_gbp}}",
										"unfreeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unblock Managed Card USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"usd card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_usd_name\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_usd\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_usd\")));",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912343\");",
											"    pm.expect(jsonData.state.blockTypes).to.eql({});",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{corporate_managed_cards_profile_id}},\n  \"ownerId\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_eur}}\n   }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_usd}}/unfreeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_usd}}",
										"unfreeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Card Purchase EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Approved\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"APPROVED\");",
											"});",
											"",
											"setTimeout(function(){}, 25000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"value": "{{secret_programme_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardNumber\": \"{{corp_managed_card_id_eur_cardNumber}}\",\n  \"cvv\": \"{{corp_managed_card_id_eur_cvv}}\",\n  \"expiryDate\": \"{{corp_managed_card_id_eur_expiryMmyy}}\",\n  \"merchantName\": \"eur_merchant\",\n  \"transactionAmount\": \n    {\n      \"currency\": \"EUR\",\n      \"amount\": {{simulate_card_purchase_eur}}\n    },\n    \"merchantId\":\"SatanLives\",\n    \"merchantCategoryCode\":\"5411\"\n}"
								},
								"url": {
									"raw": "{{test-server-url}}/api/cards/purchase",
									"host": [
										"{{test-server-url}}"
									],
									"path": [
										"api",
										"cards",
										"purchase"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Card Purchase GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Approved\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"APPROVED\");",
											"});",
											"",
											"setTimeout(function(){}, 25000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardNumber\": \"{{corp_managed_card_id_gbp_cardNumber}}\",\n  \"cvv\": \"{{corp_managed_card_id_gbp_cvv}}\",\n  \"expiryDate\": \"{{corp_managed_card_id_gbp_expiryMmyy}}\",\n  \"merchantName\": \"gbp_merchant\",\n  \"transactionAmount\": \n    {\n      \"currency\": \"GBP\",\n      \"amount\": {{simulate_card_purchase_gbp}}\n    }\n}"
								},
								"url": {
									"raw": "{{test-server-url}}/api/cards/purchase",
									"host": [
										"{{test-server-url}}"
									],
									"path": [
										"api",
										"cards",
										"purchase"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Card Purchase USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Approved\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"APPROVED\");",
											"});",
											"",
											"setTimeout(function(){}, 25000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardNumber\": \"{{corp_managed_card_id_usd_cardNumber}}\",\n  \"cvv\": \"{{corp_managed_card_id_usd_cvv}}\",\n  \"expiryDate\": \"{{corp_managed_card_id_usd_expiryMmyy}}\",\n  \"merchantName\": \"usd_merchant\",\n  \"transactionAmount\": \n    {\n      \"currency\": \"USD\",\n      \"amount\": {{simulate_card_purchase_usd}}\n    }\n}"
								},
								"url": {
									"raw": "{{test-server-url}}/api/cards/purchase",
									"host": [
										"{{test-server-url}}"
									],
									"path": [
										"api",
										"cards",
										"purchase"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Card Statement EUR After Auths/Settle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Settlement Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"SETTLEMENT\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(JSON.stringify(-pm.environment.get(\"simulate_card_purchase_eur\")));",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_eur\")-pm.environment.get(\"simulate_card_purchase_eur\")-pm.environment.get(\"purchase_fee_eur\")));",
											"    pm.expect(jsonData.entry[0].cardholderFee.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[0].cardholderFee.amount).to.eql(pm.environment.get(\"purchase_fee_eur\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.merchantName).to.eql(\"eur_merchant\");",
											"    pm.expect(jsonData.entry[0].additionalFields.merchantCategoryCode).to.eql(\"5411\");",
											"    pm.expect(jsonData.entry[0].additionalFields.merchantId).to.eql(\"SatanLives\");",
											"    pm.expect(jsonData.entry[0].additionalFields.authorisationRelatedId).to.eql(jsonData.entry[1].txId.id);",
											"    pm.expect(jsonData.entry[1].txId.type).to.eql(\"AUTHORISATION\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.amount).to.eql(JSON.stringify(-pm.environment.get(\"simulate_card_purchase_eur\")));",
											"    pm.expect(jsonData.entry[1].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_eur\")-pm.environment.get(\"simulate_card_purchase_eur\")));",
											"    pm.expect(jsonData.entry[1].additionalFields.merchantName).to.eql(\"eur_merchant\");",
											"    pm.expect(jsonData.entry[1].additionalFields.merchantCategoryCode).to.eql(\"5411\");",
											"    pm.expect(jsonData.entry[1].additionalFields.authorisationState).to.eql(\"COMPLETED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Card Statement GBP After Auths/Settle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Settlement Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"SETTLEMENT\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(JSON.stringify(-pm.environment.get(\"simulate_card_purchase_gbp\")));",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_gbp\")-pm.environment.get(\"simulate_card_purchase_gbp\")-pm.environment.get(\"purchase_fee_gbp\")));",
											"    pm.expect(jsonData.entry[0].cardholderFee.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[0].cardholderFee.amount).to.eql(pm.environment.get(\"purchase_fee_gbp\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.merchantName).to.eql(\"gbp_merchant\");",
											"    pm.expect(jsonData.entry[0].additionalFields.merchantCategoryCode).to.eql(\"5399\");",
											"    pm.expect(jsonData.entry[0].additionalFields.authorisationRelatedId).to.eql(jsonData.entry[1].txId.id);",
											"    pm.expect(jsonData.entry[1].txId.type).to.eql(\"AUTHORISATION\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.amount).to.eql(JSON.stringify(-pm.environment.get(\"simulate_card_purchase_gbp\")));",
											"    pm.expect(jsonData.entry[1].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_gbp\")-pm.environment.get(\"simulate_card_purchase_gbp\")));",
											"    pm.expect(jsonData.entry[1].additionalFields.merchantName).to.eql(\"gbp_merchant\");",
											"    pm.expect(jsonData.entry[1].additionalFields.merchantCategoryCode).to.eql(\"5399\");",
											"    pm.expect(jsonData.entry[1].additionalFields.authorisationState).to.eql(\"COMPLETED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_gbp}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_gbp}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Card Statement USD After Auths/Settle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Settlement Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"SETTLEMENT\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(JSON.stringify(-pm.environment.get(\"simulate_card_purchase_usd\")));",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_usd\")-pm.environment.get(\"simulate_card_purchase_usd\")-pm.environment.get(\"purchase_fee_usd\")));",
											"    pm.expect(jsonData.entry[0].cardholderFee.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[0].cardholderFee.amount).to.eql(pm.environment.get(\"purchase_fee_usd\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.merchantName).to.eql(\"usd_merchant\");",
											"    pm.expect(jsonData.entry[0].additionalFields.merchantCategoryCode).to.eql(\"5399\");",
											"    pm.expect(jsonData.entry[0].additionalFields.authorisationRelatedId).to.eql(jsonData.entry[1].txId.id);",
											"    pm.expect(jsonData.entry[1].txId.type).to.eql(\"AUTHORISATION\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.amount).to.eql(JSON.stringify(-pm.environment.get(\"simulate_card_purchase_usd\")));",
											"    pm.expect(jsonData.entry[1].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_usd\")-pm.environment.get(\"simulate_card_purchase_usd\")));",
											"    pm.expect(jsonData.entry[1].additionalFields.merchantName).to.eql(\"usd_merchant\");",
											"    pm.expect(jsonData.entry[1].additionalFields.merchantCategoryCode).to.eql(\"5399\");",
											"    pm.expect(jsonData.entry[1].additionalFields.authorisationState).to.eql(\"COMPLETED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_usd}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_usd}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Card By ID EUR After Auth/Settle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_eur_name\");",
											"    pm.expect(jsonData.tag).to.eql(\"updated_eur_tag\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_eur\")-pm.environment.get(\"simulate_card_purchase_eur\")-pm.environment.get(\"purchase_fee_eur\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_eur\")-pm.environment.get(\"simulate_card_purchase_eur\")-pm.environment.get(\"purchase_fee_eur\")));",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912341\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{corporate_managed_cards_profile_id}},\n  \"ownerId\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_eur}}\n   }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MA To MC EUR After Unblock",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transfer Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"transfers\");",
											"    pm.expect(jsonData.source.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"corp_managed_account_id_eur\"));",
											"    pm.expect(jsonData.destination.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"corp_managed_card_id_eur\"));",
											"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.destinationAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    ",
											"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
											"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{corp_managed_account_id_eur}}\n  },\n  \"destination\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{corp_managed_card_id_eur}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"EUR\",\n    \"amount\": {{transfer_send_amount}}\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MA To MC GBP After Unblock",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transfer Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"transfers\");",
											"    pm.expect(jsonData.source.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"corp_managed_account_id_gbp\"));",
											"    pm.expect(jsonData.destination.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"corp_managed_card_id_gbp\"));",
											"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.destinationAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    ",
											"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
											"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{corp_managed_account_id_gbp}}\n  },\n  \"destination\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{corp_managed_card_id_gbp}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"GBP\",\n    \"amount\": {{transfer_send_amount}}\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MA To MC USD After Unblock",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transfer Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"transfers\");",
											"    pm.expect(jsonData.source.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"corp_managed_account_id_usd\"));",
											"    pm.expect(jsonData.destination.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"corp_managed_card_id_usd\"));",
											"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.destinationAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    ",
											"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
											"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{corp_managed_account_id_usd}}\n  },\n  \"destination\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{corp_managed_card_id_usd}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"USD\",\n    \"amount\": {{transfer_send_amount}}\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MC To MA EUR After Unblock",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transfer Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"transfers\");",
											"    pm.expect(jsonData.source.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"corp_managed_card_id_eur\"));",
											"    pm.expect(jsonData.destination.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"corp_managed_account_id_eur\"));",
											"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.destinationAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount_mc_to_ma\"));",
											"    ",
											"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
											"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{corp_managed_card_id_eur}}\n  },\n  \"destination\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{corp_managed_account_id_eur}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"EUR\",\n    \"amount\": {{transfer_send_amount_mc_to_ma}}\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MC To MA GBP After Unblock",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transfer Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"transfers\");",
											"    pm.expect(jsonData.source.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"corp_managed_card_id_gbp\"));",
											"    pm.expect(jsonData.destination.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"corp_managed_account_id_gbp\"));",
											"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"GBP\");",
											"     pm.expect(jsonData.destinationAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount_mc_to_ma\"));",
											"    ",
											"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
											"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{corp_managed_card_id_gbp}}\n  },\n  \"destination\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{corp_managed_account_id_gbp}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"GBP\",\n    \"amount\": {{transfer_send_amount_mc_to_ma}}\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MC To MA USD After Unblock",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transfer Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"transfers\");",
											"    pm.expect(jsonData.source.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"corp_managed_card_id_usd\"));",
											"    pm.expect(jsonData.destination.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"corp_managed_account_id_usd\"));",
											"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"USD\");",
											"     pm.expect(jsonData.destinationAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount_mc_to_ma\"));",
											"    ",
											"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
											"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{corp_managed_card_id_usd}}\n  },\n  \"destination\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{corp_managed_account_id_usd}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"USD\",\n    \"amount\": {{transfer_send_amount_mc_to_ma}}\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Card EUR Balance Not Zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Balance Not Zero\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"BALANCE_NOT_ZERO\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"destroyType\":\"test\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Card GBP Balance Not Zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Balance Not Zero\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"BALANCE_NOT_ZERO\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_gbp}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_gbp}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Card USD Balance Not Zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Balance Not Zero\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"BALANCE_NOT_ZERO\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_usd}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_usd}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Account EUR Balance Not Zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Balance Not Zero\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"BALANCE_NOT_ZERO\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_eur}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_eur}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Account GBP Balance Not Zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Balance Not Zero\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"BALANCE_NOT_ZERO\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_gbp}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_gbp}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Account USD Balance Not Zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Balance Not Zero\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"BALANCE_NOT_ZERO\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_usd}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_usd}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create corporate EUR managed account EUR For Destroy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_managed_account_id_eur\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_account_id_eur_iban\", JSON.parse(responseBody).bankAccountDetails.iban);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"eur2_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Paynetics AD\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"PATCBGSF\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "X-TOKEN {{corp_token_eur}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{corporates_managed_accounts_profile_id}}\",\n  \"owner\": {\n    \"type\": \"corporates\",\n    \"id\": \"{{corporate_id_eur}}\"\n  },\n  \"friendlyName\": \"eur2_account\",\n  \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create corporate EUR managed account GBP For Destroy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_managed_account_id_gbp\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_account_id_gbp_iban\", JSON.parse(responseBody).bankAccountDetails.iban);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_account_id_gbp_paymentreference\", JSON.parse(responseBody).bankAccountDetails.paymentReference);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"gbp_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{corporates_managed_accounts_profile_id}}\",\n  \"owner\": {\n    \"type\": \"corporates\",\n    \"id\": \"{{corporate_id_eur}}\"\n  },\n  \"friendlyName\": \"gbp_account\",\n  \"currency\": \"GBP\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create corporate EUR managed account USD For Destroy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_managed_account_id_usd\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_account_id_usd_iban\", JSON.parse(responseBody).bankAccountDetails.iban);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_account_id_usd_paymentreference\", JSON.parse(responseBody).bankAccountDetails.paymentReference);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"usd_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{corporates_managed_accounts_profile_id}}\",\n  \"owner\": {\n    \"type\": \"corporates\",\n    \"id\": \"{{corporate_id_eur}}\"\n  },\n  \"friendlyName\": \"usd_account\",\n  \"currency\": \"USD\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Account EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"eur2_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Paynetics AD\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"PATCBGSF\");",
											"    pm.expect(jsonData.state.destroyType).to.eql(\"USER\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_eur}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_eur}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Account GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"gbp_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"    pm.expect(jsonData.state.destroyType).to.eql(\"USER\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_gbp}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_gbp}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Account USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"usd_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"    pm.expect(jsonData.state.destroyType).to.eql(\"USER\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_usd}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_usd}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Corporate EUR Managed Card EUR For Destroy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_managed_card_id_eur\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_card_id_eur_cardNumber\", JSON.parse(responseBody).cardNumber);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_card_id_eur_cvv\", JSON.parse(responseBody).cvv);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_card_id_eur_expiryMmyy\", JSON.parse(responseBody).expiryMmyy);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{corporate_managed_cards_profile_id}},\n  \"owner\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_eur}}\n   },\n  \"friendlyName\": \"EUR_MANAGED_CARD\",\n  \"currency\": \"EUR\",\n  \"nameOnCard\": \"euro card\",\n  \"cardholderMobileNumber\": \"+35699123123\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Corporate EUR Managed Card GBP For Destroy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_managed_card_id_gbp\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_card_id_gbp_cardNumber\", JSON.parse(responseBody).cardNumber);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_card_id_gbp_cvv\", JSON.parse(responseBody).cvv);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_card_id_gbp_expiryMmyy\", JSON.parse(responseBody).expiryMmyy);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"gbp card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"GBP_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123124\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{corporate_managed_cards_profile_id}},\n  \"owner\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_eur}}\n   },\n  \"friendlyName\": \"GBP_MANAGED_CARD\",\n  \"currency\": \"GBP\",\n  \"nameOnCard\": \"gbp card\",\n  \"cardholderMobileNumber\": \"+35699123124\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Corporate EUR Managed Card USD For Destroy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_managed_card_id_usd\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_card_id_usd_cardNumber\", JSON.parse(responseBody).cardNumber);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_card_id_usd_cvv\", JSON.parse(responseBody).cvv);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_card_id_usd_expiryMmyy\", JSON.parse(responseBody).expiryMmyy);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"usd card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"USD_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123125\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{corporate_managed_cards_profile_id}},\n  \"owner\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_eur}}\n   },\n  \"friendlyName\": \"USD_MANAGED_CARD\",\n  \"currency\": \"USD\",\n  \"nameOnCard\": \"usd card\",\n  \"cardholderMobileNumber\": \"+35699123125\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Card EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"    pm.expect(jsonData.state.destroyType).to.eql(\"USER\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"destroyType\":\"test\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Card GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"gbp card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"GBP_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123124\");",
											"    pm.expect(jsonData.state.destroyType).to.eql(\"USER\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_gbp}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_gbp}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Card USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"usd card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"USD_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123125\");",
											"    pm.expect(jsonData.state.destroyType).to.eql(\"USER\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_usd}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_usd}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Card EUR Already Destroy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Already Destroyed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INSTRUMENT_ALREADY_REMOVED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"destroyType\":\"test\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Card USD Already Destroy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Already Destroyed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INSTRUMENT_ALREADY_REMOVED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_usd}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_usd}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Card GBP Already Destroy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Already Destroyed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INSTRUMENT_ALREADY_REMOVED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_gbp}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_gbp}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Account EUR Already Destroy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Already Destroyed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INSTRUMENT_ALREADY_REMOVED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_eur}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_eur}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Account GBP Already Destroy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Already Destroyed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INSTRUMENT_ALREADY_REMOVED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_gbp}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_gbp}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Account USD Already Destroy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Already Destroyed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INSTRUMENT_ALREADY_REMOVED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_usd}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_usd}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Card Statement EUR CSV",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderByTimestamp\": \"ASC\",\n\"showFundMovementsOnly\": false\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/statement/download",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"statement",
										"download"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account Statement EUR CSV",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"orderByTimestamp\": \"DSC\",\n\"showFundMovementsOnly\": true\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_eur}}/statement/download",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_eur}}",
										"statement",
										"download"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "MC Plastic",
					"item": [
						{
							"name": "Login corporate Root User EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_token_eur\", JSON.parse(responseBody).token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Login Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.credential.type).to.eql(\"ROOT\");",
											"    pm.expect(jsonData.identity.type).to.eql(\"corporates\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"value": "{{secret_programme_key}}",
										"type": "text"
									},
									{
										"key": "apikey",
										"value": "{{secret_programme_key}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"{{corp_name_eur}}\",\n  \"password\": \"Pass1234\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/login_with_password",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"login_with_password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Corporate EUR Managed Card EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_managed_card_id_eur\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_card_id_eur_cardNumber\", JSON.parse(responseBody).cardNumber);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_card_id_eur_cvv\", JSON.parse(responseBody).cvv);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_card_id_eur_expiryMmyy\", JSON.parse(responseBody).expiryMmyy);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{corporate_managed_cards_profile_id}},\n  \"owner\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_eur}}\n   },\n  \"friendlyName\": \"EUR_MANAGED_CARD\",\n  \"currency\": \"EUR\",\n  \"nameOnCard\": \"euro card\",\n  \"cardholderMobileNumber\": \"+35699123123\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Card By ID EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upgrade Plastic Card Managed Card EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"    pm.expect(jsonData.physicalCardDetails.cardBureau).to.eql(\"NITECREST\");",
											"    pm.expect(jsonData.physicalCardDetails.productReference).to.eql(\"NTCRST_PR_01\");",
											"    pm.expect(jsonData.physicalCardDetails.carrierType).to.eql(\"NTCRST_CT_01\");",
											"    pm.expect(jsonData.physicalCardDetails.physicalState).to.eql(\"PENDING_ACTIVATION\");",
											"    pm.expect(jsonData.deliveryAddress.addressLine1).to.eql(\"Delivery One\");",
											"    pm.expect(jsonData.deliveryAddress.addressLine2).to.eql(\"Delivery Two\");",
											"    pm.expect(jsonData.deliveryAddress.city).to.eql(\"Rabat\");",
											"    pm.expect(jsonData.deliveryAddress.country).to.eql(\"MT\");",
											"    pm.expect(jsonData.deliveryAddress.postCode).to.eql(\"MT123\");",
											"    pm.expect(jsonData.deliveryAddress.state).to.eql(\"Rabat\");",
											"    pm.expect(jsonData.deliveryName).to.eql(\"Stephen\");",
											"    pm.expect(jsonData.deliverySurname).to.eql(\"Galea\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"deliveryMethod\": \"STANDARD_DELIVERY\",\n  \"deliveryAddress\": {\n    \"name\": \"Stephen\",\n    \"surname\": \"Galea\",\n    \"addressLine1\": \"Delivery One\",\n    \"addressLine2\": \"Delivery Two\",\n    \"city\": \"Rabat\",\n    \"country\": \"MT\",\n    \"postCode\": \"MT123\",\n    \"state\": \"Rabat\"\n  },\n  \"activationCode\": \"123456\",\n  \"pin\":\"1234\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/physical/upgrade",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"physical",
										"upgrade"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate Plastic Card Managed Card EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.type).to.eql(\"PHYSICAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"    pm.expect(jsonData.physicalCardDetails.cardBureau).to.eql(\"NITECREST\");",
											"    pm.expect(jsonData.physicalCardDetails.productReference).to.eql(\"NTCRST_PR_01\");",
											"    pm.expect(jsonData.physicalCardDetails.carrierType).to.eql(\"NTCRST_CT_01\");",
											"    pm.expect(jsonData.physicalCardDetails.physicalState).to.eql(\"ACTIVE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"activationCode\": \"123456\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/physical/activate",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"physical",
										"activate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Plastic Card Managed Card EUR Pin Get EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Pin Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pin).to.eql(\"1234\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/physical/pin/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"physical",
										"pin",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Managed Card EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_eur_name\");",
											"    pm.expect(jsonData.tag).to.eql(\"updated_eur_tag\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912341\");",
											"    pm.expect(jsonData.physicalCardDetails.deliveryMethod).to.eql(\"REGISTERED_MAIL\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tag\": \"updated_eur_tag\",\n  \"friendlyName\": \"updated_eur_name\",\n  \"cardholderMobileNumber\": \"+35678912341\",\n  \"deliveryMethod\": \"REGISTERED_MAIL\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/update",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create  Managed Card For Report Lost",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_managed_card_id_eur\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_card_id_eur_cardNumber\", JSON.parse(responseBody).cardNumber);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_card_id_eur_cvv\", JSON.parse(responseBody).cvv);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_card_id_eur_expiryMmyy\", JSON.parse(responseBody).expiryMmyy);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{corporate_managed_cards_profile_id}},\n  \"owner\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_eur}}\n   },\n  \"friendlyName\": \"EUR_MANAGED_CARD\",\n  \"currency\": \"EUR\",\n  \"nameOnCard\": \"euro card\",\n  \"cardholderMobileNumber\": \"+35699123123\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upgrade Plastic Card Managed Card Lost",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"    pm.expect(jsonData.physicalCardDetails.cardBureau).to.eql(\"NITECREST\");",
											"    pm.expect(jsonData.physicalCardDetails.productReference).to.eql(\"NTCRST_PR_01\");",
											"    pm.expect(jsonData.physicalCardDetails.carrierType).to.eql(\"NTCRST_CT_01\");",
											"    pm.expect(jsonData.physicalCardDetails.physicalState).to.eql(\"PENDING_ACTIVATION\");",
											"    pm.expect(jsonData.deliveryAddress.addressLine1).to.eql(\"Delivery One\");",
											"    pm.expect(jsonData.deliveryAddress.addressLine2).to.eql(\"Delivery Two\");",
											"    pm.expect(jsonData.deliveryAddress.city).to.eql(\"Rabat\");",
											"    pm.expect(jsonData.deliveryAddress.country).to.eql(\"MT\");",
											"    pm.expect(jsonData.deliveryAddress.postCode).to.eql(\"MT123\");",
											"    pm.expect(jsonData.deliveryAddress.state).to.eql(\"Rabat\");",
											"    pm.expect(jsonData.deliveryName).to.eql(\"Stephen\");",
											"    pm.expect(jsonData.deliverySurname).to.eql(\"Galea\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"deliveryMethod\": \"STANDARD_DELIVERY\",\n  \"deliveryAddress\": {\n    \"name\": \"Stephen\",\n    \"surname\": \"Galea\",\n    \"addressLine1\": \"Delivery One\",\n    \"addressLine2\": \"Delivery Two\",\n    \"city\": \"Rabat\",\n    \"country\": \"MT\",\n    \"postCode\": \"MT123\",\n    \"state\": \"Rabat\"\n  },\n  \"activationCode\": \"123456\",\n  \"pin\":\"1234\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/physical/upgrade",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"physical",
										"upgrade"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate Plastic Card Managed Card Lost",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.type).to.eql(\"PHYSICAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"activationCode\": \"123456\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/physical/activate",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"physical",
										"activate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Report Plastic Card Lost",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.type).to.eql(\"PHYSICAL\");",
											"    pm.expect(jsonData.active).to.eql(true);",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"    pm.expect(jsonData.physicalCardDetails.cardBureau).to.eql(\"NITECREST\");",
											"    pm.expect(jsonData.physicalCardDetails.productReference).to.eql(\"NTCRST_PR_01\");",
											"    pm.expect(jsonData.physicalCardDetails.carrierType).to.eql(\"NTCRST_CT_01\");",
											"    pm.expect(jsonData.physicalCardDetails.physicalState).to.eql(\"LOST\");",
											"    pm.expect(jsonData.physicalCardDetails.replacementId).to.eql(\"0\");",
											"    pm.expect(jsonData.physicalCardDetails.replacementType).to.eql(\"NO_REPLACEMENT_TYPE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/physical/report_lost",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"physical",
										"report_lost"
									]
								}
							},
							"response": []
						},
						{
							"name": "Plastic Card Managed Replace Lost",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_managed_card_replace_lost_id\", JSON.parse(responseBody).physicalCardDetails.replacementId);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.type).to.eql(\"PHYSICAL\");",
											"    pm.expect(jsonData.active).to.eql(false);",
											"    pm.expect(jsonData.state.destroyType).to.eql(\"LOST\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"    pm.expect(jsonData.physicalCardDetails.productReference).to.eql(\"NTCRST_PR_01\");",
											"    pm.expect(jsonData.physicalCardDetails.carrierType).to.eql(\"NTCRST_CT_01\");",
											"    pm.expect(jsonData.physicalCardDetails.physicalState).to.eql(\"LOST\");",
											"    pm.expect(jsonData.physicalCardDetails.replacementType).to.eql(\"LOST_STOLEN\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"activationCode\": \"123456\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/physical/replace_lost_stolen",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"physical",
										"replace_lost_stolen"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch New Card By ID  After Replace Lost",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD Replacement\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.type).to.eql(\"PHYSICAL\");",
											"    pm.expect(jsonData.active).to.eql(true);",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"    pm.expect(jsonData.physicalCardDetails.cardBureau).to.eql(\"NITECREST\");",
											"    pm.expect(jsonData.physicalCardDetails.productReference).to.eql(\"NTCRST_PR_01\");",
											"    pm.expect(jsonData.physicalCardDetails.carrierType).to.eql(\"NTCRST_CT_01\");",
											"    pm.expect(jsonData.physicalCardDetails.physicalState).to.eql(\"PENDING_ACTIVATION\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_replace_lost_id}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_replace_lost_id}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate Replaced Lost Card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD Replacement\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.type).to.eql(\"PHYSICAL\");",
											"    pm.expect(jsonData.active).to.eql(true);",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"    pm.expect(jsonData.physicalCardDetails.cardBureau).to.eql(\"NITECREST\");",
											"    pm.expect(jsonData.physicalCardDetails.productReference).to.eql(\"NTCRST_PR_01\");",
											"    pm.expect(jsonData.physicalCardDetails.carrierType).to.eql(\"NTCRST_CT_01\");",
											"    pm.expect(jsonData.physicalCardDetails.physicalState).to.eql(\"ACTIVE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"activationCode\": \"123456\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_replace_lost_id}}/physical/activate",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_replace_lost_id}}",
										"physical",
										"activate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create  Managed Card For Report Stolen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_managed_card_id_eur\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_card_id_eur_cardNumber\", JSON.parse(responseBody).cardNumber);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_card_id_eur_cvv\", JSON.parse(responseBody).cvv);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_card_id_eur_expiryMmyy\", JSON.parse(responseBody).expiryMmyy);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{corporate_managed_cards_profile_id}},\n  \"owner\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_eur}}\n   },\n  \"friendlyName\": \"EUR_MANAGED_CARD\",\n  \"currency\": \"EUR\",\n  \"nameOnCard\": \"euro card\",\n  \"cardholderMobileNumber\": \"+35699123123\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upgrade Plastic Card Managed Card Stolen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"    pm.expect(jsonData.physicalCardDetails.cardBureau).to.eql(\"NITECREST\");",
											"    pm.expect(jsonData.physicalCardDetails.productReference).to.eql(\"NTCRST_PR_01\");",
											"    pm.expect(jsonData.physicalCardDetails.carrierType).to.eql(\"NTCRST_CT_01\");",
											"    pm.expect(jsonData.physicalCardDetails.physicalState).to.eql(\"PENDING_ACTIVATION\");",
											"    pm.expect(jsonData.deliveryAddress.addressLine1).to.eql(\"Delivery One\");",
											"    pm.expect(jsonData.deliveryAddress.addressLine2).to.eql(\"Delivery Two\");",
											"    pm.expect(jsonData.deliveryAddress.city).to.eql(\"Rabat\");",
											"    pm.expect(jsonData.deliveryAddress.country).to.eql(\"MT\");",
											"    pm.expect(jsonData.deliveryAddress.postCode).to.eql(\"MT123\");",
											"    pm.expect(jsonData.deliveryAddress.state).to.eql(\"Rabat\");",
											"    pm.expect(jsonData.deliveryName).to.eql(\"Stephen\");",
											"    pm.expect(jsonData.deliverySurname).to.eql(\"Galea\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"deliveryMethod\": \"STANDARD_DELIVERY\",\n  \"deliveryAddress\": {\n    \"name\": \"Stephen\",\n    \"surname\": \"Galea\",\n    \"addressLine1\": \"Delivery One\",\n    \"addressLine2\": \"Delivery Two\",\n    \"city\": \"Rabat\",\n    \"country\": \"MT\",\n    \"postCode\": \"MT123\",\n    \"state\": \"Rabat\"\n  },\n  \"activationCode\": \"123456\",\n  \"pin\":\"1234\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/physical/upgrade",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"physical",
										"upgrade"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate Plastic Card Managed Card Stolen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.type).to.eql(\"PHYSICAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"activationCode\": \"123456\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/physical/activate",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"physical",
										"activate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Report Plastic Card Stolen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.type).to.eql(\"PHYSICAL\");",
											"    pm.expect(jsonData.active).to.eql(false);",
											"    pm.expect(jsonData.state.destroyType).to.eql(\"STOLEN\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"    pm.expect(jsonData.physicalCardDetails.cardBureau).to.eql(\"NITECREST\");",
											"    pm.expect(jsonData.physicalCardDetails.productReference).to.eql(\"NTCRST_PR_01\");",
											"    pm.expect(jsonData.physicalCardDetails.carrierType).to.eql(\"NTCRST_CT_01\");",
											"    pm.expect(jsonData.physicalCardDetails.physicalState).to.eql(\"STOLEN\");",
											"    pm.expect(jsonData.physicalCardDetails.replacementId).to.eql(\"0\");",
											"    pm.expect(jsonData.physicalCardDetails.replacementType).to.eql(\"NO_REPLACEMENT_TYPE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/physical/report_stolen",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"physical",
										"report_stolen"
									]
								}
							},
							"response": []
						},
						{
							"name": "Plastic Card Managed Replace Stolen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_managed_card_replace_lost_id\", JSON.parse(responseBody).physicalCardDetails.replacementId);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.type).to.eql(\"PHYSICAL\");",
											"    pm.expect(jsonData.active).to.eql(false);",
											"    pm.expect(jsonData.state.destroyType).to.eql(\"STOLEN\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"    pm.expect(jsonData.physicalCardDetails.productReference).to.eql(\"NTCRST_PR_01\");",
											"    pm.expect(jsonData.physicalCardDetails.carrierType).to.eql(\"NTCRST_CT_01\");",
											"    pm.expect(jsonData.physicalCardDetails.physicalState).to.eql(\"STOLEN\");",
											"    pm.expect(jsonData.physicalCardDetails.replacementType).to.eql(\"LOST_STOLEN\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"activationCode\": \"123456\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/physical/replace_lost_stolen",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"physical",
										"replace_lost_stolen"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch New Card By ID  After Replace Stolen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD Replacement\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.type).to.eql(\"PHYSICAL\");",
											"    pm.expect(jsonData.active).to.eql(true);",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"    pm.expect(jsonData.physicalCardDetails.cardBureau).to.eql(\"NITECREST\");",
											"    pm.expect(jsonData.physicalCardDetails.productReference).to.eql(\"NTCRST_PR_01\");",
											"    pm.expect(jsonData.physicalCardDetails.carrierType).to.eql(\"NTCRST_CT_01\");",
											"    pm.expect(jsonData.physicalCardDetails.physicalState).to.eql(\"PENDING_ACTIVATION\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_replace_lost_id}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_replace_lost_id}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate Replaced Stolen Card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD Replacement\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.type).to.eql(\"PHYSICAL\");",
											"    pm.expect(jsonData.active).to.eql(true);",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"    pm.expect(jsonData.physicalCardDetails.cardBureau).to.eql(\"NITECREST\");",
											"    pm.expect(jsonData.physicalCardDetails.productReference).to.eql(\"NTCRST_PR_01\");",
											"    pm.expect(jsonData.physicalCardDetails.carrierType).to.eql(\"NTCRST_CT_01\");",
											"    pm.expect(jsonData.physicalCardDetails.physicalState).to.eql(\"ACTIVE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"activationCode\": \"123456\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_replace_lost_id}}/physical/activate",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_replace_lost_id}}",
										"physical",
										"activate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create  Managed Card For Replaced Damage",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_managed_card_id_eur\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_card_id_eur_cardNumber\", JSON.parse(responseBody).cardNumber);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_card_id_eur_cvv\", JSON.parse(responseBody).cvv);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_card_id_eur_expiryMmyy\", JSON.parse(responseBody).expiryMmyy);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{corporate_managed_cards_profile_id}},\n  \"owner\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_eur}}\n   },\n  \"friendlyName\": \"EUR_MANAGED_CARD\",\n  \"currency\": \"EUR\",\n  \"nameOnCard\": \"euro card\",\n  \"cardholderMobileNumber\": \"+35699123123\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upgrade Plastic Card Replaced Damage",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"    pm.expect(jsonData.physicalCardDetails.cardBureau).to.eql(\"NITECREST\");",
											"    pm.expect(jsonData.physicalCardDetails.productReference).to.eql(\"NTCRST_PR_01\");",
											"    pm.expect(jsonData.physicalCardDetails.carrierType).to.eql(\"NTCRST_CT_01\");",
											"    pm.expect(jsonData.physicalCardDetails.physicalState).to.eql(\"PENDING_ACTIVATION\");",
											"    pm.expect(jsonData.deliveryAddress.addressLine1).to.eql(\"Delivery One\");",
											"    pm.expect(jsonData.deliveryAddress.addressLine2).to.eql(\"Delivery Two\");",
											"    pm.expect(jsonData.deliveryAddress.city).to.eql(\"Rabat\");",
											"    pm.expect(jsonData.deliveryAddress.country).to.eql(\"MT\");",
											"    pm.expect(jsonData.deliveryAddress.postCode).to.eql(\"MT123\");",
											"    pm.expect(jsonData.deliveryAddress.state).to.eql(\"Rabat\");",
											"    pm.expect(jsonData.deliveryName).to.eql(\"Stephen\");",
											"    pm.expect(jsonData.deliverySurname).to.eql(\"Galea\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"deliveryMethod\": \"STANDARD_DELIVERY\",\n  \"deliveryAddress\": {\n    \"name\": \"Stephen\",\n    \"surname\": \"Galea\",\n    \"addressLine1\": \"Delivery One\",\n    \"addressLine2\": \"Delivery Two\",\n    \"city\": \"Rabat\",\n    \"country\": \"MT\",\n    \"postCode\": \"MT123\",\n    \"state\": \"Rabat\"\n  },\n  \"activationCode\": \"123456\",\n  \"pin\":\"1234\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/physical/upgrade",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"physical",
										"upgrade"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate Plastic Card Replaced Damage",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.type).to.eql(\"PHYSICAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"activationCode\": \"123456\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/physical/activate",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"physical",
										"activate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replaced Damaged Plastic Card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.active).to.eql(true);",
											"    pm.expect(jsonData.type).to.eql(\"PHYSICAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"    pm.expect(jsonData.physicalCardDetails.cardBureau).to.eql(\"NITECREST\");",
											"    pm.expect(jsonData.physicalCardDetails.productReference).to.eql(\"NTCRST_PR_01\");",
											"    pm.expect(jsonData.physicalCardDetails.carrierType).to.eql(\"NTCRST_CT_01\");",
											"    pm.expect(jsonData.physicalCardDetails.physicalState).to.eql(\"DAMAGED\");",
											"    pm.expect(jsonData.physicalCardDetails.replacementType).to.eql(\"DAMAGED\");",
											"    pm.expect(jsonData.physicalCardDetails.replacementId).to.eql(pm.environment.get(\"corp_managed_card_id_eur\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"activationCode\": \"123456\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/physical/replace_damaged",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"physical",
										"replace_damaged"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate Replaced Damaged Plastic Card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.type).to.eql(\"PHYSICAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"activationCode\": \"123456\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/physical/activate",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{corp_managed_card_id_eur}}",
										"physical",
										"activate"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Card Pool",
					"item": [
						{
							"name": "Assign EUR Corporate With EUR Card Pool",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_gbp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"externalReference\": \"{{corporate_card_pool_eur_ext_handle}}\",\n  \"activationCode\": \"123456\",\n  \"friendlyName\": \"Poolcard_eur\",\n  \"nameOnCard\": \"Stephen Galea\",\n  \"cardholderMobileNumber\": \"+35699002901\",\n  \"billingAddress\": {\n    \"addressLine1\": \"10\",\n    \"addressLine2\": \"Franton\",\n    \"city\": \"Rabat\",\n    \"country\": \"MT\",\n    \"postCode\": \"MT123\",\n    \"state\": \"test\"\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/_/assign",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"_",
										"assign"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Impersonation",
					"item": [
						{
							"name": "Impersonation Corporate 6 Month Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"postman.setEnvironmentVariable(\"impersonated_corp_token_eur\", JSON.parse(responseBody).token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"programmeId\": {{programme_id}},\n  \"credentialCode\": \"{{corp_name_eur}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/admin/api/auth_sessions/_/impersonation",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"admin",
										"api",
										"auth_sessions",
										"_",
										"impersonation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create corporate EUR managed account EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_managed_account_id_eur\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_account_id_eur_iban\", JSON.parse(responseBody).bankAccountDetails.iban);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"eur2_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Paynetics AD\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"PATCBGSF\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{impersonated_corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{corporates_managed_accounts_profile_id}}\",\n  \"owner\": {\n    \"type\": \"corporates\",\n    \"id\": \"{{corporate_id_eur}}\"\n  },\n  \"friendlyName\": \"eur2_account\",\n  \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"_",
										"create"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Simulator",
					"item": [
						{
							"name": "Login corporate Root User EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_token_eur\", JSON.parse(responseBody).token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Login Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.credential.type).to.eql(\"ROOT\");",
											"    pm.expect(jsonData.identity.type).to.eql(\"corporates\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"value": "{{secret_programme_key}}",
										"type": "text"
									},
									{
										"key": "apikey",
										"value": "{{secret_programme_key}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"{{corp_name_eur}}\",\n  \"password\": \"Pass1234\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/login_with_password",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"login_with_password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create corporate EUR managed account EUR Paynetics",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_managed_account_id_eur\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_account_id_eur_iban\", JSON.parse(responseBody).bankAccountDetails.iban);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"eur2_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Paynetics AD\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"PATCBGSF\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "X-TOKEN {{corp_token_eur}}",
										"type": "text"
									},
									{
										"key": "apikey",
										"value": "{{secret_programme_key}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{corporates_managed_accounts_profile_id}}\",\n  \"owner\": {\n    \"type\": \"corporates\",\n    \"id\": \"{{corporate_id_eur}}\"\n  },\n  \"friendlyName\": \"eur2_account\",\n  \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create corporate EUR managed account GBP Paynetics",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_managed_account_id_gbp\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_account_id_gbp_iban\", JSON.parse(responseBody).bankAccountDetails.iban);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_account_id_gbp_paymentreference\", JSON.parse(responseBody).bankAccountDetails.paymentReference);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"gbp_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"    pm.expect(jsonData.bankAccountDetails.accountNumber).to.eql(\"00010675\");",
											"    pm.expect(jsonData.bankAccountDetails.sortCode).to.eql(\"608382 (BANKING CIRCLE S.A.)\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{corporates_managed_accounts_profile_id}}\",\n  \"owner\": {\n    \"type\": \"corporates\",\n    \"id\": \"{{corporate_id_eur}}\"\n  },\n  \"friendlyName\": \"gbp_account\",\n  \"currency\": \"GBP\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create corporate EUR managed account USD Paynetics",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_managed_account_id_usd\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_account_id_usd_iban\", JSON.parse(responseBody).bankAccountDetails.iban);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_account_id_usd_paymentreference\", JSON.parse(responseBody).bankAccountDetails.paymentReference);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"usd_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{corporates_managed_accounts_profile_id}}\",\n  \"owner\": {\n    \"type\": \"corporates\",\n    \"id\": \"{{corporate_id_eur}}\"\n  },\n  \"friendlyName\": \"usd_account\",\n  \"currency\": \"USD\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Managed Account Deposit EUR By Iban",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Code Completed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"COMPLETED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"iban\": \"{{corp_managed_account_id_eur_iban}}\",\n  \"depositAmount\": \n    {\n      \"currency\": \"EUR\",\n      \"amount\": {{deposit_amount}}\n    }\n}"
								},
								"url": {
									"raw": "{{test-server-url}}/api/accounts/deposit",
									"host": [
										"{{test-server-url}}"
									],
									"path": [
										"api",
										"accounts",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Managed Account Deposit GBP By Iban",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Code Completed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"COMPLETED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"iban\": \"{{corp_managed_account_id_gbp_iban}}\",\n  \"paymentReference\": \"{{corp_managed_account_id_gbp_paymentreference}}\",\n  \"depositAmount\": \n    {\n      \"currency\": \"GBP\",\n      \"amount\": {{deposit_amount}}\n    }\n  \n}"
								},
								"url": {
									"raw": "{{test-server-url}}/api/accounts/deposit",
									"host": [
										"{{test-server-url}}"
									],
									"path": [
										"api",
										"accounts",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Managed Account Deposit USD By Iban",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Code Completed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"COMPLETED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"iban\": \"{{corp_managed_account_id_usd_iban}}\",\n  \"paymentReference\": \"{{corp_managed_account_id_usd_paymentreference}}\",\n  \"depositAmount\": \n    {\n      \"currency\": \"USD\",\n      \"amount\": {{deposit_amount}}\n    }\n  \n}"
								},
								"url": {
									"raw": "{{test-server-url}}/api/accounts/deposit",
									"host": [
										"{{test-server-url}}"
									],
									"path": [
										"api",
										"accounts",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Managed Account Deposit EUR By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Code Completed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"COMPLETED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "programme-key",
										"value": "{{secret_programme_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"depositAmount\": {\n    \"currency\": \"EUR\",\n    \"amount\": {{deposit_amount}}\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{test-server-url}}/api/accounts/{{corp_managed_account_id_eur}}/deposit",
									"host": [
										"{{test-server-url}}"
									],
									"path": [
										"api",
										"accounts",
										"{{corp_managed_account_id_eur}}",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Managed Account Deposit GBP By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Code Completed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"COMPLETED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "programme-key",
										"value": "{{secret_programme_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"depositAmount\": {\n    \"currency\": \"GBP\",\n    \"amount\": {{deposit_amount}}\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{test-server-url}}/api/accounts/{{corp_managed_account_id_gbp}}/deposit",
									"host": [
										"{{test-server-url}}"
									],
									"path": [
										"api",
										"accounts",
										"{{corp_managed_account_id_gbp}}",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Managed Account Deposit USD By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Code Completed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"COMPLETED\");",
											"});",
											"",
											"setTimeout(function(){}, 55000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "programme-key",
										"value": "{{secret_programme_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"depositAmount\": {\n    \"currency\": \"USD\",\n    \"amount\": {{deposit_amount}}\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{test-server-url}}/api/accounts/{{corp_managed_account_id_usd}}/deposit",
									"host": [
										"{{test-server-url}}"
									],
									"path": [
										"api",
										"accounts",
										"{{corp_managed_account_id_usd}}",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account By ID EUR After Deposit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"eur2_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")*2-pm.environment.get(\"deposit_fee_eur\")*2));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")*2-pm.environment.get(\"deposit_fee_eur\")*2));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Paynetics AD\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"PATCBGSF\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_eur}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_eur}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account By ID GBP After Deposit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"gbp_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")*2-pm.environment.get(\"deposit_fee_gbp\")*2));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")*2-pm.environment.get(\"deposit_fee_gbp\")*2));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_gbp}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_gbp}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account By ID USD After Deposit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"usd_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")*2-pm.environment.get(\"deposit_fee_usd\")*2));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")*2-pm.environment.get(\"deposit_fee_usd\")*2));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_usd}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{corp_managed_account_id_usd}}",
										"get"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "OWT",
					"item": [
						{
							"name": "Login corporate Root User EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_token_eur\", JSON.parse(responseBody).token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Login Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.credential.type).to.eql(\"ROOT\");",
											"    pm.expect(jsonData.identity.type).to.eql(\"corporates\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"value": "{{secret_programme_key}}",
										"type": "text"
									},
									{
										"key": "apikey",
										"value": "{{secret_programme_key}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"{{corp_name_eur}}\",\n  \"password\": \"Pass1234\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/login_with_password",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"login_with_password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create corporate EUR managed account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"corp_managed_account_id_eur\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"corp_managed_account_id_eur_iban\", JSON.parse(responseBody).bankAccountDetails.iban);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"eur_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Paynetics AD\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"PATCBGSF\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "X-TOKEN {{corp_token_eur}}",
										"type": "text"
									},
									{
										"key": "apikey",
										"value": "{{secret_programme_key}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{corporates_managed_accounts_profile_id}}\",\n  \"friendlyName\": \"eur_account\",\n  \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Managed Account Deposit EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Code Completed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"COMPLETED\");",
											"});",
											"",
											"setTimeout(function(){}, 60000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"iban\": \"{{corp_managed_account_id_eur_iban}}\",\n  \"depositAmount\": \n    {\n      \"currency\": \"EUR\",\n      \"amount\": {{deposit_amount}}\n    }\n}"
								},
								"url": {
									"raw": "{{test-server-url}}/api/accounts/deposit",
									"host": [
										"{{test-server-url}}"
									],
									"path": [
										"api",
										"accounts",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Execute OWT EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"owt_id\", JSON.parse(responseBody).id.id);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"OWT Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"outgoing_wire_transfers\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"owt_profile_id\"));",
											"    pm.expect(jsonData.source.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"corp_managed_account_id_eur\"));",
											"    pm.expect(jsonData.description).to.eql(\"Test Sepa Out\");",
											"    pm.expect(jsonData.type).to.eql(\"SEPA\");",
											"    pm.expect(jsonData.destination.beneficiaryName).to.eql(\"Stephen Galea\");",
											"    pm.expect(jsonData.destination.beneficiaryAddress).to.eql(\"HSBC Malta\");",
											"    pm.expect(jsonData.destination.beneficiaryBankName).to.eql(\"HSBC\");",
											"    pm.expect(jsonData.destination.beneficiaryBankAddress).to.eql(\"HSBC Rabat\");",
											"    pm.expect(jsonData.destination.beneficiaryBankCountry).to.eql(\"MT\");",
											"    pm.expect(jsonData.destination.sepa.iban).to.eql(\"MT84MALT011000012345MTLCAST001S\");",
											"    pm.expect(jsonData.destination.sepa.bankIdentifierCode).to.eql(\"MALTA\");",
											"    pm.expect(jsonData.state).to.eql(\"SUBMITTED\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "X-TOKEN {{corp_token_eur}}",
										"type": "text"
									},
									{
										"key": "apikey",
										"value": "{{secret_programme_key}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{owt_profile_id}},\n  \"tag\": \"owt_tag\",\n  \"source\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{corp_managed_account_id_eur}}\n  },\n  \"transferAmount\": {\n    \"currency\": \"EUR\",\n    \"amount\": 100\n  },\n  \"description\": \"Test Sepa Out\",\n  \"destination\": {\n    \"beneficiaryName\": \"Stephen Galea\",\n    \"beneficiaryAddress\": \"HSBC Malta\",\n    \"beneficiaryBankName\": \"HSBC\",\n    \"beneficiaryBankAddress\": \"HSBC Rabat\",\n    \"beneficiaryBankCountry\": \"MT\",\n    \"sepa\": {\n      \"iban\": \"MT84MALT011000012345MTLCAST001S\",\n      \"bankIdentifierCode\": \"MALTA\"\n    }\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/outgoing_wire_transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"outgoing_wire_transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Start OWT Challenge",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"owt_id\", JSON.parse(responseBody).id.id);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"OWT Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"outgoing_wire_transfers\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"owt_profile_id\"));",
											"    pm.expect(jsonData.source.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"corp_managed_account_id_eur\"));",
											"    pm.expect(jsonData.description).to.eql(\"Test Sepa Out\");",
											"    pm.expect(jsonData.type).to.eql(\"SEPA\");",
											"    pm.expect(jsonData.destination.beneficiaryName).to.eql(\"Stephen Galea\");",
											"    pm.expect(jsonData.destination.beneficiaryAddress).to.eql(\"HSBC Malta\");",
											"    pm.expect(jsonData.destination.beneficiaryBankName).to.eql(\"HSBC\");",
											"    pm.expect(jsonData.destination.beneficiaryBankAddress).to.eql(\"HSBC Rabat\");",
											"    pm.expect(jsonData.destination.beneficiaryBankCountry).to.eql(\"MT\");",
											"    pm.expect(jsonData.destination.sepa.iban).to.eql(\"MT84MALT011000012345MTLCAST001S\");",
											"    pm.expect(jsonData.destination.sepa.bankIdentifierCode).to.eql(\"MALTA\");",
											"    pm.expect(jsonData.state).to.eql(\"SUBMITTED\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "X-TOKEN {{corp_token_eur}}",
										"type": "text"
									},
									{
										"key": "apikey",
										"value": "{{secret_programme_key}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"factor\": \"SMS_OTP\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/outgoing_wire_transfers/{{owt_id}}/challenge",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"outgoing_wire_transfers",
										"{{owt_id}}",
										"challenge"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Challenge",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"owt_id\", JSON.parse(responseBody).id.id);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"OWT Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"outgoing_wire_transfers\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"owt_profile_id\"));",
											"    pm.expect(jsonData.source.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"corp_managed_account_id_eur\"));",
											"    pm.expect(jsonData.description).to.eql(\"Test Sepa Out\");",
											"    pm.expect(jsonData.type).to.eql(\"SEPA\");",
											"    pm.expect(jsonData.destination.beneficiaryName).to.eql(\"Stephen Galea\");",
											"    pm.expect(jsonData.destination.beneficiaryAddress).to.eql(\"HSBC Malta\");",
											"    pm.expect(jsonData.destination.beneficiaryBankName).to.eql(\"HSBC\");",
											"    pm.expect(jsonData.destination.beneficiaryBankAddress).to.eql(\"HSBC Rabat\");",
											"    pm.expect(jsonData.destination.beneficiaryBankCountry).to.eql(\"MT\");",
											"    pm.expect(jsonData.destination.sepa.iban).to.eql(\"MT84MALT011000012345MTLCAST001S\");",
											"    pm.expect(jsonData.destination.sepa.bankIdentifierCode).to.eql(\"MALTA\");",
											"    pm.expect(jsonData.state).to.eql(\"SUBMITTED\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "X-TOKEN {{corp_token_eur}}",
										"type": "text"
									},
									{
										"key": "apikey",
										"value": "{{secret_programme_key}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"value\": \"123456\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/outgoing_wire_transfers/{{owt_id}}/verify",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"outgoing_wire_transfers",
										"{{owt_id}}",
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get OWT EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"OWT Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"outgoing_wire_transfers\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"owt_profile_id\"));",
											"    pm.expect(jsonData.source.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"corp_managed_account_id_eur\"));",
											"    pm.expect(jsonData.description).to.eql(\"Test Sepa Out\");",
											"    pm.expect(jsonData.type).to.eql(\"SEPA\");",
											"    pm.expect(jsonData.destination.beneficiaryName).to.eql(\"Stephen Galea\");",
											"    pm.expect(jsonData.destination.beneficiaryAddress).to.eql(\"HSBC Malta\");",
											"    pm.expect(jsonData.destination.beneficiaryBankName).to.eql(\"HSBC\");",
											"    pm.expect(jsonData.destination.beneficiaryBankAddress).to.eql(\"HSBC Rabat\");",
											"    pm.expect(jsonData.destination.beneficiaryBankCountry).to.eql(\"MT\");",
											"    pm.expect(jsonData.destination.sepa.iban).to.eql(\"MT84MALT011000012345MTLCAST001S\");",
											"    pm.expect(jsonData.destination.sepa.bankIdentifierCode).to.eql(\"MALTA\");",
											"    pm.expect(jsonData.state).to.eql(\"SUBMITTED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "X-TOKEN {{corp_token_eur}}",
										"type": "text"
									},
									{
										"key": "apikey",
										"value": "{{secret_programme_key}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{corporates_managed_accounts_profile_id}}\",\n  \"friendlyName\": \"eur_account\",\n  \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/outgoing_wire_transfers/{{owt_id}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"outgoing_wire_transfers",
										"{{owt_id}}",
										"get"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Consumer",
			"item": [
				{
					"name": "Consumer Registration",
					"item": [
						{
							"name": "Create consumer Missing DOB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.validation.fields[0].name).to.eql(\"dateOfBirth\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"consumer_email_eur\", \"cons\" + _.random(99000000000,99999999999) + \"@fakemail.com\");",
											"pm.environment.set(\"consumer_mobile_eur\", _.random(99000000,99999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{consumers_profile_id}}\",\n  \"name\": \"eurname\",\n  \"surname\": \"sursurname\",\n  \"email\": \"{{consumer_email_eur}}\",\n  \"credentialCode\": \"{{consumer_email_eur}}\",\n  \"mobileNumber\" : \"{{consumer_mobile_eur}}\",\n  \"mobileCountryCode\":\"+356\",\n  \"baseCurrency\": \"EUR\",\n  \"address\": {\n    \"addressLine1\": \"AddressLine1\",\n    \"addressLine2\": \"AddressLine2\",\n    \"city\": \"AddressCity\",\n    \"country\": \"MT\",\n    \"postCode\": \"MT123\",\n    \"state\": \"Rabat\"\n  },\n  \"occupation\": \"ACCOUNTING\",\n  \"sourceOfFunds\": \"FAMILY_SAVINGS\",\n  \"acceptedTerms\": \"TRUE\"\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create consumer Missing SOF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.validation.fields[0].name).to.eql(\"sourceOfFunds\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"consumer_email_eur\", \"cons\" + _.random(99000000000,99999999999) + \"@fakemail.com\");",
											"pm.environment.set(\"consumer_mobile_eur\", _.random(99000000,99999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{consumers_profile_id}}\",\n  \"name\": \"eurname\",\n  \"surname\": \"sursurname\",\n  \"email\": \"{{consumer_email_eur}}\",\n  \"credentialCode\": \"{{consumer_email_eur}}\",\n  \"mobileNumber\" : \"{{consumer_mobile_eur}}\",\n  \"mobileCountryCode\":\"+356\",\n  \"baseCurrency\": \"EUR\",\n  \"dateOfBirth\": {\n    \"year\": 1987,\n    \"month\": 1,\n    \"day\": 15\n  },\n  \"address\": {\n    \"addressLine1\": \"AddressLine1\",\n    \"addressLine2\": \"AddressLine2\",\n    \"city\": \"AddressCity\",\n    \"country\": \"MT\",\n    \"postCode\": \"MT123\",\n    \"state\": \"Rabat\"\n  },\n  \"occupation\": \"ACCOUNTING\",\n  \"acceptedTerms\": \"TRUE\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create consumer Missing SOF Other",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Response is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"SOURCE_OF_FUNDS_OTHER_MISSING\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"consumer_email_eur\", \"cons\" + _.random(99000000000,99999999999) + \"@fakemail.com\");",
											"pm.environment.set(\"consumer_mobile_eur\", _.random(99000000,99999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{consumers_profile_id}}\",\n  \"name\": \"eurname\",\n  \"surname\": \"sursurname\",\n  \"email\": \"{{consumer_email_eur}}\",\n  \"credentialCode\": \"{{consumer_email_eur}}\",\n  \"mobileNumber\" : \"{{consumer_mobile_eur}}\",\n  \"mobileCountryCode\":\"+356\",\n  \"baseCurrency\": \"EUR\",\n  \"dateOfBirth\": {\n    \"year\": 1987,\n    \"month\": 1,\n    \"day\": 15\n  },\n  \"address\": {\n    \"addressLine1\": \"AddressLine1\",\n    \"addressLine2\": \"AddressLine2\",\n    \"city\": \"AddressCity\",\n    \"country\": \"MT\",\n    \"postCode\": \"MT123\",\n    \"state\": \"Rabat\"\n  },\n  \"occupation\": \"ACCOUNTING\",\n  \"sourceOfFunds\": \"OTHER\",\n  \"acceptedTerms\": \"TRUE\"\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate Password Correct",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"value": "{{secret_programme_key}}",
										"type": "text"
									},
									{
										"key": "call-ref",
										"value": "test",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"identityProfileId\": {{consumers_profile_id}},\n  \"credentialType\": \"ROOT\",\n  \"password\": {\n    \"value\": \"Pass1234!\"\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/validate",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"validate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate Password Short",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Password Too Short\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"PASSWORD_TOO_SHORT\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "call-ref",
										"type": "text",
										"value": "test",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"identityProfileId\": {{consumers_profile_id}},\n  \"credentialType\": \"ROOT\",\n  \"password\": {\n    \"value\": \"Pass12\"\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/validate",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"validate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate Password Long",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Password Too Long\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"PASSWORD_TOO_LONG\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "call-ref",
										"type": "text",
										"value": "test",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"identityProfileId\": {{consumers_profile_id}},\n  \"credentialType\": \"ROOT\",\n  \"password\": {\n    \"value\": \"Pass121111111111111435253253252525325525325444344324324243242425\"\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/validate",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"validate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create consumer EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"consumer_id_eur\", JSON.parse(responseBody).id.id);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Consumer Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumers_profile_id\"));",
											"    pm.expect(jsonData.name).to.eql(\"eurname\");",
											"    pm.expect(jsonData.surname).to.eql(\"sursurname\");",
											"    pm.expect(jsonData.email).to.eql(pm.environment.get(\"consumer_email_eur\"));",
											"    pm.expect(jsonData.active).to.eql(true);",
											"    pm.expect(jsonData.mobileCountryCode).to.eql(\"+356\");",
											"    pm.expect(jsonData.kyc.emailVerified).to.eql(false);",
											"    pm.expect(jsonData.kyc.mobileVerified).to.eql(false);",
											"    pm.expect(jsonData.kyc.fullDueDiligence).to.eql(\"NOT_STARTED\");",
											"    pm.expect(jsonData.kyc.allowedLimits[0].limit.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.kyc.allowedLimits[0].limit.amount).to.eql(\"0\");",
											"    pm.expect(jsonData.kyc.remainingLimits[0].limit.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.kyc.remainingLimits[0].limit.amount).to.eql(\"0\");",
											"    pm.expect(jsonData.baseCurrency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.dateOfBirth.year).to.eql(1987);",
											"    pm.expect(jsonData.dateOfBirth.month).to.eql(1);",
											"    pm.expect(jsonData.dateOfBirth.day).to.eql(15);",
											"    pm.expect(jsonData.address.addressLine1).to.eql(\"AddressLine1\");",
											"    pm.expect(jsonData.address.addressLine2).to.eql(\"AddressLine2\");",
											"    pm.expect(jsonData.address.city).to.eql(\"AddressCity\");",
											"    pm.expect(jsonData.address.country).to.eql(\"MT\");",
											"    pm.expect(jsonData.address.postCode).to.eql(\"MT123\");",
											"    pm.expect(jsonData.address.state).to.eql(\"Rabat\");",
											"    pm.expect(jsonData.occupation).to.eql(\"ACCOUNTING\");",
											"    pm.expect(jsonData.sourceOfFunds).to.eql(\"FAMILY_SAVINGS\");",
											"    pm.expect(jsonData.acceptedTerms).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"consumer_email_eur\", \"cons\" + _.random(99000000000,99999999999) + \"@fakemail.com\");",
											"pm.environment.set(\"consumer_mobile_eur\", _.random(99000000,99999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{consumers_profile_id}}\",\n  \"name\": \"eurname\",\n  \"surname\": \"sursurname\",\n  \"email\": \"{{consumer_email_eur}}\",\n  \"credentialCode\": \"{{consumer_email_eur}}\",\n  \"mobileNumber\" : \"{{consumer_mobile_eur}}\",\n  \"mobileCountryCode\":\"+356\",\n  \"baseCurrency\": \"EUR\",\n  \"dateOfBirth\": {\n    \"year\": 1987,\n    \"month\": 1,\n    \"day\": 15\n  },\n  \"address\": {\n    \"addressLine1\": \"AddressLine1\",\n    \"addressLine2\": \"AddressLine2\",\n    \"city\": \"AddressCity\",\n    \"country\": \"MT\",\n    \"postCode\": \"MT123\",\n    \"state\": \"Rabat\"\n  },\n  \"occupation\": \"ACCOUNTING\",\n  \"sourceOfFunds\": \"FAMILY_SAVINGS\",\n  \"acceptedTerms\": \"TRUE\"\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create consumer GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"consumer_id_gbp\", JSON.parse(responseBody).id.id);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Consumer Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumers_profile_id\"));",
											"    pm.expect(jsonData.name).to.eql(\"gbpname\");",
											"    pm.expect(jsonData.surname).to.eql(\"gbpsurname\");",
											"    pm.expect(jsonData.email).to.eql(pm.environment.get(\"consumer_email_gbp\"));",
											"    pm.expect(jsonData.active).to.eql(true);",
											"    pm.expect(jsonData.mobileCountryCode).to.eql(\"+356\");",
											"    pm.expect(jsonData.kyc.emailVerified).to.eql(false);",
											"    pm.expect(jsonData.kyc.mobileVerified).to.eql(false);",
											"    pm.expect(jsonData.kyc.fullDueDiligence).to.eql(\"NOT_STARTED\");",
											"    pm.expect(jsonData.kyc.allowedLimits[0].limit.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.kyc.allowedLimits[0].limit.amount).to.eql(\"0\");",
											"    pm.expect(jsonData.kyc.remainingLimits[0].limit.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.kyc.remainingLimits[0].limit.amount).to.eql(\"0\");",
											"    pm.expect(jsonData.baseCurrency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.dateOfBirth.year).to.eql(1986);",
											"    pm.expect(jsonData.dateOfBirth.month).to.eql(3);",
											"    pm.expect(jsonData.dateOfBirth.day).to.eql(18);",
											"    pm.expect(jsonData.address.addressLine1).to.eql(\"AddressLine11\");",
											"    pm.expect(jsonData.address.addressLine2).to.eql(\"AddressLine22\");",
											"    pm.expect(jsonData.address.city).to.eql(\"AddressCity22\");",
											"    pm.expect(jsonData.address.country).to.eql(\"GB\");",
											"    pm.expect(jsonData.address.postCode).to.eql(\"MT1234\");",
											"    pm.expect(jsonData.address.state).to.eql(\"Rab\");",
											"    pm.expect(jsonData.occupation).to.eql(\"ART_ENTERTAINMENT\");",
											"    pm.expect(jsonData.sourceOfFunds).to.eql(\"LOAN_FROM_FINANCIAL_INSTITUTIONS_CREDIT_UNIONS\");",
											"    pm.expect(jsonData.acceptedTerms).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"consumer_email_gbp\", \"cons\" + _.random(99000000000,99999999999) + \"@fakemail.com\");",
											"pm.environment.set(\"consumer_mobile_gbp\", _.random(99000000,99999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{consumers_profile_id}}\",\n  \"name\": \"gbpname\",\n  \"surname\": \"gbpsurname\",\n  \"email\": \"{{consumer_email_gbp}}\",\n  \"credentialCode\": \"{{consumer_email_gbp}}\",\n  \"mobileNumber\" : \"{{consumer_mobile_gbp}}\",\n  \"mobileCountryCode\":\"+356\",\n  \"baseCurrency\": \"GBP\",\n  \"dateOfBirth\": {\n    \"year\": 1986,\n    \"month\": 3,\n    \"day\": 18\n  },\n  \"address\": {\n    \"addressLine1\": \"AddressLine11\",\n    \"addressLine2\": \"AddressLine22\",\n    \"city\": \"AddressCity22\",\n    \"country\": \"GB\",\n    \"postCode\": \"MT1234\",\n    \"state\": \"Rab\"\n  },\n  \"occupation\": \"ART_ENTERTAINMENT\",\n  \"sourceOfFunds\": \"LOAN_FROM_FINANCIAL_INSTITUTIONS_CREDIT_UNIONS\",\n  \"acceptedTerms\": \"TRUE\"\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create consumer USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"consumer_id_usd\", JSON.parse(responseBody).id.id);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Consumer Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumers_profile_id\"));",
											"    pm.expect(jsonData.name).to.eql(\"usdname\");",
											"    pm.expect(jsonData.surname).to.eql(\"usdsurname\");",
											"    pm.expect(jsonData.email).to.eql(pm.environment.get(\"consumer_email_usd\"));",
											"    pm.expect(jsonData.active).to.eql(true);",
											"    pm.expect(jsonData.mobileCountryCode).to.eql(\"+356\");",
											"    pm.expect(jsonData.kyc.emailVerified).to.eql(false);",
											"    pm.expect(jsonData.kyc.mobileVerified).to.eql(false);",
											"    pm.expect(jsonData.kyc.fullDueDiligence).to.eql(\"NOT_STARTED\");",
											"    pm.expect(jsonData.kyc.allowedLimits[0].limit.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.kyc.allowedLimits[0].limit.amount).to.eql(\"0\");",
											"    pm.expect(jsonData.kyc.remainingLimits[0].limit.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.kyc.remainingLimits[0].limit.amount).to.eql(\"0\");",
											"    pm.expect(jsonData.baseCurrency).to.eql(\"USD\");",
											"    pm.expect(jsonData.dateOfBirth.year).to.eql(1989);",
											"    pm.expect(jsonData.dateOfBirth.month).to.eql(2);",
											"    pm.expect(jsonData.dateOfBirth.day).to.eql(17);",
											"    pm.expect(jsonData.address.addressLine1).to.eql(\"AddressLine111\");",
											"    pm.expect(jsonData.address.addressLine2).to.eql(\"AddressLine222\");",
											"    pm.expect(jsonData.address.city).to.eql(\"AddressCity222\");",
											"    pm.expect(jsonData.address.country).to.eql(\"IT\");",
											"    pm.expect(jsonData.address.postCode).to.eql(\"MT12345\");",
											"    pm.expect(jsonData.address.state).to.eql(\"Rb\");",
											"    pm.expect(jsonData.occupation).to.eql(\"ART_ENTERTAINMENT\");",
											"    pm.expect(jsonData.sourceOfFunds).to.eql(\"OTHER\");",
											"    pm.expect(jsonData.sourceOfFundsOther).to.eql(\"Other funds\");",
											"    pm.expect(jsonData.acceptedTerms).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"consumer_email_usd\", \"cons\" + _.random(99000000000,99999999999) + \"@fakemail.com\");",
											"pm.environment.set(\"consumer_mobile_usd\", _.random(99000000,99999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{consumers_profile_id}}\",\n  \"name\": \"usdname\",\n  \"surname\": \"usdsurname\",\n  \"email\": \"{{consumer_email_usd}}\",\n  \"credentialCode\": \"{{consumer_email_usd}}\",\n  \"mobileNumber\" : \"{{consumer_mobile_usd}}\",\n  \"mobileCountryCode\":\"+356\",\n  \"baseCurrency\": \"USD\",\n  \"dateOfBirth\": {\n    \"year\": 1989,\n    \"month\": 2,\n    \"day\": 17\n  },\n  \"address\": {\n    \"addressLine1\": \"AddressLine111\",\n    \"addressLine2\": \"AddressLine222\",\n    \"city\": \"AddressCity222\",\n    \"country\": \"IT\",\n    \"postCode\": \"MT12345\",\n    \"state\": \"Rb\"\n  },\n  \"occupation\": \"ART_ENTERTAINMENT\",\n  \"sourceOfFunds\": \"OTHER\",\n  \"sourceOfFundsOther\": \"Other funds\",\n  \"acceptedTerms\": \"TRUE\"\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create consumer password identity EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{consumers_profile_id}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/identities/{{consumer_id_eur}}/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"identities",
										"{{consumer_id_eur}}",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create consumer password identity GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{consumers_profile_id}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/identities/{{consumer_id_gbp}}/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"identities",
										"{{consumer_id_gbp}}",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create consumer password identity USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{consumers_profile_id}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/identities/{{consumer_id_usd}}/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"identities",
										"{{consumer_id_usd}}",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create consumer password EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Expected Credential\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.credentialType).to.eql(\"ROOT\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"credentialType\": \"ROOT\",\n  \"identityId\": \"{{consumer_id_eur}}\",\n  \"password\": {\n    \"value\": \"Pass1234\"\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/{{consumer_id_eur}}/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"{{consumer_id_eur}}",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create consumer password GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Expected Credential\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.credentialType).to.eql(\"ROOT\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"credentialType\": \"ROOT\",\n  \"identityId\": \"{{consumer_id_gbp}}\",\n  \"password\": {\n    \"value\": \"Pass1234\"\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/{{consumer_id_gbp}}/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"{{consumer_id_gbp}}",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create consumer password USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Expected Credential\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.credentialType).to.eql(\"ROOT\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"credentialType\": \"ROOT\",\n  \"identityId\": \"{{consumer_id_usd}}\",\n  \"password\": {\n    \"value\": \"Pass1234\"\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/{{consumer_id_usd}}/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"{{consumer_id_usd}}",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login consumer EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"cons_token_eur\", JSON.parse(responseBody).token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "call-ref",
										"type": "text",
										"value": "Login_Consumer",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{consumer_email_eur}}\",\n    \"password\": \"Pass1234\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/login_with_password",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"login_with_password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login consumer GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"cons_token_gbp\", JSON.parse(responseBody).token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "call-ref",
										"type": "text",
										"value": "Login_Consumer",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"{{consumer_email_gbp}}\",\n  \"password\": \"Pass1234\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/login_with_password",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"login_with_password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login consumer USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"cons_token_usd\", JSON.parse(responseBody).token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "call-ref",
										"type": "text",
										"value": "Login_Consumer",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"{{consumer_email_usd}}\",\n  \"password\": \"Pass1234\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/login_with_password",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"login_with_password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Consumer EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Consumer Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumers_profile_id\"));",
											"    pm.expect(jsonData.name).to.eql(\"eurname\");",
											"    pm.expect(jsonData.surname).to.eql(\"sursurname\");",
											"    pm.expect(jsonData.email).to.eql(pm.environment.get(\"consumer_email_eur\"));",
											"    pm.expect(jsonData.active).to.eql(true);",
											"    pm.expect(jsonData.mobileCountryCode).to.eql(\"+356\");",
											"    pm.expect(jsonData.kyc.emailVerified).to.eql(false);",
											"    pm.expect(jsonData.kyc.mobileVerified).to.eql(false);",
											"    pm.expect(jsonData.kyc.fullDueDiligence).to.eql(\"NOT_STARTED\");",
											"    pm.expect(jsonData.kyc.allowedLimits[0].limit.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.kyc.allowedLimits[0].limit.amount).to.eql(\"0\");",
											"    pm.expect(jsonData.kyc.remainingLimits[0].limit.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.kyc.remainingLimits[0].limit.amount).to.eql(\"0\");",
											"    pm.expect(jsonData.baseCurrency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.dateOfBirth.year).to.eql(1987);",
											"    pm.expect(jsonData.dateOfBirth.month).to.eql(1);",
											"    pm.expect(jsonData.dateOfBirth.day).to.eql(15);",
											"    pm.expect(jsonData.address.addressLine1).to.eql(\"AddressLine1\");",
											"    pm.expect(jsonData.address.addressLine2).to.eql(\"AddressLine2\");",
											"    pm.expect(jsonData.address.city).to.eql(\"AddressCity\");",
											"    pm.expect(jsonData.address.country).to.eql(\"MT\");",
											"    pm.expect(jsonData.address.postCode).to.eql(\"MT123\");",
											"    pm.expect(jsonData.address.state).to.eql(\"Rabat\");",
											"    pm.expect(jsonData.occupation).to.eql(\"ACCOUNTING\");",
											"    pm.expect(jsonData.sourceOfFunds).to.eql(\"FAMILY_SAVINGS\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "X-TOKEN {{cons_token_eur}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_eur}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_eur}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consumer EUR KYC Start",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "X-TOKEN {{cons_token_eur}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_eur}}/kyc/start",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_eur}}",
										"kyc",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Consumer EUR KYC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Consumer Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.emailVerified).to.eql(false);",
											"    pm.expect(jsonData.mobileVerified).to.eql(false);",
											"    pm.expect(jsonData.fullDueDiligence).to.eql(\"INITIATED\");",
											"    pm.expect(jsonData.allowedLimits[0].limit.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.allowedLimits[0].limit.amount).to.eql(\"0\");",
											"    pm.expect(jsonData.remainingLimits[0].limit.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.remainingLimits[0].limit.amount).to.eql(\"0\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_eur}}/kyc/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_eur}}",
										"kyc",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Consumer GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Consumer Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumers_profile_id\"));",
											"    pm.expect(jsonData.name).to.eql(\"gbpname\");",
											"    pm.expect(jsonData.surname).to.eql(\"gbpsurname\");",
											"    pm.expect(jsonData.email).to.eql(pm.environment.get(\"consumer_email_gbp\"));",
											"    pm.expect(jsonData.active).to.eql(true);",
											"    pm.expect(jsonData.mobileCountryCode).to.eql(\"+356\");",
											"    pm.expect(jsonData.kyc.emailVerified).to.eql(false);",
											"    pm.expect(jsonData.kyc.mobileVerified).to.eql(false);",
											"    pm.expect(jsonData.kyc.fullDueDiligence).to.eql(\"NOT_STARTED\");",
											"    pm.expect(jsonData.kyc.allowedLimits[0].limit.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.kyc.allowedLimits[0].limit.amount).to.eql(\"0\");",
											"    pm.expect(jsonData.kyc.remainingLimits[0].limit.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.kyc.remainingLimits[0].limit.amount).to.eql(\"0\");",
											"    pm.expect(jsonData.baseCurrency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.dateOfBirth.year).to.eql(1986);",
											"    pm.expect(jsonData.dateOfBirth.month).to.eql(3);",
											"    pm.expect(jsonData.dateOfBirth.day).to.eql(18);",
											"    pm.expect(jsonData.address.addressLine1).to.eql(\"AddressLine11\");",
											"    pm.expect(jsonData.address.addressLine2).to.eql(\"AddressLine22\");",
											"    pm.expect(jsonData.address.city).to.eql(\"AddressCity22\");",
											"    pm.expect(jsonData.address.country).to.eql(\"GB\");",
											"    pm.expect(jsonData.address.postCode).to.eql(\"MT1234\");",
											"    pm.expect(jsonData.address.state).to.eql(\"Rab\");",
											"    pm.expect(jsonData.occupation).to.eql(\"ART_ENTERTAINMENT\");",
											"    pm.expect(jsonData.sourceOfFunds).to.eql(\"LOAN_FROM_FINANCIAL_INSTITUTIONS_CREDIT_UNIONS\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "X-TOKEN {{cons_token_gbp}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_gbp}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_gbp}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Consumer USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Consumer Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumers_profile_id\"));",
											"    pm.expect(jsonData.name).to.eql(\"usdname\");",
											"    pm.expect(jsonData.surname).to.eql(\"usdsurname\");",
											"    pm.expect(jsonData.email).to.eql(pm.environment.get(\"consumer_email_usd\"));",
											"    pm.expect(jsonData.active).to.eql(true);",
											"    pm.expect(jsonData.mobileCountryCode).to.eql(\"+356\");",
											"    pm.expect(jsonData.kyc.emailVerified).to.eql(false);",
											"    pm.expect(jsonData.kyc.mobileVerified).to.eql(false);",
											"    pm.expect(jsonData.kyc.fullDueDiligence).to.eql(\"NOT_STARTED\");",
											"    pm.expect(jsonData.kyc.allowedLimits[0].limit.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.kyc.allowedLimits[0].limit.amount).to.eql(\"0\");",
											"    pm.expect(jsonData.kyc.remainingLimits[0].limit.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.kyc.remainingLimits[0].limit.amount).to.eql(\"0\");",
											"    pm.expect(jsonData.baseCurrency).to.eql(\"USD\");",
											"    pm.expect(jsonData.dateOfBirth.year).to.eql(1989);",
											"    pm.expect(jsonData.dateOfBirth.month).to.eql(2);",
											"    pm.expect(jsonData.dateOfBirth.day).to.eql(17);",
											"    pm.expect(jsonData.address.addressLine1).to.eql(\"AddressLine111\");",
											"    pm.expect(jsonData.address.addressLine2).to.eql(\"AddressLine222\");",
											"    pm.expect(jsonData.address.city).to.eql(\"AddressCity222\");",
											"    pm.expect(jsonData.address.country).to.eql(\"IT\");",
											"    pm.expect(jsonData.address.postCode).to.eql(\"MT12345\");",
											"    pm.expect(jsonData.address.state).to.eql(\"Rb\");",
											"    pm.expect(jsonData.occupation).to.eql(\"ART_ENTERTAINMENT\");",
											"    pm.expect(jsonData.sourceOfFunds).to.eql(\"OTHER\");",
											"    pm.expect(jsonData.sourceOfFundsOther).to.eql(\"Other funds\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "X-TOKEN {{cons_token_usd}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_usd}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_usd}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Consumer EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Consumer Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumers_profile_id\"));",
											"    pm.expect(jsonData.name).to.eql(\"eurnameupdated\");",
											"    pm.expect(jsonData.surname).to.eql(\"eursurnameupdated\");",
											"    pm.expect(jsonData.active).to.eql(true);",
											"    pm.expect(jsonData.kyc.emailVerified).to.eql(false);",
											"    pm.expect(jsonData.kyc.mobileVerified).to.eql(false);",
											"    pm.expect(jsonData.baseCurrency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.dateOfBirth.year).to.eql(1980);",
											"    pm.expect(jsonData.dateOfBirth.month).to.eql(6);",
											"    pm.expect(jsonData.dateOfBirth.day).to.eql(20);",
											"    pm.expect(jsonData.address.addressLine1).to.eql(\"AddressLine1_updated\");",
											"    pm.expect(jsonData.address.addressLine2).to.eql(\"AddressLine2_updated\");",
											"    pm.expect(jsonData.address.city).to.eql(\"AddressCity_updated\");",
											"    pm.expect(jsonData.address.country).to.eql(\"PL\");",
											"    pm.expect(jsonData.address.postCode).to.eql(\"MT1234\");",
											"    pm.expect(jsonData.address.state).to.eql(\"Rabat5\");",
											"    pm.expect(jsonData.occupation).to.eql(\"TOBACCO_ALCOHOL\");",
											"    pm.expect(jsonData.sourceOfFunds).to.eql(\"SALE_OF_REAL_ESTATE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"consumer_email_eur_updated\", \"cons\" + _.random(99000000000,99999999999) + \"@fakemail.com\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"eurnameupdated\",\n  \"surname\": \"eursurnameupdated\",\n  \"dateOfBirth\": {\n    \"year\": 1980,\n    \"month\": 6,\n    \"day\": 20\n  },\n  \"address\": {\n    \"addressLine1\": \"AddressLine1_updated\",\n    \"addressLine2\": \"AddressLine2_updated\",\n    \"city\": \"AddressCity_updated\",\n    \"country\": \"PL\",\n    \"postCode\": \"MT1234\",\n    \"state\": \"Rabat5\"\n  },\n  \"occupation\": \"TOBACCO_ALCOHOL\",\n  \"sourceOfFunds\": \"SALE_OF_REAL_ESTATE\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_eur}}/update",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_eur}}",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Consumer GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Consumer Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumers_profile_id\"));",
											"    pm.expect(jsonData.name).to.eql(\"gbpnameupdated\");",
											"    pm.expect(jsonData.surname).to.eql(\"gbpsurnameupdated\");",
											"    pm.expect(jsonData.active).to.eql(true);",
											"    pm.expect(jsonData.kyc.emailVerified).to.eql(false);",
											"    pm.expect(jsonData.kyc.mobileVerified).to.eql(false);",
											"    pm.expect(jsonData.baseCurrency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.dateOfBirth.year).to.eql(1979);",
											"    pm.expect(jsonData.dateOfBirth.month).to.eql(9);",
											"    pm.expect(jsonData.dateOfBirth.day).to.eql(12);",
											"    pm.expect(jsonData.address.addressLine1).to.eql(\"AddressLine1_updated\");",
											"    pm.expect(jsonData.address.addressLine2).to.eql(\"AddressLine2_updated\");",
											"    pm.expect(jsonData.address.city).to.eql(\"AddressCity_updated\");",
											"    pm.expect(jsonData.address.country).to.eql(\"PL\");",
											"    pm.expect(jsonData.address.postCode).to.eql(\"MT1234\");",
											"    pm.expect(jsonData.address.state).to.eql(\"Rabat5\");",
											"    pm.expect(jsonData.occupation).to.eql(\"BANKING_LENDING\");",
											"    pm.expect(jsonData.sourceOfFunds).to.eql(\"SALE_OF_COMPANY_SHARES_BUSINESS\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"consumer_email_gbp_updated\", \"cons\" + _.random(99000000000,99999999999) + \"@fakemail.com\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_gbp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"gbpnameupdated\",\n  \"surname\": \"gbpsurnameupdated\",\n  \"dateOfBirth\": {\n    \"year\": 1979,\n    \"month\": 9,\n    \"day\": 12\n  },\n  \"address\": {\n    \"addressLine1\": \"AddressLine1_updated\",\n    \"addressLine2\": \"AddressLine2_updated\",\n    \"city\": \"AddressCity_updated\",\n    \"country\": \"PL\",\n    \"postCode\": \"MT1234\",\n    \"state\": \"Rabat5\"\n  },\n  \"occupation\": \"BANKING_LENDING\",\n  \"sourceOfFunds\": \"SALE_OF_COMPANY_SHARES_BUSINESS\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_gbp}}/update",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_gbp}}",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Consumer USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Consumer Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumers_profile_id\"));",
											"    pm.expect(jsonData.name).to.eql(\"usdnameupdated\");",
											"    pm.expect(jsonData.surname).to.eql(\"usdsurnameupdated\");",
											"    pm.expect(jsonData.active).to.eql(true);",
											"    pm.expect(jsonData.baseCurrency).to.eql(\"USD\");",
											"    pm.expect(jsonData.dateOfBirth.year).to.eql(1976);",
											"    pm.expect(jsonData.dateOfBirth.month).to.eql(12);",
											"    pm.expect(jsonData.dateOfBirth.day).to.eql(11);",
											"    pm.expect(jsonData.address.addressLine1).to.eql(\"AddressLine1_updated\");",
											"    pm.expect(jsonData.address.addressLine2).to.eql(\"AddressLine2_updated\");",
											"    pm.expect(jsonData.address.city).to.eql(\"AddressCity_updated\");",
											"    pm.expect(jsonData.address.country).to.eql(\"PL\");",
											"    pm.expect(jsonData.address.postCode).to.eql(\"MT1234\");",
											"    pm.expect(jsonData.address.state).to.eql(\"Rabat5\");",
											"    pm.expect(jsonData.occupation).to.eql(\"INFORMATIONAL_TECHNOLOGIES\");",
											"    pm.expect(jsonData.sourceOfFunds).to.eql(\"OTHER\");",
											"    pm.expect(jsonData.sourceOfFundsOther).to.eql(\"OTHER_FUNDS\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"consumer_email_usd_updated\", \"cons\" + _.random(99000000000,99999999999) + \"@fakemail.com\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_usd}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"usdnameupdated\",\n  \"surname\": \"usdsurnameupdated\",\n  \"dateOfBirth\": {\n    \"year\": 1976,\n    \"month\": 12,\n    \"day\": 11\n  },\n  \"address\": {\n    \"addressLine1\": \"AddressLine1_updated\",\n    \"addressLine2\": \"AddressLine2_updated\",\n    \"city\": \"AddressCity_updated\",\n    \"country\": \"PL\",\n    \"postCode\": \"MT1234\",\n    \"state\": \"Rabat5\"\n  },\n  \"occupation\": \"INFORMATIONAL_TECHNOLOGIES\",\n  \"sourceOfFunds\": \"OTHER\",\n  \"sourceOfFundsOther\": \"OTHER_FUNDS\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_usd}}/update",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_usd}}",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Verify Email EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"emailAddress\": \"{{consumer_email_eur}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_eur}}/email/send_verification_code",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_eur}}",
										"email",
										"send_verification_code"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Verify Email GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"emailAddress\": \"{{consumer_email_gbp}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_gbp}}/email/send_verification_code",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_gbp}}",
										"email",
										"send_verification_code"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Verify Email USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"emailAddress\": \"{{consumer_email_usd}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_usd}}/email/send_verification_code",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_usd}}",
										"email",
										"send_verification_code"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Email EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.environment.unset(\"nonce_email\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// For the time being, all nonce emails are 1111.  These are randomised on Production.",
											"pm.environment.set(\"nonce_email\", \"1111\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"emailAddress\": \"{{consumer_email_eur}}\",\n  \"nonce\": \"{{nonce}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_eur}}/email/verify",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_eur}}",
										"email",
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Email GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.environment.unset(\"nonce_email\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// For the time being, all nonce emails are 1111.  These are randomised on Production.",
											"pm.environment.set(\"nonce_email\", \"1111\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"emailAddress\": \"{{consumer_email_gbp}}\",\n  \"nonce\": \"{{nonce}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_gbp}}/email/verify",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_gbp}}",
										"email",
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Email USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.environment.unset(\"nonce_email\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// For the time being, all nonce emails are 1111.  These are randomised on Production.",
											"pm.environment.set(\"nonce_email\", \"1111\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"emailAddress\": \"{{consumer_email_usd}}\",\n  \"nonce\": \"{{nonce}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_usd}}/email/verify",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_usd}}",
										"email",
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Consumer EUR After Verify Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Consumer Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.kyc.emailVerified).to.eql(true);",
											"    pm.expect(jsonData.kyc.mobileVerified).to.eql(false);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "X-TOKEN {{cons_token_eur}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_eur}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_eur}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Consumer GBP After Verify Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Consumer Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.kyc.emailVerified).to.eql(true);",
											"    pm.expect(jsonData.kyc.mobileVerified).to.eql(false);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "X-TOKEN {{cons_token_gbp}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_gbp}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_gbp}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Consumer USD After Verify Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Consumer Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.kyc.emailVerified).to.eql(true);",
											"    pm.expect(jsonData.kyc.mobileVerified).to.eql(false);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "X-TOKEN {{cons_token_usd}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_usd}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_usd}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send verification SMS EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"mobileCountryCode\": \"+356\",\n  \"mobileNumber\": \"{{consumer_mobile_eur}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_eur}}/mobile/send_verification_code",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_eur}}",
										"mobile",
										"send_verification_code"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send verification SMS GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_gbp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"mobileCountryCode\": \"+356\",\n  \"mobileNumber\": \"{{consumer_mobile_gbp}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_gbp}}/mobile/send_verification_code",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_gbp}}",
										"mobile",
										"send_verification_code"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send verification SMS USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_usd}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"mobileCountryCode\": \"+356\",\n  \"mobileNumber\": \"{{consumer_mobile_usd}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_usd}}/mobile/send_verification_code",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_usd}}",
										"mobile",
										"send_verification_code"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify SMS EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"",
											"// We clear nonce as not needed any longer",
											"pm.environment.unset(\"nonce_mobile\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// For the time being, all nonce are 1111.  These are randomised on Production.",
											"pm.environment.set(\"nonce_mobile\", \"1111\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"mobileCountryCode\": \"+356\",\n  \"mobileNumber\": \"{{consumer_mobile_eur}}\",\n  \"nonce\": \"{{nonce}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_eur}}/mobile/verify",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_eur}}",
										"mobile",
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify SMS GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"",
											"// We clear nonce as not needed any longer",
											"pm.environment.unset(\"nonce_mobile\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// For the time being, all nonce are 1111.  These are randomised on Production.",
											"pm.environment.set(\"nonce_mobile\", \"1111\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_gbp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"mobileCountryCode\": \"+356\",\n  \"mobileNumber\": \"{{consumer_mobile_gbp}}\",\n  \"nonce\": \"{{nonce}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_gbp}}/mobile/verify",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_gbp}}",
										"mobile",
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify SMS USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"",
											"// We clear nonce as not needed any longer",
											"pm.environment.unset(\"nonce_mobile\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// For the time being, all nonce are 1111.  These are randomised on Production.",
											"pm.environment.set(\"nonce_mobile\", \"1111\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_usd}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"mobileCountryCode\": \"+356\",\n  \"mobileNumber\": \"{{consumer_mobile_usd}}\",\n  \"nonce\": \"{{nonce}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_usd}}/mobile/verify",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_usd}}",
										"mobile",
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Consumer EUR After Verify SMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Consumer Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.kyc.emailVerified).to.eql(true);",
											"    pm.expect(jsonData.kyc.mobileVerified).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "X-TOKEN {{cons_token_eur}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_eur}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_eur}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Consumer GBP After Verify SMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Consumer Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.kyc.emailVerified).to.eql(true);",
											"    pm.expect(jsonData.kyc.mobileVerified).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "X-TOKEN {{cons_token_gbp}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_gbp}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_gbp}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Consumer USD After Verify SMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Consumer Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.kyc.emailVerified).to.eql(true);",
											"    pm.expect(jsonData.kyc.mobileVerified).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "X-TOKEN {{cons_token_usd}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_usd}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_usd}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Consumer KYC Approval EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{test-server-url}}/api/consumers/{{consumer_id_eur}}/verify",
									"host": [
										"{{test-server-url}}"
									],
									"path": [
										"api",
										"consumers",
										"{{consumer_id_eur}}",
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Consumer KYC Approval GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{test-server-url}}/api/consumers/{{consumer_id_gbp}}/verify",
									"host": [
										"{{test-server-url}}"
									],
									"path": [
										"api",
										"consumers",
										"{{consumer_id_gbp}}",
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Consumer KYC Approval USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{test-server-url}}/api/consumers/{{consumer_id_usd}}/verify",
									"host": [
										"{{test-server-url}}"
									],
									"path": [
										"api",
										"consumers",
										"{{consumer_id_usd}}",
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Consumer EUR After Full Verif",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Consumer Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumers_profile_id\"));",
											"    pm.expect(jsonData.name).to.eql(\"eurnameupdated\");",
											"    pm.expect(jsonData.surname).to.eql(\"eursurnameupdated\");",
											"    pm.expect(jsonData.active).to.eql(true);",
											"    pm.expect(jsonData.kyc.emailVerified).to.eql(true);",
											"    pm.expect(jsonData.kyc.mobileVerified).to.eql(true);",
											"    pm.expect(jsonData.kyc.fullDueDiligence).to.eql(\"APPROVED\");",
											"    pm.expect(jsonData.kyc.allowedLimits[0].limit.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.kyc.allowedLimits[0].limit.amount).to.eql(\"1500000\");",
											"    pm.expect(jsonData.kyc.remainingLimits[0].limit.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.kyc.remainingLimits[0].limit.amount).to.eql(\"1500000\");",
											"    pm.expect(jsonData.baseCurrency).to.eql(\"EUR\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "X-TOKEN {{cons_token_eur}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_eur}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_eur}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Consumer GBP After Full Verif",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Consumer Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumers_profile_id\"));",
											"    pm.expect(jsonData.name).to.eql(\"gbpnameupdated\");",
											"    pm.expect(jsonData.surname).to.eql(\"gbpsurnameupdated\");",
											"    pm.expect(jsonData.active).to.eql(true);",
											"    pm.expect(jsonData.kyc.emailVerified).to.eql(true);",
											"    pm.expect(jsonData.kyc.mobileVerified).to.eql(true);",
											"    pm.expect(jsonData.kyc.fullDueDiligence).to.eql(\"APPROVED\");",
											"    pm.expect(jsonData.kyc.allowedLimits[0].limit.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.kyc.allowedLimits[0].limit.amount).to.eql(\"1350000\");",
											"    pm.expect(jsonData.kyc.remainingLimits[0].limit.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.kyc.remainingLimits[0].limit.amount).to.eql(\"1350000\");",
											"    pm.expect(jsonData.baseCurrency).to.eql(\"GBP\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "X-TOKEN {{cons_token_gbp}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_gbp}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_gbp}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Consumer USD After Full Verif",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Consumer Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumers_profile_id\"));",
											"    pm.expect(jsonData.name).to.eql(\"usdnameupdated\");",
											"    pm.expect(jsonData.surname).to.eql(\"usdsurnameupdated\");",
											"    pm.expect(jsonData.active).to.eql(true);",
											"    pm.expect(jsonData.kyc.emailVerified).to.eql(true);",
											"    pm.expect(jsonData.kyc.mobileVerified).to.eql(true);",
											"    pm.expect(jsonData.kyc.fullDueDiligence).to.eql(\"APPROVED\");",
											"    pm.expect(jsonData.kyc.allowedLimits[0].limit.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.kyc.allowedLimits[0].limit.amount).to.eql(\"1750000\");",
											"    pm.expect(jsonData.kyc.remainingLimits[0].limit.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.kyc.remainingLimits[0].limit.amount).to.eql(\"1750000\");",
											"    pm.expect(jsonData.baseCurrency).to.eql(\"USD\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "X-TOKEN {{cons_token_usd}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_usd}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_usd}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Consumer EUR Consumer Verified",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Consumer Verified\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"CONSUMER_VERIFIED\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tag\": \"eur_tag\",\n  \"name\": \"eurnameupdated\",\n  \"surname\": \"gbpnameupdate\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_eur}}/update",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_eur}}",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Consumer GBP Consumer Verified",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Consumer Verified\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"CONSUMER_VERIFIED\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_gbp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tag\": \"gbp_tag\",\n  \"name\": \"gbpnameupdated\",\n  \"surname\": \"gbpnameupdate\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_gbp}}/update",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_gbp}}",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Consumer USD Consumer Verified",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Consumer Verified\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"CONSUMER_VERIFIED\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_usd}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tag\": \"usd_tag\",\n  \"name\": \"usdnameupdated\",\n  \"surname\": \"usdnameupdate\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_usd}}/update",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_usd}}",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consumer Lost Password USD Start",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{consumer_email_usd}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/lost_password/start",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"lost_password",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consumer Lost Password Validate USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{consumer_email_usd}}\",\n  \"nonce\": \"{{nonce}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/lost_password/validate",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"lost_password",
										"validate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consumer Lost Password Validate Incorrect Nonce",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Error Code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_NONCE_OR_EMAIL\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{consumer_email_usd}}\",\n  \"nonce\": \"{{nonce}}1\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/lost_password/validate",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"lost_password",
										"validate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consumer Lost Password Validate Incorrect  Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Error Code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_NONCE_OR_EMAIL\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"1{{consumer_email_usd}}\",\n  \"nonce\": \"{{nonce}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/lost_password/validate",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"lost_password",
										"validate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consumer Lost Password Resume USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{consumer_email_usd}}\",\n  \"nonce\": \"{{nonce}}\",\n  \"password\": {\n    \"value\": \"Pass1235!\"\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/lost_password/resume",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"lost_password",
										"resume"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login consumer USD After Lost Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"cons_token_usd\", JSON.parse(responseBody).token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "call-ref",
										"type": "text",
										"value": "Login_Consumer",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"{{consumer_email_usd}}\",\n  \"password\": \"Pass1235!\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/login_with_password",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"login_with_password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consumer Change Password  USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": {\n    \"value\": \"Pass1234\"\n  },\n  \"oldPassword\": {\n    \"value\": \"Pass1235!\"\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/{{consumer_id_usd}}/update",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"{{consumer_id_usd}}",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login consumer USD After Password Change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"cons_token_usd\", JSON.parse(responseBody).token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "call-ref",
										"type": "text",
										"value": "Login_Consumer",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"{{consumer_email_usd}}\",\n  \"password\": \"Pass1234\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/login_with_password",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"login_with_password"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "KYC",
					"item": [
						{
							"name": "Create consumer EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"consumer_id_eur\", JSON.parse(responseBody).id.id);",
											"postman.setEnvironmentVariable(\"new_kyc_cons_name_eur\", \"eurname sursurname\");",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Consumer Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumers_profile_id\"));",
											"    pm.expect(jsonData.name).to.eql(\"eurname\");",
											"    pm.expect(jsonData.surname).to.eql(\"sursurname\");",
											"    pm.expect(jsonData.email).to.eql(pm.environment.get(\"consumer_email_eur\"));",
											"    pm.expect(jsonData.active).to.eql(true);",
											"    pm.expect(jsonData.mobileCountryCode).to.eql(\"+356\");",
											"    pm.expect(jsonData.kyc.emailVerified).to.eql(false);",
											"    pm.expect(jsonData.kyc.mobileVerified).to.eql(false);",
											"    pm.expect(jsonData.kyc.fullDueDiligence).to.eql(\"NOT_STARTED\");",
											"    pm.expect(jsonData.kyc.fullDueDiligenceAddressMatched).to.eql(false);",
											"    pm.expect(jsonData.kyc.allowedLimits[0].name).to.eql(\"Velocity Limit\");",
											"    pm.expect(jsonData.kyc.allowedLimits[0].counterValue).to.eql(\"0\");",
											"    pm.expect(jsonData.kyc.allowedLimits[0].limit.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.kyc.allowedLimits[0].limit.amount).to.eql(\"0\");",
											"    pm.expect(jsonData.kyc.remainingLimits[0].name).to.eql(\"Velocity Limit\");",
											"    pm.expect(jsonData.kyc.remainingLimits[0].counterValue).to.eql(\"0\");",
											"    pm.expect(jsonData.kyc.remainingLimits[0].limit.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.kyc.remainingLimits[0].limit.amount).to.eql(\"0\");",
											"    pm.expect(jsonData.baseCurrency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.dateOfBirth.year).to.eql(1987);",
											"    pm.expect(jsonData.dateOfBirth.month).to.eql(1);",
											"    pm.expect(jsonData.dateOfBirth.day).to.eql(15);",
											"    pm.expect(jsonData.address.addressLine1).to.eql(\"AddressLine1\");",
											"    pm.expect(jsonData.address.addressLine2).to.eql(\"AddressLine2\");",
											"    pm.expect(jsonData.address.city).to.eql(\"AddressCity\");",
											"    pm.expect(jsonData.address.country).to.eql(\"MT\");",
											"    pm.expect(jsonData.address.postCode).to.eql(\"MT123\");",
											"    pm.expect(jsonData.address.state).to.eql(\"Rabat\");",
											"    pm.expect(jsonData.occupation).to.eql(\"ACCOUNTING\");",
											"    pm.expect(jsonData.sourceOfFunds).to.eql(\"FAMILY_SAVINGS\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"consumer_email_eur\", \"cons\" + _.random(99000000000,99999999999) + \"@fakemail.com\");",
											"pm.environment.set(\"consumer_mobile_eur\", _.random(99000000,99999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{consumers_profile_id}}\",\n  \"name\": \"eurname\",\n  \"surname\": \"sursurname\",\n  \"email\": \"{{consumer_email_eur}}\",\n  \"credentialCode\": \"{{consumer_email_eur}}\",\n  \"mobileNumber\" : \"{{consumer_mobile_eur}}\",\n  \"mobileCountryCode\":\"+356\",\n  \"baseCurrency\": \"EUR\",\n  \"dateOfBirth\": {\n    \"year\": 1987,\n    \"month\": 1,\n    \"day\": 15\n  },\n  \"address\": {\n    \"addressLine1\": \"AddressLine1\",\n    \"addressLine2\": \"AddressLine2\",\n    \"city\": \"AddressCity\",\n    \"country\": \"MT\",\n    \"postCode\": \"MT123\",\n    \"state\": \"Rabat\"\n  },\n  \"occupation\": \"ACCOUNTING\",\n  \"sourceOfFunds\": \"FAMILY_SAVINGS\"\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create consumer password identity EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{consumers_profile_id}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/identities/{{consumer_id_eur}}/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"identities",
										"{{consumer_id_eur}}",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create consumer password EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Expected Credential\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.credentialType).to.eql(\"ROOT\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"credentialType\": \"ROOT\",\n  \"identityId\": \"{{consumer_id_eur}}\",\n  \"password\": {\n    \"value\": \"Pass1234\"\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/passwords/{{consumer_id_eur}}/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"passwords",
										"{{consumer_id_eur}}",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login consumer EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"cons_token_eur\", JSON.parse(responseBody).token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "call-ref",
										"type": "text",
										"value": "Login_Consumer",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"{{consumer_email_eur}}\",\n  \"password\": \"Pass1234\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/login_with_password",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"login_with_password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consumer EUR Start KYC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"postman.setEnvironmentVariable(\"kyc_reference\", JSON.parse(responseBody).reference);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_eur}}/kyc/start",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_eur}}",
										"kyc",
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consumer EUR KYC Get Params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Details Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.kycProviderKey).to.eql(\"sumsub\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{corp_token_eur}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/consumers/{{consumer_id_eur}}/kyc/params/{{kyc_reference}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"consumers",
										"{{consumer_id_eur}}",
										"kyc",
										"params",
										"{{kyc_reference}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login admin root",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"postman.setEnvironmentVariable(\"admin_token\", JSON.parse(responseBody).token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"admin@weavr.io\",\n  \"password\": {\n    \"value\": \"!Password123!10\"\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/admin/api/gateway/login",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"admin",
										"api",
										"gateway",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Impersonate tenant admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"postman.setEnvironmentVariable(\"tenant_admin_token\", JSON.parse(responseBody).token);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tenantId\": \"{{tenant_id}}\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/admin/api/gateway/switch_tenant",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"admin",
										"api",
										"gateway",
										"switch_tenant"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update KYC Status (to Full Due Diligence Approved)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(function() {",
											" console.log(\"Give time for subscriptions manager to register identity with providers\");",
											"}, 10000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{tenant_admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"emailVerified\": true,\n    \"mobileVerified\": true,\n    \"pep\": \"NO\",\n    \"sanctioned\": \"NO\",\n    \"fullDueDiligence\": \"APPROVED\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/admin/api/consumers_v2/{{consumer_id_eur}}/kyc/update",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"admin",
										"api",
										"consumers_v2",
										"{{consumer_id_eur}}",
										"kyc",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Refresh KYC status Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{tenant_admin_token}}"
									}
								],
								"url": {
									"raw": "{{server-url}}/admin/api/consumers_v2/{{consumer_id_eur}}/kyc/refresh",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"admin",
										"api",
										"consumers_v2",
										"{{consumer_id_eur}}",
										"kyc",
										"refresh"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login innovator root",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"pm_token\", JSON.parse(responseBody).token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function() {",
											" console.log(\"Give time for zookeeper to re-register innovator\");",
											"}, 5000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{innovator_email}}\",\n  \"password\": {\n    \"value\": \"Pass1234!\"\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/innovator/api/gateway/login",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"innovator",
										"api",
										"gateway",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Refresh KYC status Innovator",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{pm_token}}"
									}
								],
								"url": {
									"raw": "{{server-url}}/innovator/api/consumers_v2/{{consumer_id_eur}}/kyc/refresh",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"innovator",
										"api",
										"consumers_v2",
										"{{consumer_id_eur}}",
										"kyc",
										"refresh"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Consumer MA MC",
					"item": [
						{
							"name": "Login consumer Root User EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"cons_token_eur\", JSON.parse(responseBody).token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Corporate Login Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.credential.type).to.eql(\"ROOT\");",
											"    pm.expect(jsonData.identity.type).to.eql(\"consumers\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "call-ref",
										"type": "text",
										"value": "test",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"{{consumer_email_eur}}\",\n  \"password\": \"Pass1234\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/auth/login_with_password",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"auth",
										"login_with_password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create consumer EUR managed account EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"cons_managed_account_id_eur\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"cons_managed_account_id_eur_iban\", JSON.parse(responseBody).bankAccountDetails.iban);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"eur2_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Paynetics AD\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"PATCBGSF\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{consumer_managed_accounts_profile_id}}\",\n  \"owner\": {\n    \"type\": \"consumers\",\n    \"id\": \"{{consumer_id_eur}}\"\n  },\n  \"friendlyName\": \"eur2_account\",\n  \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create consumer EUR managed account GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"cons_managed_account_id_gbp\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"cons_managed_account_id_gbp_iban\", JSON.parse(responseBody).bankAccountDetails.iban);",
											"",
											"postman.setEnvironmentVariable(\"cons_managed_account_id_gbp_paymentreference\", JSON.parse(responseBody).bankAccountDetails.paymentReference);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"gbp_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{consumer_managed_accounts_profile_id}}\",\n  \"owner\": {\n    \"type\": \"consumers\",\n    \"id\": \"{{consumer_id_eur}}\"\n  },\n  \"friendlyName\": \"gbp_account\",\n  \"currency\": \"GBP\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create consumer EUR managed account USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"cons_managed_account_id_usd\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"cons_managed_account_id_usd_iban\", JSON.parse(responseBody).bankAccountDetails.iban);",
											"",
											"postman.setEnvironmentVariable(\"cons_managed_account_id_usd_paymentreference\", JSON.parse(responseBody).bankAccountDetails.paymentReference);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"usd_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{consumer_managed_accounts_profile_id}}\",\n  \"owner\": {\n    \"type\": \"consumers\",\n    \"id\": \"{{consumer_id_eur}}\"\n  },\n  \"friendlyName\": \"usd_account\",\n  \"currency\": \"USD\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 10\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account By ID EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"eur2_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Paynetics AD\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"PATCBGSF\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_eur}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_eur}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account By ID GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"gbp_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_gbp}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_gbp}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account By ID USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"usd_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_usd}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_usd}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Managed Account Deposit EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Code Completed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"COMPLETED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"iban\": \"{{cons_managed_account_id_eur_iban}}\",\n  \"depositAmount\": \n    {\n      \"currency\": \"EUR\",\n      \"amount\": {{deposit_amount}}\n    }\n}"
								},
								"url": {
									"raw": "{{test-server-url}}/api/accounts/deposit",
									"host": [
										"{{test-server-url}}"
									],
									"path": [
										"api",
										"accounts",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Managed Account Deposit GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Code Completed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"COMPLETED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"iban\": \"{{cons_managed_account_id_gbp_iban}}\",\n  \"paymentReference\": \"{{cons_managed_account_id_gbp_paymentreference}}\",\n  \"depositAmount\": \n    {\n      \"currency\": \"GBP\",\n      \"amount\": {{deposit_amount}}\n    }\n  \n}"
								},
								"url": {
									"raw": "{{test-server-url}}/api/accounts/deposit",
									"host": [
										"{{test-server-url}}"
									],
									"path": [
										"api",
										"accounts",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Managed Account Deposit USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Code Completed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"COMPLETED\");",
											"});",
											"",
											"setTimeout(function(){}, 60000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"iban\": \"{{cons_managed_account_id_usd_iban}}\",\n  \"paymentReference\": \"{{cons_managed_account_id_usd_paymentreference}}\",\n  \"depositAmount\": \n    {\n      \"currency\": \"USD\",\n      \"amount\": {{deposit_amount}}\n    }\n  \n}"
								},
								"url": {
									"raw": "{{test-server-url}}/api/accounts/deposit",
									"host": [
										"{{test-server-url}}"
									],
									"path": [
										"api",
										"accounts",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account By ID EUR After Deposit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"eur2_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Paynetics AD\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"PATCBGSF\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_eur}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_eur}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account By ID GBP After Deposit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"gbp_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"   pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_gbp}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_gbp}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account By ID USD After Deposit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"usd_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_usd}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_usd}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account Statement EUR After Deposit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Deposit Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"DEPOSIT\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
											"    pm.expect(jsonData.entry[0].balanceAfter.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
											"    pm.expect(jsonData.entry[0].cardholderFee.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[0].cardholderFee.amount).to.eql(pm.environment.get(\"deposit_fee_eur\"));",
											"    pm.expect(jsonData.count).to.eql(1);",
											"    pm.expect(jsonData.responseCount).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_eur}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_eur}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account Statement GBP After Deposit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Deposit Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"DEPOSIT\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")));",
											"    pm.expect(jsonData.entry[0].balanceAfter.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")));",
											"    pm.expect(jsonData.entry[0].cardholderFee.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[0].cardholderFee.amount).to.eql(pm.environment.get(\"deposit_fee_gbp\"));",
											"    pm.expect(jsonData.count).to.eql(1);",
											"    pm.expect(jsonData.responseCount).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_gbp}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_gbp}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account Statement USD After Deposit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Deposit Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"DEPOSIT\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")));",
											"    pm.expect(jsonData.entry[0].balanceAfter.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")));",
											"    pm.expect(jsonData.entry[0].cardholderFee.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[0].cardholderFee.amount).to.eql(pm.environment.get(\"deposit_fee_usd\"));",
											"    pm.expect(jsonData.count).to.eql(1);",
											"    pm.expect(jsonData.responseCount).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_usd}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_usd}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Managed Account EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_managed_eur\");",
											"    pm.expect(jsonData.tag).to.eql(\"eur_string\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Paynetics AD\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"PATCBGSF\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tag\": \"eur_string\",\n  \"friendlyName\": \"updated_managed_eur\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_eur}}/update",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_eur}}",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Managed Account GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_managed_gbp\");",
											"     pm.expect(jsonData.tag).to.eql(\"gbp_string\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tag\": \"gbp_string\",\n  \"friendlyName\": \"updated_managed_gbp\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_gbp}}/update",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_gbp}}",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Managed Account USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_managed_usd\");",
											"    pm.expect(jsonData.tag).to.eql(\"usd_string\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tag\": \"usd_string\",\n  \"friendlyName\": \"updated_managed_usd\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_usd}}/update",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_usd}}",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Consumer Managed Card EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"cons_managed_card_id_eur\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"cons_managed_card_id_eur_cardNumber\", JSON.parse(responseBody).cardNumber);",
											"",
											"postman.setEnvironmentVariable(\"cons_managed_card_id_eur_cvv\", JSON.parse(responseBody).cvv);",
											"",
											"postman.setEnvironmentVariable(\"cons_managed_card_id_eur_expiryMmyy\", JSON.parse(responseBody).expiryMmyy);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CONSUMER\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{consumer_managed_cards_profile_id}},\n  \"friendlyName\": \"EUR_MANAGED_CARD\",\n  \"currency\": \"EUR\",\n  \"nameOnCard\": \"euro card\",\n  \"cardholderMobileNumber\": \"+35699123123\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Consumer Managed Card GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"cons_managed_card_id_gbp\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"cons_managed_card_id_gbp_cardNumber\", JSON.parse(responseBody).cardNumber);",
											"",
											"postman.setEnvironmentVariable(\"cons_managed_card_id_gbp_cvv\", JSON.parse(responseBody).cvv);",
											"",
											"postman.setEnvironmentVariable(\"cons_managed_card_id_gbp_expiryMmyy\", JSON.parse(responseBody).expiryMmyy);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"gbp card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"GBP_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CONSUMER\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123124\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{consumer_managed_cards_profile_id}},\n  \"owner\": {\n    \"type\": \"consumers\",\n    \"id\": {{consumer_id_eur}}\n   },\n  \"friendlyName\": \"GBP_MANAGED_CARD\",\n  \"currency\": \"GBP\",\n  \"nameOnCard\": \"gbp card\",\n  \"cardholderMobileNumber\": \"+35699123124\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Consumer Managed Card USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"cons_managed_card_id_usd\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"cons_managed_card_id_usd_cardNumber\", JSON.parse(responseBody).cardNumber);",
											"",
											"postman.setEnvironmentVariable(\"cons_managed_card_id_usd_cvv\", JSON.parse(responseBody).cvv);",
											"",
											"postman.setEnvironmentVariable(\"cons_managed_card_id_usd_expiryMmyy\", JSON.parse(responseBody).expiryMmyy);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"usd card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"USD_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CONSUMER\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123125\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{consumer_managed_cards_profile_id}},\n  \"owner\": {\n    \"type\": \"consumers\",\n    \"id\": {{consumer_id_eur}}\n   },\n  \"friendlyName\": \"USD_MANAGED_CARD\",\n  \"currency\": \"USD\",\n  \"nameOnCard\": \"usd card\",\n  \"cardholderMobileNumber\": \"+35699123125\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consumer Managed Card EUR AuthControl Set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blockedMerchantCategories\": [\n    \"7995\"\n  ],\n  \"blockedMerchantIds\": [\n    \"mcGame3\"\n  ],\n  \"allowAtm\": \"FALSE\",\n  \"allowCashback\": \"TRUE\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_eur}}/auth_rule/set",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_eur}}",
										"auth_rule",
										"set"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consumer Managed Card EUR AuthControl Get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blockedMerchantCategories\": [\n    \"7995\"\n  ],\n  \"blockedMerchantIds\": [\n    \"mcGame3\"\n  ],\n  \"allowedMerchantIds\": [\n    \"string\"\n  ],\n  \"allowAtm\": \"FALSE\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_eur}}/auth_rule/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_eur}}",
										"auth_rule",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consumer Managed Card GBP AuthControl Set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blockedMerchantCategories\": [\n    \"7995\"\n  ],\n  \"blockedMerchantIds\": [\n    \"mcGame3\"\n  ],\n  \"allowAtm\": \"FALSE\",\n  \"allowCashback\": \"TRUE\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_gbp}}/auth_rule/set",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_gbp}}",
										"auth_rule",
										"set"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consumer Managed Card GBP AuthControl Get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blockedMerchantCategories\": [\n    \"7995\"\n  ],\n  \"blockedMerchantIds\": [\n    \"mcGame3\"\n  ],\n  \"allowedMerchantIds\": [\n    \"string\"\n  ],\n  \"allowAtm\": \"FALSE\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_gbp}}/auth_rule/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_gbp}}",
										"auth_rule",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consumer Managed Card USD AuthControl Set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blockedMerchantCategories\": [\n    \"7995\"\n  ],\n  \"blockedMerchantIds\": [\n    \"mcGame3\"\n  ],\n  \"allowAtm\": \"FALSE\",\n  \"allowCashback\": \"TRUE\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_usd}}/auth_rule/set",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_usd}}",
										"auth_rule",
										"set"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consumer Managed Card USD AuthControl Get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blockedMerchantCategories\": [\n    \"7995\"\n  ],\n  \"blockedMerchantIds\": [\n    \"mcGame3\"\n  ],\n  \"allowedMerchantIds\": [\n    \"string\"\n  ],\n  \"allowAtm\": \"FALSE\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_usd}}/auth_rule/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_usd}}",
										"auth_rule",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Managed Cards",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.card[0].id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.card[0].owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.card[0].nameOnCard).to.eql(\"usd card\");",
											"    pm.expect(jsonData.card[0].owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.card[0].friendlyName).to.eql(\"USD_MANAGED_CARD\");",
											"    pm.expect(jsonData.card[0].active).to.eql(true);",
											"    pm.expect(jsonData.card[0].currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.card[0].type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.card[0].balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.card[0].balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.card[0].cardLevelClassification).to.eql(\"CONSUMER\");",
											"    pm.expect(jsonData.card[0].cardholderMobileNumber).to.eql(\"+35699123125\");",
											"    pm.expect(jsonData.card[1].id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.card[1].owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.card[1].nameOnCard).to.eql(\"gbp card\");",
											"    pm.expect(jsonData.card[1].owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.card[1].friendlyName).to.eql(\"GBP_MANAGED_CARD\");",
											"    pm.expect(jsonData.card[1].active).to.eql(true);",
											"    pm.expect(jsonData.card[1].currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.card[1].type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.card[1].balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.card[1].balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.card[1].cardLevelClassification).to.eql(\"CONSUMER\");",
											"    pm.expect(jsonData.card[1].cardholderMobileNumber).to.eql(\"+35699123124\");",
											"    pm.expect(jsonData.card[2].id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.card[2].owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.card[2].nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.card[2].owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.card[2].friendlyName).to.eql(\"EUR_MANAGED_CARD\");",
											"    pm.expect(jsonData.card[2].active).to.eql(true);",
											"    pm.expect(jsonData.card[2].currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.card[2].type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.card[2].balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.card[2].balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.card[2].cardLevelClassification).to.eql(\"CONSUMER\");",
											"    pm.expect(jsonData.card[2].cardholderMobileNumber).to.eql(\"+35699123123\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 10\n  },\n  \"owner\": {\n    \"type\": \"consumers\",\n    \"id\": \"{{consumer_id_eur}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Card By ID EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CONSUMER\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_eur}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_eur}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Card By ID GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"gbp card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"GBP_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CONSUMER\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123124\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{corporate_managed_cards_profile_id}},\n  \"ownerId\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_eur}}\n   }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_gbp}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_gbp}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Card By ID USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"usd card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"USD_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CONSUMER\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123125\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{corporate_managed_cards_profile_id}},\n  \"ownerId\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_eur}}\n   }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_usd}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_usd}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Managed Card EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_eur_name\");",
											"    pm.expect(jsonData.tag).to.eql(\"updated_eur_tag\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CONSUMER\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912341\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tag\": \"updated_eur_tag\",\n  \"friendlyName\": \"updated_eur_name\",\n  \"cardholderMobileNumber\": \"+35678912341\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_eur}}/update",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_eur}}",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Managed Card GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"gbp card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_gbp_name\");",
											"    pm.expect(jsonData.tag).to.eql(\"updated_gbp_tag\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CONSUMER\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912342\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tag\": \"updated_gbp_tag\",\n  \"friendlyName\": \"updated_gbp_name\",\n  \"cardholderMobileNumber\": \"+35678912342\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_gbp}}/update",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_gbp}}",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Managed Card USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"usd card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_usd_name\");",
											"    pm.expect(jsonData.tag).to.eql(\"updated_usd_tag\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CONSUMER\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912343\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tag\": \"updated_usd_tag\",\n  \"friendlyName\": \"updated_usd_name\",\n  \"cardholderMobileNumber\": \"+35678912343\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_usd}}/update",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_usd}}",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MA To MC EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transfer Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"transfers\");",
											"    pm.expect(jsonData.source.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.tag).to.eql(\"eur_ma_to_mc\");",
											"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"cons_managed_account_id_eur\"));",
											"    pm.expect(jsonData.destination.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"cons_managed_card_id_eur\"));",
											"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.destinationAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
											"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"eur_ma_to_mc\",\n  \"source\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{cons_managed_account_id_eur}}\n  },\n  \"destination\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{cons_managed_card_id_eur}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"EUR\",\n    \"amount\": {{transfer_send_amount}}\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Card By ID EUR After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_eur_name\");",
											"    pm.expect(jsonData.tag).to.eql(\"updated_eur_tag\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CONSUMER\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912341\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_eur}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_eur}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account By ID EUR After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_managed_eur\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-pm.environment.get(\"transfer_send_fee_eur\")-pm.environment.get(\"transfer_send_amount\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-pm.environment.get(\"transfer_send_fee_eur\")-pm.environment.get(\"transfer_send_amount\")));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Paynetics AD\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"PATCBGSF\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_eur}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_eur}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account Statement EUR After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Transfer Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(JSON.stringify(-pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_fee_eur\")));",
											"    pm.expect(jsonData.entry[0].balanceAfter.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_fee_eur\")));",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentType).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentId).to.eql(pm.environment.get(\"cons_managed_card_id_eur\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentFriendlyName).to.eql(\"updated_eur_name\");",
											"    pm.expect(jsonData.entry[0].cardholderFee.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[0].cardholderFee.amount).to.eql(pm.environment.get(\"transfer_send_fee_eur\"));",
											"    ",
											"    pm.expect(jsonData.entry[1].txId.type).to.eql(\"DEPOSIT\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
											"    pm.expect(jsonData.entry[1].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
											"    pm.expect(jsonData.entry[1].cardholderFee.amount).to.eql(pm.environment.get(\"deposit_fee_eur\"));",
											"",
											"    pm.expect(jsonData.count).to.eql(2);",
											"    pm.expect(jsonData.responseCount).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_eur}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_eur}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Card Statement EUR After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Transfer Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.entry[0].balanceAfter.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentType).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentId).to.eql(pm.environment.get(\"cons_managed_account_id_eur\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentFriendlyName).to.eql(\"updated_managed_eur\");",
											"",
											"    pm.expect(jsonData.count).to.eql(1);",
											"    pm.expect(jsonData.responseCount).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_eur}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_eur}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfers Get MA to MC EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transfer Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.transfer[0].id.type).to.eql(\"transfers\");",
											"    pm.expect(jsonData.transfer[0].source.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.transfer[0].tag).to.eql(\"eur_ma_to_mc\");",
											"    pm.expect(jsonData.transfer[0].source.id).to.eql(pm.environment.get(\"cons_managed_account_id_eur\"));",
											"    pm.expect(jsonData.transfer[0].destination.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.transfer[0].destination.id).to.eql(pm.environment.get(\"cons_managed_card_id_eur\"));",
											"    pm.expect(jsonData.transfer[0].destinationAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.transfer[0].destinationAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.transfer[0].state).to.eql(\"COMPLETED\");",
											"    pm.expect(jsonData.transfer[0].conflict).to.eql(\"NO_ERROR\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tag\": \"eur_ma_to_mc\"\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MA To MC GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transfer Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"transfers\");",
											"    pm.expect(jsonData.source.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"cons_managed_account_id_gbp\"));",
											"    pm.expect(jsonData.destination.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"cons_managed_card_id_gbp\"));",
											"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.destinationAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    ",
											"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
											"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{cons_managed_account_id_gbp}}\n  },\n  \"destination\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{cons_managed_card_id_gbp}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"GBP\",\n    \"amount\": {{transfer_send_amount}}\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Card By ID GBP After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"gbp card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_gbp_name\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CONSUMER\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912342\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n \n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_gbp}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_gbp}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account By ID GBP After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_managed_gbp\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")-pm.environment.get(\"transfer_send_fee_gbp\")-pm.environment.get(\"transfer_send_amount\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")-pm.environment.get(\"transfer_send_fee_gbp\")-pm.environment.get(\"transfer_send_amount\")));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_gbp}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_gbp}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account Statement GBP After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Transfer Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(JSON.stringify(-pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_fee_gbp\")));",
											"    pm.expect(jsonData.entry[0].balanceAfter.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")-pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_fee_gbp\")));",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentType).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentId).to.eql(pm.environment.get(\"cons_managed_card_id_gbp\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentFriendlyName).to.eql(\"updated_gbp_name\");",
											"    pm.expect(jsonData.entry[0].cardholderFee.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[0].cardholderFee.amount).to.eql(pm.environment.get(\"transfer_send_fee_gbp\"));",
											"    ",
											"    pm.expect(jsonData.entry[1].txId.type).to.eql(\"DEPOSIT\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")));",
											"    pm.expect(jsonData.entry[1].balanceAfter.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[1].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")));",
											"    pm.expect(jsonData.entry[1].cardholderFee.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[1].cardholderFee.amount).to.eql(pm.environment.get(\"deposit_fee_gbp\"));",
											"",
											"    pm.expect(jsonData.count).to.eql(2);",
											"    pm.expect(jsonData.responseCount).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_gbp}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_gbp}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Card Statement GBP After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Transfer Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.entry[0].balanceAfter.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentType).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentId).to.eql(pm.environment.get(\"cons_managed_account_id_gbp\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentFriendlyName).to.eql(\"updated_managed_gbp\");",
											"    ",
											"    pm.expect(jsonData.count).to.eql(1);",
											"    pm.expect(jsonData.responseCount).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_gbp}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_gbp}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MA To MC USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transfer Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"transfers\");",
											"    pm.expect(jsonData.source.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"cons_managed_account_id_usd\"));",
											"    pm.expect(jsonData.destination.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"cons_managed_card_id_usd\"));",
											"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.destinationAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    ",
											"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
											"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{cons_managed_account_id_usd}}\n  },\n  \"destination\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{cons_managed_card_id_usd}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"USD\",\n    \"amount\": {{transfer_send_amount}}\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Card By ID USD After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"usd card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_usd_name\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CONSUMER\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912343\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_usd}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_usd}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account By ID USD After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_managed_usd\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")-pm.environment.get(\"transfer_send_fee_usd\")-pm.environment.get(\"transfer_send_amount\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")-pm.environment.get(\"transfer_send_fee_usd\")-pm.environment.get(\"transfer_send_amount\")));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_usd}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_usd}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account Statement USD After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Deposit Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(JSON.stringify(-pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_fee_usd\")));",
											"    pm.expect(jsonData.entry[0].balanceAfter.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")-pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_fee_usd\")));",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentType).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentId).to.eql(pm.environment.get(\"cons_managed_card_id_usd\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentFriendlyName).to.eql(\"updated_usd_name\");",
											"    pm.expect(jsonData.entry[0].cardholderFee.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[0].cardholderFee.amount).to.eql(pm.environment.get(\"transfer_send_fee_usd\"));",
											"    pm.expect(jsonData.entry[1].txId.type).to.eql(\"DEPOSIT\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")));",
											"    pm.expect(jsonData.entry[1].balanceAfter.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[1].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")));",
											"    pm.expect(jsonData.entry[1].cardholderFee.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[1].cardholderFee.amount).to.eql(pm.environment.get(\"deposit_fee_usd\"));",
											"    ",
											"    pm.expect(jsonData.count).to.eql(2);",
											"    pm.expect(jsonData.responseCount).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_usd}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_usd}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Card Statement USD After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Transfer Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.entry[0].balanceAfter.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentType).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentId).to.eql(pm.environment.get(\"cons_managed_account_id_usd\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentFriendlyName).to.eql(\"updated_managed_usd\");",
											"    ",
											"    pm.expect(jsonData.count).to.eql(1);",
											"    pm.expect(jsonData.responseCount).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_usd}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_usd}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MC To MA EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transfer Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"transfers\");",
											"    pm.expect(jsonData.source.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"cons_managed_card_id_eur\"));",
											"    pm.expect(jsonData.destination.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"cons_managed_account_id_eur\"));",
											"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.destinationAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount_mc_to_ma\"));",
											"    ",
											"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
											"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{cons_managed_card_id_eur}}\n  },\n  \"destination\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{cons_managed_account_id_eur}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"EUR\",\n    \"amount\": {{transfer_send_amount_mc_to_ma}}\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Card By ID EUR After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_eur_name\");",
											"    pm.expect(jsonData.tag).to.eql(\"updated_eur_tag\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_eur\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_eur\")));",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CONSUMER\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912341\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_eur}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_eur}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account By ID EUR After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_managed_eur\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-pm.environment.get(\"transfer_send_fee_eur\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-pm.environment.get(\"transfer_send_fee_eur\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Paynetics AD\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"PATCBGSF\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_eur}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_eur}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account Statement EUR After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Transfer Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount_mc_to_ma\"));",
											"    pm.expect(jsonData.entry[0].balanceAfter.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_fee_eur\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentType).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentId).to.eql(pm.environment.get(\"cons_managed_card_id_eur\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentFriendlyName).to.eql(\"updated_eur_name\");",
											"    ",
											"    pm.expect(jsonData.entry[1].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.amount).to.eql(JSON.stringify(-pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_fee_eur\")));",
											"    pm.expect(jsonData.entry[1].balanceAfter.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[1].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_fee_eur\")));",
											"    pm.expect(jsonData.entry[1].additionalFields.destinationInstrumentType).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.entry[1].additionalFields.destinationInstrumentId).to.eql(pm.environment.get(\"cons_managed_card_id_eur\"));",
											"    pm.expect(jsonData.entry[1].additionalFields.destinationInstrumentFriendlyName).to.eql(\"updated_eur_name\");",
											"    pm.expect(jsonData.entry[1].cardholderFee.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[1].cardholderFee.amount).to.eql(pm.environment.get(\"transfer_send_fee_eur\"));",
											"    ",
											"    pm.expect(jsonData.entry[2].txId.type).to.eql(\"DEPOSIT\");",
											"    pm.expect(jsonData.entry[2].transactionAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[2].transactionAmount.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
											"    pm.expect(jsonData.entry[2].balanceAfter.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[2].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
											"    pm.expect(jsonData.entry[2].cardholderFee.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[2].cardholderFee.amount).to.eql(pm.environment.get(\"deposit_fee_eur\"));",
											"    ",
											"    pm.expect(jsonData.count).to.eql(3);",
											"    pm.expect(jsonData.responseCount).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_eur}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_eur}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Card Statement EUR After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Transfer Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(JSON.stringify(-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_eur\")))",
											"    pm.expect(jsonData.entry[0].balanceAfter.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_eur\")));",
											"    pm.expect(jsonData.entry[0].cardholderFee.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[0].cardholderFee.amount).to.eql(pm.environment.get(\"transfer_send_fee_eur\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentType).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentId).to.eql(pm.environment.get(\"cons_managed_account_id_eur\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentFriendlyName).to.eql(\"updated_managed_eur\");",
											"    ",
											"    pm.expect(jsonData.entry[1].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.entry[1].balanceAfter.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[1].balanceAfter.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.entry[1].additionalFields.sourceInstrumentType).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.entry[1].additionalFields.sourceInstrumentId).to.eql(pm.environment.get(\"cons_managed_account_id_eur\"));",
											"    pm.expect(jsonData.entry[1].additionalFields.sourceInstrumentFriendlyName).to.eql(\"updated_managed_eur\");",
											"    ",
											"    pm.expect(jsonData.count).to.eql(2);",
											"    pm.expect(jsonData.responseCount).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_eur}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_eur}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MC To MA GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transfer Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"transfers\");",
											"    pm.expect(jsonData.source.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"cons_managed_card_id_gbp\"));",
											"    pm.expect(jsonData.destination.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"cons_managed_account_id_gbp\"));",
											"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.destinationAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount_mc_to_ma\"));",
											"    ",
											"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
											"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{cons_managed_card_id_gbp}}\n  },\n  \"destination\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{cons_managed_account_id_gbp}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"GBP\",\n    \"amount\": {{transfer_send_amount_mc_to_ma}}\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Card By ID GBP After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"gbp card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_gbp_name\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_gbp\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_gbp\")));",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CONSUMER\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912342\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_gbp}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_gbp}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account By ID GBP After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_managed_gbp\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")-pm.environment.get(\"transfer_send_fee_gbp\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")-pm.environment.get(\"transfer_send_fee_gbp\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_gbp}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_gbp}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account Statement GBP After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Transfer Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount_mc_to_ma\"));",
											"    pm.expect(jsonData.entry[0].balanceAfter.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")-pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_fee_gbp\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentType).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentId).to.eql(pm.environment.get(\"cons_managed_card_id_gbp\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentFriendlyName).to.eql(\"updated_gbp_name\");",
											"    ",
											"    pm.expect(jsonData.entry[1].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.amount).to.eql(JSON.stringify(-pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_fee_gbp\")));",
											"    pm.expect(jsonData.entry[1].balanceAfter.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[1].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")-pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_fee_gbp\")));",
											"    pm.expect(jsonData.entry[1].additionalFields.destinationInstrumentType).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.entry[1].additionalFields.destinationInstrumentId).to.eql(pm.environment.get(\"cons_managed_card_id_gbp\"));",
											"    pm.expect(jsonData.entry[1].additionalFields.destinationInstrumentFriendlyName).to.eql(\"updated_gbp_name\");",
											"    pm.expect(jsonData.entry[1].cardholderFee.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[1].cardholderFee.amount).to.eql(pm.environment.get(\"transfer_send_fee_gbp\"));",
											"    ",
											"    pm.expect(jsonData.entry[2].txId.type).to.eql(\"DEPOSIT\");",
											"    pm.expect(jsonData.entry[2].transactionAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[2].transactionAmount.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")));",
											"    pm.expect(jsonData.entry[2].balanceAfter.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[2].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")));",
											"    pm.expect(jsonData.entry[2].cardholderFee.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[2].cardholderFee.amount).to.eql(pm.environment.get(\"deposit_fee_gbp\"));",
											"    ",
											"    pm.expect(jsonData.count).to.eql(3);",
											"    pm.expect(jsonData.responseCount).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_gbp}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_gbp}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Card Statement GBP After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Transfer Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(JSON.stringify(-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_gbp\")))",
											"    pm.expect(jsonData.entry[0].balanceAfter.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_gbp\")));",
											"    pm.expect(jsonData.entry[0].cardholderFee.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[0].cardholderFee.amount).to.eql(pm.environment.get(\"transfer_send_fee_gbp\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentType).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentId).to.eql(pm.environment.get(\"cons_managed_account_id_gbp\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentFriendlyName).to.eql(\"updated_managed_gbp\");",
											"    ",
											"    pm.expect(jsonData.entry[1].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.entry[1].balanceAfter.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[1].balanceAfter.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.entry[1].additionalFields.sourceInstrumentType).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.entry[1].additionalFields.sourceInstrumentId).to.eql(pm.environment.get(\"cons_managed_account_id_gbp\"));",
											"    pm.expect(jsonData.entry[1].additionalFields.sourceInstrumentFriendlyName).to.eql(\"updated_managed_gbp\");",
											"    ",
											"    pm.expect(jsonData.count).to.eql(2);",
											"    pm.expect(jsonData.responseCount).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_gbp}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_gbp}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MC To MA USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transfer Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"transfers\");",
											"    pm.expect(jsonData.source.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"cons_managed_card_id_usd\"));",
											"    pm.expect(jsonData.destination.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"cons_managed_account_id_usd\"));",
											"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.destinationAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount_mc_to_ma\"));",
											"    ",
											"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
											"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{cons_managed_card_id_usd}}\n  },\n  \"destination\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{cons_managed_account_id_usd}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"USD\",\n    \"amount\": {{transfer_send_amount_mc_to_ma}}\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Card By ID USD After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"usd card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_usd_name\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_usd\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_usd\")));",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CONSUMER\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912343\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{corporate_managed_cards_profile_id}},\n  \"ownerId\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_eur}}\n   }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_usd}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_usd}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account By ID USD After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_managed_usd\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")-pm.environment.get(\"transfer_send_fee_usd\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")-pm.environment.get(\"transfer_send_fee_usd\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_usd}}/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_usd}}",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Account Statement USD After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Transfer Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount_mc_to_ma\"));",
											"    pm.expect(jsonData.entry[0].balanceAfter.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")-pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_fee_usd\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentType).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentId).to.eql(pm.environment.get(\"cons_managed_card_id_usd\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.sourceInstrumentFriendlyName).to.eql(\"updated_usd_name\");",
											"    ",
											"    pm.expect(jsonData.entry[1].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.amount).to.eql(JSON.stringify(-pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_fee_usd\")));",
											"    pm.expect(jsonData.entry[1].balanceAfter.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[1].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")-pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_fee_usd\")));",
											"    pm.expect(jsonData.entry[1].additionalFields.destinationInstrumentType).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.entry[1].additionalFields.destinationInstrumentId).to.eql(pm.environment.get(\"cons_managed_card_id_usd\"));",
											"    pm.expect(jsonData.entry[1].additionalFields.destinationInstrumentFriendlyName).to.eql(\"updated_usd_name\");",
											"    pm.expect(jsonData.entry[1].cardholderFee.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[1].cardholderFee.amount).to.eql(pm.environment.get(\"transfer_send_fee_usd\"));",
											"    ",
											"    pm.expect(jsonData.entry[2].txId.type).to.eql(\"DEPOSIT\");",
											"    pm.expect(jsonData.entry[2].transactionAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[2].transactionAmount.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")));",
											"    pm.expect(jsonData.entry[2].balanceAfter.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[2].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")));",
											"    pm.expect(jsonData.entry[2].cardholderFee.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[2].cardholderFee.amount).to.eql(pm.environment.get(\"deposit_fee_usd\"));",
											"    ",
											"    pm.expect(jsonData.count).to.eql(3);",
											"    pm.expect(jsonData.responseCount).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_usd}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_usd}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Card Statement USD After Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Transfer Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(JSON.stringify(-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_usd\")))",
											"    pm.expect(jsonData.entry[0].balanceAfter.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_usd\")));",
											"    pm.expect(jsonData.entry[0].cardholderFee.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[0].cardholderFee.amount).to.eql(pm.environment.get(\"transfer_send_fee_usd\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentType).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentId).to.eql(pm.environment.get(\"cons_managed_account_id_usd\"));",
											"    pm.expect(jsonData.entry[0].additionalFields.destinationInstrumentFriendlyName).to.eql(\"updated_managed_usd\");",
											"    ",
											"    pm.expect(jsonData.entry[1].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.entry[1].balanceAfter.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[1].balanceAfter.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.entry[1].additionalFields.sourceInstrumentType).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.entry[1].additionalFields.sourceInstrumentId).to.eql(pm.environment.get(\"cons_managed_account_id_usd\"));",
											"    pm.expect(jsonData.entry[1].additionalFields.sourceInstrumentFriendlyName).to.eql(\"updated_managed_usd\");",
											"    ",
											"    pm.expect(jsonData.count).to.eql(2);",
											"    pm.expect(jsonData.responseCount).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_usd}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_usd}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Block Managed Account EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_managed_eur\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-pm.environment.get(\"transfer_send_fee_eur\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-pm.environment.get(\"transfer_send_fee_eur\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Paynetics AD\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"PATCBGSF\");",
											"    pm.expect(jsonData.state.blockTypes.USER).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_eur}}/freeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_eur}}",
										"freeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Block Managed Account GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_managed_gbp\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")-pm.environment.get(\"transfer_send_fee_gbp\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")-pm.environment.get(\"transfer_send_fee_gbp\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"    pm.expect(jsonData.state.blockTypes.USER).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_gbp}}/freeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_gbp}}",
										"freeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Block Managed Account USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_managed_usd\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")-pm.environment.get(\"transfer_send_fee_usd\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")-pm.environment.get(\"transfer_send_fee_usd\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"    pm.expect(jsonData.state.blockTypes.USER).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_usd}}/freeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_usd}}",
										"freeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Block Managed Account EUR Already Frozen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Instrument Already Frozen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INSTRUMENT_ALREADY_FROZEN\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_eur}}/freeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_eur}}",
										"freeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Block Managed Account GBP Already Frozen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Instrument Already Frozen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INSTRUMENT_ALREADY_FROZEN\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_gbp}}/freeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_gbp}}",
										"freeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Block Managed Account USD Already Frozen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Instrument Already Frozen\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INSTRUMENT_ALREADY_FROZEN\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_usd}}/freeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_usd}}",
										"freeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MA To MC EUR After Freeze",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Transfer Block\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"SOURCE_INSTRUMENT_BLOCKED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{cons_managed_account_id_eur}}\n  },\n  \"destination\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{cons_managed_card_id_eur}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"EUR\",\n    \"amount\": 5000\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MA To MC GBP After Freeze",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Transfer Block\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"SOURCE_INSTRUMENT_BLOCKED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{cons_managed_account_id_gbp}}\n  },\n  \"destination\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{cons_managed_card_id_gbp}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"GBP\",\n    \"amount\": 1500\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MA To MC USD After Freeze",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Transfer Block\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"SOURCE_INSTRUMENT_BLOCKED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{cons_managed_account_id_usd}}\n  },\n  \"destination\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{cons_managed_card_id_usd}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"USD\",\n    \"amount\": 2000\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unblock Managed Account EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_managed_eur\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-pm.environment.get(\"transfer_send_fee_eur\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-pm.environment.get(\"transfer_send_fee_eur\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Paynetics AD\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"PATCBGSF\");",
											"    pm.expect(jsonData.state.blockTypes).to.eql({});",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"blockType\": \"USER\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_eur}}/unfreeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_eur}}",
										"unfreeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unblock Managed Account GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_managed_gbp\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")-pm.environment.get(\"transfer_send_fee_gbp\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_gbp\")-pm.environment.get(\"transfer_send_fee_gbp\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"    pm.expect(jsonData.state.blockTypes).to.eql({});",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_gbp}}/unfreeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_gbp}}",
										"unfreeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unblock Managed Account USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_managed_usd\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.balances.availableBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")-pm.environment.get(\"transfer_send_fee_usd\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.balances.actualBalance).to.deep.equal(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_usd\")-pm.environment.get(\"transfer_send_fee_usd\")-pm.environment.get(\"transfer_send_amount\")+Number(pm.environment.get(\"transfer_send_amount_mc_to_ma\"))));",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"    pm.expect(jsonData.state.blockTypes).to.eql({});",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_usd}}/unfreeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_usd}}",
										"unfreeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Block Managed Card EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_eur_name\");",
											"    pm.expect(jsonData.tag).to.eql(\"updated_eur_tag\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_eur\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_eur\")));",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CONSUMER\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912341\");",
											"    pm.expect(jsonData.state.blockTypes.USER.blockTypes.FREEZE).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_eur}}/freeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_eur}}",
										"freeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Block Managed Card GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"gbp card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_gbp_name\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_gbp\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_gbp\")));",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CONSUMER\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912342\");",
											"    pm.expect(jsonData.state.blockTypes.USER.blockTypes.FREEZE).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_gbp}}/freeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_gbp}}",
										"freeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Block Managed Card USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"usd card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_usd_name\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_usd\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_usd\")));",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CONSUMER\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912343\");",
											"    pm.expect(jsonData.state.blockTypes.USER.blockTypes.FREEZE).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{corporate_managed_cards_profile_id}},\n  \"ownerId\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_eur}}\n   }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_usd}}/freeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_usd}}",
										"freeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Block Managed Card EUR Already Frozen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Already Frozen Error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INSTRUMENT_ALREADY_FROZEN\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_eur}}/freeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_eur}}",
										"freeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Block Managed Card GBP Already Frozen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Already Frozen Error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INSTRUMENT_ALREADY_FROZEN\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_gbp}}/freeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_gbp}}",
										"freeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Block Managed Card USD Already Frozen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Already Frozen Error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INSTRUMENT_ALREADY_FROZEN\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{corporate_managed_cards_profile_id}},\n  \"ownerId\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_eur}}\n   }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_usd}}/freeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_usd}}",
										"freeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MC To MA EUR After Freeze",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Account Blocked Error Code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"SOURCE_INSTRUMENT_BLOCKED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{cons_managed_card_id_eur}}\n  },\n  \"destination\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{cons_managed_account_id_eur}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"EUR\",\n    \"amount\": 200\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MC To MA GBP After Freeze",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Account Blocked Error Code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"SOURCE_INSTRUMENT_BLOCKED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{cons_managed_card_id_gbp}}\n  },\n  \"destination\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{cons_managed_account_id_gbp}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"GBP\",\n    \"amount\": 170\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MC To MA USD After Freeze",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Account Blocked Error Code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"SOURCE_INSTRUMENT_BLOCKED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{cons_managed_card_id_usd}}\n  },\n  \"destination\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{cons_managed_account_id_usd}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"USD\",\n    \"amount\": 120\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unblock Managed Card EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_eur_name\");",
											"    pm.expect(jsonData.tag).to.eql(\"updated_eur_tag\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_eur\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_eur\")));",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CONSUMER\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912341\");",
											"    pm.expect(jsonData.state.blockTypes).to.eql({});",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_eur}}/unfreeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_eur}}",
										"unfreeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unblock Managed Card GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"gbp card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_gbp_name\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_gbp\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_gbp\")));",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CONSUMER\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912342\");",
											"    pm.expect(jsonData.state.blockTypes).to.eql({});",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_gbp}}/unfreeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_gbp}}",
										"unfreeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unblock Managed Card USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"usd card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"updated_usd_name\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_usd\")));",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_usd\")));",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CONSUMER\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35678912343\");",
											"    pm.expect(jsonData.state.blockTypes).to.eql({});",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{corporate_managed_cards_profile_id}},\n  \"ownerId\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_eur}}\n   }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_usd}}/unfreeze",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_usd}}",
										"unfreeze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Card Purchase EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Approved\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"APPROVED\");",
											"});",
											"",
											"setTimeout(function(){}, 25000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"value": "{{secret_programme_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardNumber\": \"{{cons_managed_card_id_eur_cardNumber}}\",\n  \"cvv\": \"{{cons_managed_card_id_eur_cvv}}\",\n  \"expiryDate\": \"{{cons_managed_card_id_eur_expiryMmyy}}\",\n  \"merchantName\": \"eur_merchant\",\n  \"transactionAmount\": \n    {\n      \"currency\": \"EUR\",\n      \"amount\": 68\n    }\n}"
								},
								"url": {
									"raw": "{{test-server-url}}/api/cards/purchase",
									"host": [
										"{{test-server-url}}"
									],
									"path": [
										"api",
										"cards",
										"purchase"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Card Purchase GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Approved\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"APPROVED\");",
											"});",
											"",
											"setTimeout(function(){}, 25000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardNumber\": \"{{cons_managed_card_id_gbp_cardNumber}}\",\n  \"cvv\": \"{{cons_managed_card_id_gbp_cvv}}\",\n  \"expiryDate\": \"{{cons_managed_card_id_gbp_expiryMmyy}}\",\n  \"merchantName\": \"gbp_merchant\",\n  \"transactionAmount\": \n    {\n      \"currency\": \"GBP\",\n      \"amount\": 69\n    }\n}"
								},
								"url": {
									"raw": "{{test-server-url}}/api/cards/purchase",
									"host": [
										"{{test-server-url}}"
									],
									"path": [
										"api",
										"cards",
										"purchase"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Card Purchase USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Approved\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"APPROVED\");",
											"});",
											"",
											"setTimeout(function(){}, 25000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardNumber\": \"{{cons_managed_card_id_usd_cardNumber}}\",\n  \"cvv\": \"{{cons_managed_card_id_usd_cvv}}\",\n  \"expiryDate\": \"{{cons_managed_card_id_usd_expiryMmyy}}\",\n  \"merchantName\": \"usd_merchant\",\n  \"transactionAmount\": \n    {\n      \"currency\": \"USD\",\n      \"amount\": 70\n    }\n}"
								},
								"url": {
									"raw": "{{test-server-url}}/api/cards/purchase",
									"host": [
										"{{test-server-url}}"
									],
									"path": [
										"api",
										"cards",
										"purchase"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Card Statement EUR After Auths/Settle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Settlement Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"SETTLEMENT\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(\"-68\");",
											"    pm.expect(jsonData.entry[0].balanceAfter.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_eur\")-68-12));",
											"    pm.expect(jsonData.entry[0].additionalFields.merchantName).to.eql(\"eur_merchant\");",
											"    pm.expect(jsonData.entry[0].additionalFields.merchantCategoryCode).to.eql(\"5399\");",
											"    pm.expect(jsonData.entry[0].additionalFields.merchantTerminalCountry).to.eql(\"MT\");",
											"    pm.expect(jsonData.entry[0].additionalFields.merchantTransactionType).to.eql(\"SALE_PURCHASE\");",
											"    pm.expect(jsonData.entry[0].additionalFields.authorisationRelatedId).to.eql(jsonData.entry[1].txId.id);",
											"    pm.expect(jsonData.entry[1].txId.type).to.eql(\"AUTHORISATION\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.amount).to.eql(\"-68\");",
											"    pm.expect(jsonData.entry[1].balanceAfter.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[1].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_eur\")-68));",
											"    pm.expect(jsonData.entry[1].additionalFields.merchantName).to.eql(\"eur_merchant\");",
											"    pm.expect(jsonData.entry[1].additionalFields.merchantCategoryCode).to.eql(\"5399\");",
											"    pm.expect(jsonData.entry[1].additionalFields.merchantTerminalCountry).to.eql(\"MT\");",
											"    pm.expect(jsonData.entry[1].additionalFields.forexPaddingCurrency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[1].additionalFields.forexPaddingAmount).to.eql(\"0\");",
											"    pm.expect(jsonData.entry[1].additionalFields.authorisationState).to.eql(\"COMPLETED\");",
											"",
											"",
											"",
											"    pm.expect(jsonData.entry[2].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[2].transactionAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[2].transactionAmount.amount).to.eql(JSON.stringify(-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_eur\")));",
											"    pm.expect(jsonData.entry[2].balanceAfter.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[2].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_eur\")));",
											"    pm.expect(jsonData.entry[2].additionalFields.destinationInstrumentType).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.entry[2].additionalFields.destinationInstrumentId).to.eql(pm.environment.get(\"cons_managed_account_id_eur\"));",
											"    pm.expect(jsonData.entry[2].additionalFields.destinationInstrumentFriendlyName).to.eql(\"updated_managed_eur\");",
											"",
											"    pm.expect(jsonData.entry[3].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[3].transactionAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[3].transactionAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.entry[3].balanceAfter.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.entry[3].balanceAfter.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.entry[3].additionalFields.sourceInstrumentType).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.entry[3].additionalFields.sourceInstrumentId).to.eql(pm.environment.get(\"cons_managed_account_id_eur\"));",
											"    pm.expect(jsonData.entry[3].additionalFields.sourceInstrumentFriendlyName).to.eql(\"updated_managed_eur\");",
											"",
											"    pm.expect(jsonData.count).to.eql(4);",
											"    pm.expect(jsonData.responseCount).to.eql(4);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_eur}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_eur}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Card Statement GBP After Auths/Settle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Settlement Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"SETTLEMENT\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(\"-69\");",
											"    pm.expect(jsonData.entry[0].balanceAfter.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_gbp\")-69-10));",
											"    pm.expect(jsonData.entry[0].additionalFields.merchantName).to.eql(\"gbp_merchant\");",
											"    pm.expect(jsonData.entry[0].additionalFields.merchantCategoryCode).to.eql(\"5399\");",
											"    pm.expect(jsonData.entry[0].additionalFields.merchantTerminalCountry).to.eql(\"MT\");",
											"    pm.expect(jsonData.entry[0].additionalFields.merchantTransactionType).to.eql(\"SALE_PURCHASE\");",
											"    pm.expect(jsonData.entry[0].additionalFields.authorisationRelatedId).to.eql(jsonData.entry[1].txId.id);",
											"    pm.expect(jsonData.entry[1].txId.type).to.eql(\"AUTHORISATION\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.amount).to.eql(\"-69\");",
											"    pm.expect(jsonData.entry[1].balanceAfter.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[1].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_gbp\")-69));",
											"    pm.expect(jsonData.entry[1].additionalFields.merchantName).to.eql(\"gbp_merchant\");",
											"    pm.expect(jsonData.entry[1].additionalFields.merchantCategoryCode).to.eql(\"5399\");",
											"    pm.expect(jsonData.entry[1].additionalFields.merchantTerminalCountry).to.eql(\"MT\");",
											"    pm.expect(jsonData.entry[1].additionalFields.forexPaddingCurrency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[1].additionalFields.forexPaddingAmount).to.eql(\"0\");",
											"    pm.expect(jsonData.entry[1].additionalFields.authorisationState).to.eql(\"COMPLETED\");",
											"",
											"",
											"",
											"    pm.expect(jsonData.entry[2].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[2].transactionAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[2].transactionAmount.amount).to.eql(JSON.stringify(-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_gbp\")));",
											"    pm.expect(jsonData.entry[2].balanceAfter.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[2].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_gbp\")));",
											"    pm.expect(jsonData.entry[2].additionalFields.destinationInstrumentType).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.entry[2].additionalFields.destinationInstrumentId).to.eql(pm.environment.get(\"cons_managed_account_id_gbp\"));",
											"    pm.expect(jsonData.entry[2].additionalFields.destinationInstrumentFriendlyName).to.eql(\"updated_managed_gbp\");",
											"",
											"    pm.expect(jsonData.entry[3].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[3].transactionAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[3].transactionAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.entry[3].balanceAfter.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.entry[3].balanceAfter.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.entry[3].additionalFields.sourceInstrumentType).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.entry[3].additionalFields.sourceInstrumentId).to.eql(pm.environment.get(\"cons_managed_account_id_gbp\"));",
											"    pm.expect(jsonData.entry[3].additionalFields.sourceInstrumentFriendlyName).to.eql(\"updated_managed_gbp\");",
											"",
											"    pm.expect(jsonData.count).to.eql(4);",
											"    pm.expect(jsonData.responseCount).to.eql(4);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_gbp}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_gbp}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Managed Card Statement USD After Auths/Settle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Statement With Settlement Correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"SETTLEMENT\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(\"-70\");",
											"    pm.expect(jsonData.entry[0].balanceAfter.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_usd\")-70-14));",
											"    pm.expect(jsonData.entry[0].additionalFields.merchantName).to.eql(\"usd_merchant\");",
											"    pm.expect(jsonData.entry[0].additionalFields.merchantCategoryCode).to.eql(\"5399\");",
											"    pm.expect(jsonData.entry[0].additionalFields.merchantTerminalCountry).to.eql(\"MT\");",
											"    pm.expect(jsonData.entry[0].additionalFields.merchantTransactionType).to.eql(\"SALE_PURCHASE\");",
											"    pm.expect(jsonData.entry[0].additionalFields.authorisationRelatedId).to.eql(jsonData.entry[1].txId.id);",
											"    pm.expect(jsonData.entry[1].txId.type).to.eql(\"AUTHORISATION\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[1].transactionAmount.amount).to.eql(\"-70\");",
											"    pm.expect(jsonData.entry[1].balanceAfter.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[1].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_usd\")-70));",
											"    pm.expect(jsonData.entry[1].additionalFields.merchantName).to.eql(\"usd_merchant\");",
											"    pm.expect(jsonData.entry[1].additionalFields.merchantCategoryCode).to.eql(\"5399\");",
											"    pm.expect(jsonData.entry[1].additionalFields.merchantTerminalCountry).to.eql(\"MT\");",
											"    pm.expect(jsonData.entry[1].additionalFields.forexPaddingCurrency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[1].additionalFields.forexPaddingAmount).to.eql(\"0\");",
											"    pm.expect(jsonData.entry[1].additionalFields.authorisationState).to.eql(\"COMPLETED\");",
											"",
											"",
											"",
											"    pm.expect(jsonData.entry[2].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[2].transactionAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[2].transactionAmount.amount).to.eql(JSON.stringify(-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_usd\")));",
											"    pm.expect(jsonData.entry[2].balanceAfter.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[2].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"transfer_send_amount\")-pm.environment.get(\"transfer_send_amount_mc_to_ma\")-pm.environment.get(\"transfer_send_fee_usd\")));",
											"    pm.expect(jsonData.entry[2].additionalFields.destinationInstrumentType).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.entry[2].additionalFields.destinationInstrumentId).to.eql(pm.environment.get(\"cons_managed_account_id_usd\"));",
											"    pm.expect(jsonData.entry[2].additionalFields.destinationInstrumentFriendlyName).to.eql(\"updated_managed_usd\");",
											"",
											"    pm.expect(jsonData.entry[3].txId.type).to.eql(\"TRANSFER\");",
											"    pm.expect(jsonData.entry[3].transactionAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[3].transactionAmount.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.entry[3].balanceAfter.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.entry[3].balanceAfter.amount).to.eql(pm.environment.get(\"transfer_send_amount\"));",
											"    pm.expect(jsonData.entry[3].additionalFields.sourceInstrumentType).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.entry[3].additionalFields.sourceInstrumentId).to.eql(pm.environment.get(\"cons_managed_account_id_usd\"));",
											"    pm.expect(jsonData.entry[3].additionalFields.sourceInstrumentFriendlyName).to.eql(\"updated_managed_usd\");",
											"",
											"    pm.expect(jsonData.count).to.eql(4);",
											"    pm.expect(jsonData.responseCount).to.eql(4);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_usd}}/statement/get",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_usd}}",
										"statement",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MA To MC EUR After Unblock",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transfer Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"transfers\");",
											"    pm.expect(jsonData.source.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"cons_managed_account_id_eur\"));",
											"    pm.expect(jsonData.destination.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"cons_managed_card_id_eur\"));",
											"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.destinationAmount.amount).to.eql(\"100\");",
											"    ",
											"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
											"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{cons_managed_account_id_eur}}\n  },\n  \"destination\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{cons_managed_card_id_eur}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"EUR\",\n    \"amount\": 100\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MA To MC GBP After Unblock",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transfer Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"transfers\");",
											"    pm.expect(jsonData.source.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"cons_managed_account_id_gbp\"));",
											"    pm.expect(jsonData.destination.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"cons_managed_card_id_gbp\"));",
											"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.destinationAmount.amount).to.eql(\"100\");",
											"    ",
											"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
											"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{cons_managed_account_id_gbp}}\n  },\n  \"destination\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{cons_managed_card_id_gbp}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"GBP\",\n    \"amount\": 100\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MA To MC USD After Unblock",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transfer Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"transfers\");",
											"    pm.expect(jsonData.source.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"cons_managed_account_id_usd\"));",
											"    pm.expect(jsonData.destination.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"cons_managed_card_id_usd\"));",
											"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.destinationAmount.amount).to.eql(\"100\");",
											"    ",
											"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
											"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{cons_managed_account_id_usd}}\n  },\n  \"destination\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{cons_managed_card_id_usd}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"USD\",\n    \"amount\": 100\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MC To MA EUR After Unblock",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transfer Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"transfers\");",
											"    pm.expect(jsonData.source.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"cons_managed_card_id_eur\"));",
											"    pm.expect(jsonData.destination.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"cons_managed_account_id_eur\"));",
											"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.destinationAmount.amount).to.eql(\"100\");",
											"    ",
											"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
											"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{cons_managed_card_id_eur}}\n  },\n  \"destination\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{cons_managed_account_id_eur}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"EUR\",\n    \"amount\": 100\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MC To MA GBP After Unblock",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transfer Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"transfers\");",
											"    pm.expect(jsonData.source.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"cons_managed_card_id_gbp\"));",
											"    pm.expect(jsonData.destination.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"cons_managed_account_id_gbp\"));",
											"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.destinationAmount.amount).to.eql(\"100\");",
											"    ",
											"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
											"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{cons_managed_card_id_gbp}}\n  },\n  \"destination\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{cons_managed_account_id_gbp}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"GBP\",\n    \"amount\": 100\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer MC To MA USD After Unblock",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Transfer Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"transfers\");",
											"    pm.expect(jsonData.source.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"cons_managed_card_id_usd\"));",
											"    pm.expect(jsonData.destination.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"cons_managed_account_id_usd\"));",
											"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.destinationAmount.amount).to.eql(\"100\");",
											"    ",
											"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
											"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{cons_managed_card_id_usd}}\n  },\n  \"destination\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{cons_managed_account_id_usd}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"USD\",\n    \"amount\": 100\n  }\n}\n"
								},
								"url": {
									"raw": "{{server-url}}/app/api/transfers/_/execute",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"transfers",
										"_",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Card EUR Balance Not Zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Balance Not Zero\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"BALANCE_NOT_ZERO\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"destroyType\":\"test\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_eur}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_eur}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Card GBP Balance Not Zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Balance Not Zero\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"BALANCE_NOT_ZERO\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_gbp}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_gbp}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Card USD Balance Not Zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Balance Not Zero\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"BALANCE_NOT_ZERO\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_usd}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_usd}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Account EUR Balance Not Zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Balance Not Zero\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"BALANCE_NOT_ZERO\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_eur}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_eur}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Account GBP Balance Not Zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Balance Not Zero\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"BALANCE_NOT_ZERO\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_gbp}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_gbp}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Account USD Balance Not Zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Balance Not Zero\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"BALANCE_NOT_ZERO\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_usd}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_usd}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create consumer EUR managed account EUR For Destroy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"cons_managed_account_id_eur\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"cons_managed_account_id_eur_iban\", JSON.parse(responseBody).bankAccountDetails.iban);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"eur2_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Paynetics AD\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"PATCBGSF\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "X-TOKEN {{cons_token_eur}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{consumer_managed_accounts_profile_id}}\",\n  \"owner\": {\n    \"type\": \"consumers\",\n    \"id\": \"{{consumer_id_eur}}\"\n  },\n  \"friendlyName\": \"eur2_account\",\n  \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create consumer EUR managed account GBP For Destroy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"cons_managed_account_id_gbp\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"cons_managed_account_id_gbp_iban\", JSON.parse(responseBody).bankAccountDetails.iban);",
											"",
											"postman.setEnvironmentVariable(\"cons_managed_account_id_gbp_paymentreference\", JSON.parse(responseBody).bankAccountDetails.paymentReference);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"gbp_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{consumer_managed_accounts_profile_id}}\",\n  \"owner\": {\n    \"type\": \"consumers\",\n    \"id\": \"{{consumer_id_eur}}\"\n  },\n  \"friendlyName\": \"gbp_account\",\n  \"currency\": \"GBP\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create consumer EUR managed account USD For Destroy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"cons_managed_account_id_usd\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"cons_managed_account_id_usd_iban\", JSON.parse(responseBody).bankAccountDetails.iban);",
											"",
											"postman.setEnvironmentVariable(\"cons_managed_account_id_usd_paymentreference\", JSON.parse(responseBody).bankAccountDetails.paymentReference);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"usd_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": \"{{consumer_managed_accounts_profile_id}}\",\n  \"owner\": {\n    \"type\": \"consumers\",\n    \"id\": \"{{consumer_id_eur}}\"\n  },\n  \"friendlyName\": \"usd_account\",\n  \"currency\": \"USD\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Account EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"eur2_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Paynetics AD\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"PATCBGSF\");",
											"    pm.expect(jsonData.state.destroyType).to.eql(\"USER\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_eur}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_eur}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Account GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"gbp_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"    pm.expect(jsonData.state.destroyType).to.eql(\"USER\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_gbp}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_gbp}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Account USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Account Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
											"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"usd_account\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
											"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Saxo Payments A/S\");",
											"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"SXPYDKKK\");",
											"    pm.expect(jsonData.bankAccountDetails.iban).to.eql(\"GB79246677XXXXXXXXXXXX\");",
											"    pm.expect(jsonData.state.destroyType).to.eql(\"USER\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_usd}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_usd}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Consumer EUR Managed Card EUR For Destroy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"cons_managed_card_id_eur\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"cons_managed_card_id_eur_cardNumber\", JSON.parse(responseBody).cardNumber);",
											"",
											"postman.setEnvironmentVariable(\"cons_managed_card_id_eur_cvv\", JSON.parse(responseBody).cvv);",
											"",
											"postman.setEnvironmentVariable(\"cons_managed_card_id_eur_expiryMmyy\", JSON.parse(responseBody).expiryMmyy);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CONSUMER\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{consumer_managed_cards_profile_id}},\n  \"owner\": {\n    \"type\": \"consumers\",\n    \"id\": {{consumer_id_eur}}\n   },\n  \"friendlyName\": \"EUR_MANAGED_CARD\",\n  \"currency\": \"EUR\",\n  \"nameOnCard\": \"euro card\",\n  \"cardholderMobileNumber\": \"+35699123123\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Consumer EUR Managed Card GBP For Destroy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"cons_managed_card_id_gbp\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"cons_managed_card_id_gbp_cardNumber\", JSON.parse(responseBody).cardNumber);",
											"",
											"postman.setEnvironmentVariable(\"cons_managed_card_id_gbp_cvv\", JSON.parse(responseBody).cvv);",
											"",
											"postman.setEnvironmentVariable(\"cons_managed_card_id_gbp_expiryMmyy\", JSON.parse(responseBody).expiryMmyy);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"gbp card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"GBP_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CONSUMER\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123124\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{consumer_managed_cards_profile_id}},\n  \"owner\": {\n    \"type\": \"consumers\",\n    \"id\": {{consumer_id_eur}}\n   },\n  \"friendlyName\": \"GBP_MANAGED_CARD\",\n  \"currency\": \"GBP\",\n  \"nameOnCard\": \"gbp card\",\n  \"cardholderMobileNumber\": \"+35699123124\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Corporate EUR Managed Card USD For Destroy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"cons_managed_card_id_usd\", JSON.parse(responseBody).id.id);",
											"",
											"postman.setEnvironmentVariable(\"cons_managed_card_id_usd_cardNumber\", JSON.parse(responseBody).cardNumber);",
											"",
											"postman.setEnvironmentVariable(\"cons_managed_card_id_usd_cvv\", JSON.parse(responseBody).cvv);",
											"",
											"postman.setEnvironmentVariable(\"cons_managed_card_id_usd_expiryMmyy\", JSON.parse(responseBody).expiryMmyy);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"usd card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"USD_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CONSUMER\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123125\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"profileId\": {{consumer_managed_cards_profile_id}},\n  \"owner\": {\n    \"type\": \"consumers\",\n    \"id\": {{consumer_id_eur}}\n   },\n  \"friendlyName\": \"USD_MANAGED_CARD\",\n  \"currency\": \"USD\",\n  \"nameOnCard\": \"usd card\",\n  \"cardholderMobileNumber\": \"+35699123125\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/_/create",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"_",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Card EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CONSUMER\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
											"    pm.expect(jsonData.state.destroyType).to.eql(\"USER\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"destroyType\":\"test\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_eur}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_eur}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Card GBP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"gbp card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"GBP_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"GBP\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CONSUMER\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123124\");",
											"    pm.expect(jsonData.state.destroyType).to.eql(\"USER\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_gbp}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_gbp}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Card USD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Managed Card Details\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
											"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
											"    pm.expect(jsonData.nameOnCard).to.eql(\"usd card\");",
											"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
											"    pm.expect(jsonData.friendlyName).to.eql(\"USD_MANAGED_CARD\");",
											"    pm.expect(jsonData.currency).to.eql(\"USD\");",
											"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
											"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
											"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CONSUMER\");",
											"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123125\");",
											"    pm.expect(jsonData.state.destroyType).to.eql(\"USER\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_usd}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_usd}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Card EUR Already Destroy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Already Destroyed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INSTRUMENT_ALREADY_REMOVED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"destroyType\":\"test\"\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_eur}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_eur}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Card USD Already Destroy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Already Destroyed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INSTRUMENT_ALREADY_REMOVED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_usd}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_usd}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Card GBP Already Destroy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Already Destroyed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INSTRUMENT_ALREADY_REMOVED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_gbp}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_cards",
										"{{cons_managed_card_id_gbp}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Account EUR Already Destroy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Already Destroyed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INSTRUMENT_ALREADY_REMOVED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_eur}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_eur}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Account GBP Already Destroy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Already Destroyed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INSTRUMENT_ALREADY_REMOVED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_gbp}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_gbp}}",
										"remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Managed Account USD Already Destroy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Already Destroyed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INSTRUMENT_ALREADY_REMOVED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "programme-key",
										"type": "text",
										"value": "{{secret_programme_key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "X-TOKEN {{cons_token_eur}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_usd}}/remove",
									"host": [
										"{{server-url}}"
									],
									"path": [
										"app",
										"api",
										"managed_accounts",
										"{{cons_managed_account_id_usd}}",
										"remove"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Corporate / Consumer",
			"item": [
				{
					"name": "Login corporate EUR Root User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable(\"corp_token_eur\", JSON.parse(responseBody).token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Corporate Login Details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.credential.type).to.eql(\"ROOT\");",
									"    pm.expect(jsonData.identity.type).to.eql(\"corporates\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "programme-key",
								"value": "{{secret_programme_key}}",
								"type": "text"
							},
							{
								"key": "call-ref",
								"value": "test",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"code\": \"{{corp_name_eur}}\",\n  \"password\": \"Pass1234\"\n}"
						},
						"url": {
							"raw": "{{server-url}}/app/api/auth/login_with_password",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"app",
								"api",
								"auth",
								"login_with_password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login consumer EUR Root User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable(\"cons_token_eur\", JSON.parse(responseBody).token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							},
							{
								"key": "call-ref",
								"type": "text",
								"value": "Login_Consumer",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"code\": \"{{consumer_email_eur}}\",\n  \"password\": \"Pass1234\"\n}"
						},
						"url": {
							"raw": "{{server-url}}/app/api/auth/login_with_password",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"app",
								"api",
								"auth",
								"login_with_password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create corporate EUR managed account EUR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable(\"corp_managed_account_id_eur\", JSON.parse(responseBody).id.id);",
									"",
									"postman.setEnvironmentVariable(\"corp_managed_account_id_eur_iban\", JSON.parse(responseBody).bankAccountDetails.iban);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Managed Account Details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
									"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"corporates_managed_accounts_profile_id\"));",
									"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
									"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
									"    pm.expect(jsonData.friendlyName).to.eql(\"eur2_account\");",
									"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
									"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
									"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
									"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Paynetics AD\");",
									"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"PATCBGSF\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "X-TOKEN {{corp_token_eur}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"profileId\": \"{{corporates_managed_accounts_profile_id}}\",\n  \"owner\": {\n    \"type\": \"corporates\",\n    \"id\": \"{{corporate_id_eur}}\"\n  },\n  \"friendlyName\": \"eur2_account\",\n  \"currency\": \"EUR\"\n}"
						},
						"url": {
							"raw": "{{server-url}}/app/api/managed_accounts/_/create",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"app",
								"api",
								"managed_accounts",
								"_",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create consumer EUR managed account EUR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable(\"cons_managed_account_id_eur\", JSON.parse(responseBody).id.id);",
									"",
									"postman.setEnvironmentVariable(\"cons_managed_account_id_eur_iban\", JSON.parse(responseBody).bankAccountDetails.iban);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Managed Account Details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id.type).to.eql(\"managed_accounts\");",
									"    pm.expect(jsonData.profileId).to.eql(pm.environment.get(\"consumer_managed_accounts_profile_id\"));",
									"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
									"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
									"    pm.expect(jsonData.friendlyName).to.eql(\"eur2_account\");",
									"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
									"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
									"    pm.expect(jsonData.bankAccountDetails.address).to.eql(\"Hill Tower, 76A, James Bourchier Blvd., 1407 Sofia, Bulgaria\");",
									"    pm.expect(jsonData.bankAccountDetails.beneficiaryBank).to.eql(\"Paynetics AD\");",
									"    pm.expect(jsonData.bankAccountDetails.bankIdentifierCode).to.eql(\"PATCBGSF\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{cons_token_eur}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"profileId\": \"{{consumer_managed_accounts_profile_id}}\",\n  \"owner\": {\n    \"type\": \"consumers\",\n    \"id\": \"{{consumer_id_eur}}\"\n  },\n  \"friendlyName\": \"eur2_account\",\n  \"currency\": \"EUR\"\n}"
						},
						"url": {
							"raw": "{{server-url}}/app/api/managed_accounts/_/create",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"app",
								"api",
								"managed_accounts",
								"_",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Simulate Corporate Managed Account Deposit EUR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Code Completed\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"COMPLETED\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"iban\": \"{{corp_managed_account_id_eur_iban}}\",\n  \"depositAmount\": \n    {\n      \"currency\": \"EUR\",\n      \"amount\": {{deposit_amount}}\n    }\n}"
						},
						"url": {
							"raw": "{{test-server-url}}/api/accounts/deposit",
							"host": [
								"{{test-server-url}}"
							],
							"path": [
								"api",
								"accounts",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Simulate consumer Managed Account Deposit EUR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Code Completed\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"COMPLETED\");",
									"});",
									"",
									"setTimeout(function(){}, 120000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"iban\": \"{{cons_managed_account_id_eur_iban}}\",\n  \"depositAmount\": \n    {\n      \"currency\": \"EUR\",\n      \"amount\": {{deposit_amount}}\n    }\n}"
						},
						"url": {
							"raw": "{{test-server-url}}/api/accounts/deposit",
							"host": [
								"{{test-server-url}}"
							],
							"path": [
								"api",
								"accounts",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Corporate EUR Managed Card EUR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable(\"corp_managed_card_id_eur\", JSON.parse(responseBody).id.id);",
									"",
									"postman.setEnvironmentVariable(\"corp_managed_card_id_eur_cardNumber\", JSON.parse(responseBody).cardNumber);",
									"",
									"postman.setEnvironmentVariable(\"corp_managed_card_id_eur_cvv\", JSON.parse(responseBody).cvv);",
									"",
									"postman.setEnvironmentVariable(\"corp_managed_card_id_eur_expiryMmyy\", JSON.parse(responseBody).expiryMmyy);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Managed Card Details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
									"    pm.expect(jsonData.owner.type).to.eql(\"corporates\");",
									"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
									"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"corporate_id_eur\"));",
									"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD\");",
									"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
									"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
									"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
									"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CORPORATE\");",
									"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{corp_token_eur}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"profileId\": {{corporate_managed_cards_profile_id}},\n  \"owner\": {\n    \"type\": \"corporates\",\n    \"id\": {{corporate_id_eur}}\n   },\n  \"friendlyName\": \"EUR_MANAGED_CARD\",\n  \"currency\": \"EUR\",\n  \"nameOnCard\": \"euro card\",\n  \"cardholderMobileNumber\": \"+35699123123\"\n}"
						},
						"url": {
							"raw": "{{server-url}}/app/api/managed_cards/_/create",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"app",
								"api",
								"managed_cards",
								"_",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Consumer EUR Managed Card EUR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable(\"cons_managed_card_id_eur\", JSON.parse(responseBody).id.id);",
									"",
									"postman.setEnvironmentVariable(\"cons_managed_card_id_eur_cardNumber\", JSON.parse(responseBody).cardNumber);",
									"",
									"postman.setEnvironmentVariable(\"cons_managed_card_id_eur_cvv\", JSON.parse(responseBody).cvv);",
									"",
									"postman.setEnvironmentVariable(\"cons_managed_card_id_eur_expiryMmyy\", JSON.parse(responseBody).expiryMmyy);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Managed Card Details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id.type).to.eql(\"managed_cards\");",
									"    pm.expect(jsonData.owner.type).to.eql(\"consumers\");",
									"    pm.expect(jsonData.nameOnCard).to.eql(\"euro card\");",
									"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"consumer_id_eur\"));",
									"    pm.expect(jsonData.friendlyName).to.eql(\"EUR_MANAGED_CARD\");",
									"    pm.expect(jsonData.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.balances.availableBalance).to.eql(\"0\");",
									"    pm.expect(jsonData.balances.actualBalance).to.eql(\"0\");",
									"    pm.expect(jsonData.type).to.eql(\"VIRTUAL\");",
									"    pm.expect(jsonData.cardLevelClassification).to.eql(\"CONSUMER\");",
									"    pm.expect(jsonData.cardholderMobileNumber).to.eql(\"+35699123123\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{cons_token_eur}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"profileId\": {{consumer_managed_cards_profile_id}},\n  \"owner\": {\n    \"type\": \"consumers\",\n    \"id\": {{consumer_id_eur}}\n   },\n  \"friendlyName\": \"EUR_MANAGED_CARD\",\n  \"currency\": \"EUR\",\n  \"nameOnCard\": \"euro card\",\n  \"cardholderMobileNumber\": \"+35699123123\"\n}"
						},
						"url": {
							"raw": "{{server-url}}/app/api/managed_cards/_/create",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"app",
								"api",
								"managed_cards",
								"_",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Corp MA To Cons MA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Transfer Details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id.type).to.eql(\"send\");",
									"    pm.expect(jsonData.source.type).to.eql(\"managed_accounts\");",
									"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"corp_managed_account_id_eur\"));",
									"    pm.expect(jsonData.destination.type).to.eql(\"managed_accounts\");",
									"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"cons_managed_account_id_eur\"));",
									"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.destinationAmount.amount).to.eql(\"5000\");",
									"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
									"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{corp_token_eur}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"profileId\": {{send_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{corp_managed_account_id_eur}}\n  },\n  \"destination\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{cons_managed_account_id_eur}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"EUR\",\n    \"amount\": 5000\n  }\n}"
						},
						"url": {
							"raw": "{{server-url}}/app/api/send/_/execute",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"app",
								"api",
								"send",
								"_",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Corp MA To Cons MC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Transfer Details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id.type).to.eql(\"send\");",
									"    pm.expect(jsonData.source.type).to.eql(\"managed_accounts\");",
									"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"corp_managed_account_id_eur\"));",
									"    pm.expect(jsonData.destination.type).to.eql(\"managed_cards\");",
									"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"cons_managed_card_id_eur\"));",
									"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.destinationAmount.amount).to.eql(\"5000\");",
									"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
									"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{corp_token_eur}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"profileId\": {{send_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{corp_managed_account_id_eur}}\n  },\n  \"destination\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{cons_managed_card_id_eur}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"EUR\",\n    \"amount\": 5000\n  }\n}"
						},
						"url": {
							"raw": "{{server-url}}/app/api/send/_/execute",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"app",
								"api",
								"send",
								"_",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cons MA To Corp MA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Transfer Details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id.type).to.eql(\"send\");",
									"    pm.expect(jsonData.source.type).to.eql(\"managed_accounts\");",
									"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"cons_managed_account_id_eur\"));",
									"    pm.expect(jsonData.destination.type).to.eql(\"managed_accounts\");",
									"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"corp_managed_account_id_eur\"));",
									"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.destinationAmount.amount).to.eql(\"200\");",
									"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
									"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{cons_token_eur}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"profileId\": {{send_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{cons_managed_account_id_eur}}\n  },\n  \"destination\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{corp_managed_account_id_eur}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"EUR\",\n    \"amount\": 200\n  }\n}"
						},
						"url": {
							"raw": "{{server-url}}/app/api/send/_/execute",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"app",
								"api",
								"send",
								"_",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cons MA To Corp MC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Transfer Details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id.type).to.eql(\"send\");",
									"    pm.expect(jsonData.source.type).to.eql(\"managed_accounts\");",
									"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"cons_managed_account_id_eur\"));",
									"    pm.expect(jsonData.destination.type).to.eql(\"managed_cards\");",
									"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"corp_managed_card_id_eur\"));",
									"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.destinationAmount.amount).to.eql(\"2000\");",
									"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
									"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{cons_token_eur}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"profileId\": {{send_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{cons_managed_account_id_eur}}\n  },\n  \"destination\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{corp_managed_card_id_eur}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"EUR\",\n    \"amount\": 2000\n  }\n}"
						},
						"url": {
							"raw": "{{server-url}}/app/api/send/_/execute",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"app",
								"api",
								"send",
								"_",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Corp MC To Cons MA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Transfer Details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id.type).to.eql(\"send\");",
									"    pm.expect(jsonData.source.type).to.eql(\"managed_cards\");",
									"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"corp_managed_card_id_eur\"));",
									"    pm.expect(jsonData.destination.type).to.eql(\"managed_accounts\");",
									"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"cons_managed_account_id_eur\"));",
									"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.destinationAmount.amount).to.eql(\"500\");",
									"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
									"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{corp_token_eur}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"profileId\": {{send_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{corp_managed_card_id_eur}}\n  },\n  \"destination\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{cons_managed_account_id_eur}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"EUR\",\n    \"amount\": 500\n  }\n}"
						},
						"url": {
							"raw": "{{server-url}}/app/api/send/_/execute",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"app",
								"api",
								"send",
								"_",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Corp MC To Cons MC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Transfer Details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id.type).to.eql(\"send\");",
									"    pm.expect(jsonData.source.type).to.eql(\"managed_cards\");",
									"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"corp_managed_card_id_eur\"));",
									"    pm.expect(jsonData.destination.type).to.eql(\"managed_cards\");",
									"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"cons_managed_card_id_eur\"));",
									"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.destinationAmount.amount).to.eql(\"300\");",
									"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
									"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{corp_token_eur}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"profileId\": {{send_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{corp_managed_card_id_eur}}\n  },\n  \"destination\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{cons_managed_card_id_eur}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"EUR\",\n    \"amount\": 300\n  }\n}"
						},
						"url": {
							"raw": "{{server-url}}/app/api/send/_/execute",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"app",
								"api",
								"send",
								"_",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cons MC To Corp MA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Transfer Details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id.type).to.eql(\"send\");",
									"    pm.expect(jsonData.source.type).to.eql(\"managed_cards\");",
									"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"cons_managed_card_id_eur\"));",
									"    pm.expect(jsonData.destination.type).to.eql(\"managed_accounts\");",
									"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"corp_managed_account_id_eur\"));",
									"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.destinationAmount.amount).to.eql(\"200\");",
									"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
									"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{cons_token_eur}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"profileId\": {{send_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{cons_managed_card_id_eur}}\n  },\n  \"destination\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{corp_managed_account_id_eur}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"EUR\",\n    \"amount\": 200\n  }\n}"
						},
						"url": {
							"raw": "{{server-url}}/app/api/send/_/execute",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"app",
								"api",
								"send",
								"_",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cons MC To Corp MC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Transfer Details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id.type).to.eql(\"send\");",
									"    pm.expect(jsonData.source.type).to.eql(\"managed_cards\");",
									"    pm.expect(jsonData.source.id).to.eql(pm.environment.get(\"cons_managed_card_id_eur\"));",
									"    pm.expect(jsonData.destination.type).to.eql(\"managed_cards\");",
									"    pm.expect(jsonData.destination.id).to.eql(pm.environment.get(\"corp_managed_card_id_eur\"));",
									"    pm.expect(jsonData.destinationAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.destinationAmount.amount).to.eql(\"200\");",
									"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
									"    pm.expect(jsonData.conflict).to.eql(\"NO_ERROR\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{cons_token_eur}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"profileId\": {{send_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{cons_managed_card_id_eur}}\n  },\n  \"destination\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{corp_managed_card_id_eur}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"EUR\",\n    \"amount\": 200\n  }\n}"
						},
						"url": {
							"raw": "{{server-url}}/app/api/send/_/execute",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"app",
								"api",
								"send",
								"_",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Cons Managed Account Statement EUR After Send",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Statement With Transfer Correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"SEND\");",
									"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(\"500\");",
									"    pm.expect(jsonData.entry[0].balanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")+Number(5000)-200-Number(pm.environment.get(\"transfer_send_fee_eur\"))-2000-Number(pm.environment.get(\"transfer_send_fee_eur\")) +Number(500)));",
									"    pm.expect(jsonData.entry[0].availableBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[0].availableBalanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")+Number(5000)-200-Number(pm.environment.get(\"transfer_send_fee_eur\"))-2000-Number(pm.environment.get(\"transfer_send_fee_eur\"))+Number(500)));",
									"    pm.expect(jsonData.entry[0].actualBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[0].actualBalanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")+Number(5000)-200-Number(pm.environment.get(\"transfer_send_fee_eur\"))-2000-Number(pm.environment.get(\"transfer_send_fee_eur\"))+Number(500)));",
									"    pm.expect(jsonData.entry[0].availableBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[0].availableBalanceAdjustment.amount).to.eql(JSON.stringify(Number(500)));",
									"    pm.expect(jsonData.entry[0].actualBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[0].actualBalanceAdjustment.amount).to.eql(JSON.stringify(Number(0)));",
									"    pm.expect(jsonData.entry[0].additionalFields.sourceIdentityType).to.eql(\"corporates\");",
									"    pm.expect(jsonData.entry[0].additionalFields.sourceIdentityId).to.eql(pm.environment.get(\"corporate_id_eur\"));",
									"    pm.expect(jsonData.entry[0].additionalFields.sourceIdentityName).to.eql(pm.environment.get(\"corp_name_eur\"));",
									"    pm.expect(jsonData.entry[0].transactionState).to.eql(\"COMPLETED\");",
									"",
									"    pm.expect(jsonData.entry[1].txId.type).to.eql(\"SEND\");",
									"    pm.expect(jsonData.entry[1].transactionAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[1].transactionAmount.amount).to.eql(\"500\");",
									"    pm.expect(jsonData.entry[1].balanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[1].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")+Number(5000)-200-Number(pm.environment.get(\"transfer_send_fee_eur\"))-2000-Number(pm.environment.get(\"transfer_send_fee_eur\"))));",
									"    pm.expect(jsonData.entry[1].availableBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[1].availableBalanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")+Number(5000)-200-Number(pm.environment.get(\"transfer_send_fee_eur\"))-2000-Number(pm.environment.get(\"transfer_send_fee_eur\"))));",
									"    pm.expect(jsonData.entry[1].actualBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[1].actualBalanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")+Number(5000)-200-Number(pm.environment.get(\"transfer_send_fee_eur\"))-2000-Number(pm.environment.get(\"transfer_send_fee_eur\"))+Number(500)));",
									"    pm.expect(jsonData.entry[1].availableBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[1].availableBalanceAdjustment.amount).to.eql(JSON.stringify(Number(0)));",
									"    pm.expect(jsonData.entry[1].actualBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[1].actualBalanceAdjustment.amount).to.eql(JSON.stringify(Number(500)));",
									"    pm.expect(jsonData.entry[1].additionalFields.sourceIdentityType).to.eql(\"corporates\");",
									"    pm.expect(jsonData.entry[1].additionalFields.sourceIdentityId).to.eql(pm.environment.get(\"corporate_id_eur\"));",
									"    pm.expect(jsonData.entry[1].additionalFields.sourceIdentityName).to.eql(pm.environment.get(\"corp_name_eur\"));",
									"    pm.expect(jsonData.entry[1].transactionState).to.eql(\"PENDING\");",
									"    ",
									"    pm.expect(jsonData.entry[2].txId.type).to.eql(\"SEND\");",
									"    pm.expect(jsonData.entry[2].transactionAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[2].transactionAmount.amount).to.eql(\"-2100\");",
									"    pm.expect(jsonData.entry[2].balanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[2].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")+Number(5000)-200-Number(pm.environment.get(\"transfer_send_fee_eur\"))-2000-Number(pm.environment.get(\"transfer_send_fee_eur\"))));",
									"    pm.expect(jsonData.entry[2].availableBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[2].availableBalanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")+Number(5000)-200-Number(pm.environment.get(\"transfer_send_fee_eur\"))-2000-Number(pm.environment.get(\"transfer_send_fee_eur\"))));",
									"    pm.expect(jsonData.entry[2].actualBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[2].actualBalanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")+Number(5000)-200-Number(pm.environment.get(\"transfer_send_fee_eur\"))-2000-Number(pm.environment.get(\"transfer_send_fee_eur\"))));",
									"    pm.expect(jsonData.entry[2].availableBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[2].availableBalanceAdjustment.amount).to.eql(JSON.stringify(-Number(2000+Number(pm.environment.get(\"transfer_send_fee_eur\")))));",
									"    pm.expect(jsonData.entry[2].actualBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[2].actualBalanceAdjustment.amount).to.eql(JSON.stringify(-Number(2000+Number(pm.environment.get(\"transfer_send_fee_eur\")))));",
									"    pm.expect(jsonData.entry[2].cardholderFee.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[2].cardholderFee.amount).to.eql(pm.environment.get(\"transfer_send_fee_eur\"));",
									"    pm.expect(jsonData.entry[2].additionalFields.destinationIdentityType).to.eql(\"corporates\");",
									"    pm.expect(jsonData.entry[2].additionalFields.destinationIdentityId).to.eql(pm.environment.get(\"corporate_id_eur\"));",
									"    pm.expect(jsonData.entry[2].additionalFields.destinationIdentityName).to.eql(pm.environment.get(\"corp_name_eur\"));",
									"    pm.expect(jsonData.entry[2].transactionState).to.eql(\"COMPLETED\");",
									"",
									"    pm.expect(jsonData.entry[3].txId.type).to.eql(\"SEND\");",
									"    pm.expect(jsonData.entry[3].transactionAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[3].transactionAmount.amount).to.eql(\"-300\");",
									"    pm.expect(jsonData.entry[3].balanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[3].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")+Number(5000)-200-Number(pm.environment.get(\"transfer_send_fee_eur\"))));",
									"    pm.expect(jsonData.entry[3].availableBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[3].availableBalanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")+Number(5000)-200-Number(pm.environment.get(\"transfer_send_fee_eur\"))));",
									"    pm.expect(jsonData.entry[3].actualBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[3].actualBalanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")+Number(5000)-200-Number(pm.environment.get(\"transfer_send_fee_eur\"))));",
									"    pm.expect(jsonData.entry[3].availableBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[3].availableBalanceAdjustment.amount).to.eql(JSON.stringify(-Number(200+Number(pm.environment.get(\"transfer_send_fee_eur\")))));",
									"    pm.expect(jsonData.entry[3].actualBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[3].actualBalanceAdjustment.amount).to.eql(JSON.stringify(-Number(200+Number(pm.environment.get(\"transfer_send_fee_eur\")))));",
									"    pm.expect(jsonData.entry[3].cardholderFee.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[3].cardholderFee.amount).to.eql(pm.environment.get(\"transfer_send_fee_eur\"));",
									"    pm.expect(jsonData.entry[3].additionalFields.destinationIdentityType).to.eql(\"corporates\");",
									"    pm.expect(jsonData.entry[3].additionalFields.destinationIdentityId).to.eql(pm.environment.get(\"corporate_id_eur\"));",
									"    pm.expect(jsonData.entry[3].additionalFields.destinationIdentityName).to.eql(pm.environment.get(\"corp_name_eur\"));",
									"    pm.expect(jsonData.entry[3].transactionState).to.eql(\"COMPLETED\");",
									"    ",
									"    pm.expect(jsonData.entry[4].txId.type).to.eql(\"SEND\");",
									"    pm.expect(jsonData.entry[4].transactionAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[4].transactionAmount.amount).to.eql(\"5000\");",
									"    pm.expect(jsonData.entry[4].balanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[4].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")+Number(5000)));",
									"    pm.expect(jsonData.entry[4].availableBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[4].availableBalanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")+Number(5000)));",
									"    pm.expect(jsonData.entry[4].actualBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[4].actualBalanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")+Number(5000)));",
									"    pm.expect(jsonData.entry[4].availableBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[4].availableBalanceAdjustment.amount).to.eql(JSON.stringify(Number(5000)));",
									"    pm.expect(jsonData.entry[4].actualBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[4].actualBalanceAdjustment.amount).to.eql(JSON.stringify(Number(0)));",
									"    pm.expect(jsonData.entry[4].additionalFields.sourceIdentityType).to.eql(\"corporates\");",
									"    pm.expect(jsonData.entry[4].additionalFields.sourceIdentityId).to.eql(pm.environment.get(\"corporate_id_eur\"));",
									"    pm.expect(jsonData.entry[4].additionalFields.sourceIdentityName).to.eql(pm.environment.get(\"corp_name_eur\"));",
									"    pm.expect(jsonData.entry[4].transactionState).to.eql(\"COMPLETED\");",
									"",
									"    pm.expect(jsonData.entry[5].txId.type).to.eql(\"SEND\");",
									"    pm.expect(jsonData.entry[5].transactionAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[5].transactionAmount.amount).to.eql(\"5000\");",
									"    pm.expect(jsonData.entry[5].balanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[5].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
									"    pm.expect(jsonData.entry[5].availableBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[5].availableBalanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
									"    pm.expect(jsonData.entry[5].actualBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[5].actualBalanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")+Number(5000)));",
									"    pm.expect(jsonData.entry[5].availableBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[5].availableBalanceAdjustment.amount).to.eql(JSON.stringify(Number(0)));",
									"    pm.expect(jsonData.entry[5].actualBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[5].actualBalanceAdjustment.amount).to.eql(JSON.stringify(Number(5000)));",
									"    pm.expect(jsonData.entry[5].additionalFields.sourceIdentityType).to.eql(\"corporates\");",
									"    pm.expect(jsonData.entry[5].additionalFields.sourceIdentityId).to.eql(pm.environment.get(\"corporate_id_eur\"));",
									"    pm.expect(jsonData.entry[5].additionalFields.sourceIdentityName).to.eql(pm.environment.get(\"corp_name_eur\"));",
									"    pm.expect(jsonData.entry[5].transactionState).to.eql(\"PENDING\");",
									"    ",
									"    pm.expect(jsonData.entry[6].txId.type).to.eql(\"DEPOSIT\");",
									"    pm.expect(jsonData.entry[6].transactionAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[6].transactionAmount.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
									"    pm.expect(jsonData.entry[6].balanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[6].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
									"    pm.expect(jsonData.entry[6].availableBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[6].availableBalanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
									"    pm.expect(jsonData.entry[6].actualBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[6].actualBalanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
									"    pm.expect(jsonData.entry[6].availableBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[6].availableBalanceAdjustment.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
									"    pm.expect(jsonData.entry[6].actualBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[6].actualBalanceAdjustment.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
									"    pm.expect(jsonData.entry[6].cardholderFee.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[6].cardholderFee.amount).to.eql(pm.environment.get(\"deposit_fee_eur\"));",
									"    pm.expect(jsonData.entry[6].transactionState).to.eql(\"COMPLETED\");",
									"    ",
									"    pm.expect(jsonData.count).to.eql(7);",
									"    pm.expect(jsonData.responseCount).to.eql(7);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{cons_token_eur}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
						},
						"url": {
							"raw": "{{server-url}}/app/api/managed_accounts/{{cons_managed_account_id_eur}}/statement/get",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"app",
								"api",
								"managed_accounts",
								"{{cons_managed_account_id_eur}}",
								"statement",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Cons Managed Card Statement EUR After Send",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Statement With Transfer Correct\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"SEND\");",
									"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(\"-300\");",
									"    pm.expect(jsonData.entry[0].balanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(+Number(5000)+Number(300)-Number(200)-pm.environment.get(\"deposit_fee_eur\")-Number(200)-pm.environment.get(\"deposit_fee_eur\")));",
									"    pm.expect(jsonData.entry[0].availableBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[0].availableBalanceAfter.amount).to.eql(JSON.stringify(Number(5000)+Number(300)-Number(200)-pm.environment.get(\"deposit_fee_eur\")-Number(200)-pm.environment.get(\"deposit_fee_eur\")));",
									"    pm.expect(jsonData.entry[0].actualBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[0].actualBalanceAfter.amount).to.eql(JSON.stringify(Number(5000)+Number(300)-Number(200)-pm.environment.get(\"deposit_fee_eur\")-Number(200)-pm.environment.get(\"deposit_fee_eur\")));",
									"    pm.expect(jsonData.entry[0].availableBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[0].availableBalanceAdjustment.amount).to.eql(JSON.stringify(-Number(200)-pm.environment.get(\"deposit_fee_eur\")));",
									"    pm.expect(jsonData.entry[0].actualBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[0].actualBalanceAdjustment.amount).to.eql(JSON.stringify(-Number(200)-pm.environment.get(\"deposit_fee_eur\")));",
									"    pm.expect(jsonData.entry[0].additionalFields.destinationIdentityType).to.eql(\"corporates\");",
									"    pm.expect(jsonData.entry[0].additionalFields.destinationIdentityId).to.eql(pm.environment.get(\"corporate_id_eur\"));",
									"    pm.expect(jsonData.entry[0].additionalFields.destinationIdentityName).to.eql(pm.environment.get(\"corp_name_eur\"));",
									"    pm.expect(jsonData.entry[0].transactionState).to.eql(\"COMPLETED\");",
									"",
									"    pm.expect(jsonData.entry[1].txId.type).to.eql(\"SEND\");",
									"    pm.expect(jsonData.entry[1].transactionAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[1].transactionAmount.amount).to.eql(\"-300\");",
									"    pm.expect(jsonData.entry[1].balanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[1].balanceAfter.amount).to.eql(JSON.stringify(+Number(5000)+Number(300)-Number(200)-pm.environment.get(\"deposit_fee_eur\")));",
									"    pm.expect(jsonData.entry[1].availableBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[1].availableBalanceAfter.amount).to.eql(JSON.stringify(Number(5000)+Number(300)-Number(200)-pm.environment.get(\"deposit_fee_eur\")));",
									"    pm.expect(jsonData.entry[1].actualBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[1].actualBalanceAfter.amount).to.eql(JSON.stringify(Number(5000)+Number(300)-Number(200)-pm.environment.get(\"deposit_fee_eur\")));",
									"    pm.expect(jsonData.entry[1].availableBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[1].availableBalanceAdjustment.amount).to.eql(JSON.stringify(-Number(200)-pm.environment.get(\"deposit_fee_eur\")));",
									"    pm.expect(jsonData.entry[1].actualBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[1].actualBalanceAdjustment.amount).to.eql(JSON.stringify(-Number(200)-pm.environment.get(\"deposit_fee_eur\")));",
									"    pm.expect(jsonData.entry[1].additionalFields.destinationIdentityType).to.eql(\"corporates\");",
									"    pm.expect(jsonData.entry[1].additionalFields.destinationIdentityId).to.eql(pm.environment.get(\"corporate_id_eur\"));",
									"    pm.expect(jsonData.entry[1].additionalFields.destinationIdentityName).to.eql(pm.environment.get(\"corp_name_eur\"));",
									"    pm.expect(jsonData.entry[1].transactionState).to.eql(\"COMPLETED\");",
									"",
									"    pm.expect(jsonData.entry[2].txId.type).to.eql(\"SEND\");",
									"    pm.expect(jsonData.entry[2].transactionAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[2].transactionAmount.amount).to.eql(\"300\");",
									"    pm.expect(jsonData.entry[2].balanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[2].balanceAfter.amount).to.eql(JSON.stringify(+Number(5000)+Number(300)));",
									"    pm.expect(jsonData.entry[2].availableBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[2].availableBalanceAfter.amount).to.eql(JSON.stringify(Number(5000)+Number(300)));",
									"    pm.expect(jsonData.entry[2].actualBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[2].actualBalanceAfter.amount).to.eql(JSON.stringify(Number(5000)+Number(300)));",
									"    pm.expect(jsonData.entry[2].availableBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[2].availableBalanceAdjustment.amount).to.eql(JSON.stringify(Number(300)));",
									"    pm.expect(jsonData.entry[2].actualBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[2].actualBalanceAdjustment.amount).to.eql(JSON.stringify(Number(0)));",
									"    pm.expect(jsonData.entry[2].additionalFields.sourceIdentityType).to.eql(\"corporates\");",
									"    pm.expect(jsonData.entry[2].additionalFields.sourceIdentityId).to.eql(pm.environment.get(\"corporate_id_eur\"));",
									"    pm.expect(jsonData.entry[2].additionalFields.sourceIdentityName).to.eql(pm.environment.get(\"corp_name_eur\"));",
									"    pm.expect(jsonData.entry[2].transactionState).to.eql(\"COMPLETED\");",
									"",
									"    pm.expect(jsonData.entry[3].txId.type).to.eql(\"SEND\");",
									"    pm.expect(jsonData.entry[3].transactionAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[3].transactionAmount.amount).to.eql(\"300\");",
									"    pm.expect(jsonData.entry[3].balanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[3].balanceAfter.amount).to.eql(JSON.stringify(Number(5000)));",
									"    pm.expect(jsonData.entry[3].availableBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[3].availableBalanceAfter.amount).to.eql(JSON.stringify(Number(5000)));",
									"    pm.expect(jsonData.entry[3].actualBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[3].actualBalanceAfter.amount).to.eql(JSON.stringify(Number(5000)+Number(300)));",
									"    pm.expect(jsonData.entry[3].availableBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[3].availableBalanceAdjustment.amount).to.eql(JSON.stringify(Number(0)));",
									"    pm.expect(jsonData.entry[3].actualBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[3].actualBalanceAdjustment.amount).to.eql(JSON.stringify(Number(300)));",
									"    pm.expect(jsonData.entry[3].additionalFields.sourceIdentityType).to.eql(\"corporates\");",
									"    pm.expect(jsonData.entry[3].additionalFields.sourceIdentityId).to.eql(pm.environment.get(\"corporate_id_eur\"));",
									"    pm.expect(jsonData.entry[3].additionalFields.sourceIdentityName).to.eql(pm.environment.get(\"corp_name_eur\"));",
									"    pm.expect(jsonData.entry[3].transactionState).to.eql(\"PENDING\");",
									"    ",
									"    pm.expect(jsonData.entry[4].txId.type).to.eql(\"SEND\");",
									"    pm.expect(jsonData.entry[4].transactionAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[4].transactionAmount.amount).to.eql(\"5000\");",
									"    pm.expect(jsonData.entry[4].balanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[4].balanceAfter.amount).to.eql(JSON.stringify(+Number(5000)));",
									"    pm.expect(jsonData.entry[4].availableBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[4].availableBalanceAfter.amount).to.eql(JSON.stringify(Number(5000)));",
									"    pm.expect(jsonData.entry[4].actualBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[4].actualBalanceAfter.amount).to.eql(JSON.stringify(Number(5000)));",
									"    pm.expect(jsonData.entry[4].availableBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[4].availableBalanceAdjustment.amount).to.eql(JSON.stringify(Number(5000)));",
									"    pm.expect(jsonData.entry[4].actualBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[4].actualBalanceAdjustment.amount).to.eql(JSON.stringify(Number(0)));",
									"    pm.expect(jsonData.entry[4].additionalFields.sourceIdentityType).to.eql(\"corporates\");",
									"    pm.expect(jsonData.entry[4].additionalFields.sourceIdentityId).to.eql(pm.environment.get(\"corporate_id_eur\"));",
									"    pm.expect(jsonData.entry[4].additionalFields.sourceIdentityName).to.eql(pm.environment.get(\"corp_name_eur\"));",
									"    pm.expect(jsonData.entry[4].transactionState).to.eql(\"COMPLETED\");",
									"",
									"    pm.expect(jsonData.entry[5].txId.type).to.eql(\"SEND\");",
									"    pm.expect(jsonData.entry[5].transactionAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[5].transactionAmount.amount).to.eql(\"5000\");",
									"    pm.expect(jsonData.entry[5].balanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[5].balanceAfter.amount).to.eql(JSON.stringify(0));",
									"    pm.expect(jsonData.entry[5].availableBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[5].availableBalanceAfter.amount).to.eql(JSON.stringify(0));",
									"    pm.expect(jsonData.entry[5].actualBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[5].actualBalanceAfter.amount).to.eql(JSON.stringify(Number(5000)));",
									"    pm.expect(jsonData.entry[5].availableBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[5].availableBalanceAdjustment.amount).to.eql(JSON.stringify(Number(0)));",
									"    pm.expect(jsonData.entry[5].actualBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[5].actualBalanceAdjustment.amount).to.eql(JSON.stringify(Number(5000)));",
									"    pm.expect(jsonData.entry[5].additionalFields.sourceIdentityType).to.eql(\"corporates\");",
									"    pm.expect(jsonData.entry[5].additionalFields.sourceIdentityId).to.eql(pm.environment.get(\"corporate_id_eur\"));",
									"    pm.expect(jsonData.entry[5].additionalFields.sourceIdentityName).to.eql(pm.environment.get(\"corp_name_eur\"));",
									"    pm.expect(jsonData.entry[5].transactionState).to.eql(\"PENDING\");",
									"    ",
									"    pm.expect(jsonData.count).to.eql(6);",
									"    pm.expect(jsonData.responseCount).to.eql(6); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{cons_token_eur}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
						},
						"url": {
							"raw": "{{server-url}}/app/api/managed_cards/{{cons_managed_card_id_eur}}/statement/get",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"app",
								"api",
								"managed_cards",
								"{{cons_managed_card_id_eur}}",
								"statement",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Corp Managed Account Statement EUR After Send",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Statement With Transfer Correct\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"        pm.expect(jsonData.entry[0].txId.type).to.eql(\"SEND\");",
									"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(\"200\");",
									"    pm.expect(jsonData.entry[0].balanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))+Number(200)+Number(200)));",
									"    pm.expect(jsonData.entry[0].availableBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[0].availableBalanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))+Number(200)+Number(200)));",
									"    pm.expect(jsonData.entry[0].actualBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[0].actualBalanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))+Number(200)+Number(200)));",
									"    pm.expect(jsonData.entry[0].availableBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[0].availableBalanceAdjustment.amount).to.eql(JSON.stringify(Number(200)));",
									"    pm.expect(jsonData.entry[0].actualBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[0].actualBalanceAdjustment.amount).to.eql(JSON.stringify(0));",
									"    pm.expect(jsonData.entry[0].additionalFields.sourceIdentityType).to.eql(\"consumers\");",
									"    pm.expect(jsonData.entry[0].additionalFields.sourceIdentityId).to.eql(pm.environment.get(\"consumer_id_eur\"));",
									"    pm.expect(jsonData.entry[0].additionalFields.sourceIdentityName).to.eql(pm.environment.get(\"new_kyc_cons_name_eur\"));",
									"    pm.expect(jsonData.entry[0].transactionState).to.eql(\"COMPLETED\");",
									"",
									"    pm.expect(jsonData.entry[1].txId.type).to.eql(\"SEND\");",
									"    pm.expect(jsonData.entry[1].transactionAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[1].transactionAmount.amount).to.eql(\"200\");",
									"    pm.expect(jsonData.entry[1].balanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[1].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))+Number(200)));",
									"    pm.expect(jsonData.entry[1].availableBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[1].availableBalanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))+Number(200)));",
									"    pm.expect(jsonData.entry[1].actualBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[1].actualBalanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))+Number(200)+Number(200)));",
									"    pm.expect(jsonData.entry[1].availableBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[1].availableBalanceAdjustment.amount).to.eql(JSON.stringify(-Number(0)));",
									"    pm.expect(jsonData.entry[1].actualBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[1].actualBalanceAdjustment.amount).to.eql(JSON.stringify(Number(200)));",
									"    pm.expect(jsonData.entry[1].additionalFields.sourceIdentityType).to.eql(\"consumers\");",
									"    pm.expect(jsonData.entry[1].additionalFields.sourceIdentityId).to.eql(pm.environment.get(\"consumer_id_eur\"));",
									"    pm.expect(jsonData.entry[1].additionalFields.sourceIdentityName).to.eql(pm.environment.get(\"new_kyc_cons_name_eur\"));",
									"    pm.expect(jsonData.entry[1].transactionState).to.eql(\"PENDING\");",
									"",
									"    pm.expect(jsonData.entry[2].txId.type).to.eql(\"SEND\");",
									"    pm.expect(jsonData.entry[2].transactionAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[2].transactionAmount.amount).to.eql(\"200\");",
									"    pm.expect(jsonData.entry[2].balanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[2].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))+Number(200)));",
									"    pm.expect(jsonData.entry[2].availableBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[2].availableBalanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))+Number(200)));",
									"    pm.expect(jsonData.entry[2].actualBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[2].actualBalanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))+Number(200)));",
									"    pm.expect(jsonData.entry[2].availableBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[2].availableBalanceAdjustment.amount).to.eql(JSON.stringify(Number(200)));",
									"    pm.expect(jsonData.entry[2].actualBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[2].actualBalanceAdjustment.amount).to.eql(JSON.stringify(0));",
									"    pm.expect(jsonData.entry[2].additionalFields.sourceIdentityType).to.eql(\"consumers\");",
									"    pm.expect(jsonData.entry[2].additionalFields.sourceIdentityId).to.eql(pm.environment.get(\"consumer_id_eur\"));",
									"    pm.expect(jsonData.entry[2].additionalFields.sourceIdentityName).to.eql(pm.environment.get(\"new_kyc_cons_name_eur\"));",
									"    pm.expect(jsonData.entry[2].transactionState).to.eql(\"COMPLETED\");",
									"",
									"    pm.expect(jsonData.entry[3].txId.type).to.eql(\"SEND\");",
									"    pm.expect(jsonData.entry[3].transactionAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[3].transactionAmount.amount).to.eql(\"200\");",
									"    pm.expect(jsonData.entry[3].balanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[3].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))));",
									"    pm.expect(jsonData.entry[3].availableBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[3].availableBalanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))));",
									"    pm.expect(jsonData.entry[3].actualBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[3].actualBalanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))+200));",
									"    pm.expect(jsonData.entry[3].availableBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[3].availableBalanceAdjustment.amount).to.eql(JSON.stringify(-Number(0)));",
									"    pm.expect(jsonData.entry[3].actualBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[3].actualBalanceAdjustment.amount).to.eql(JSON.stringify(Number(200)));",
									"    pm.expect(jsonData.entry[3].additionalFields.sourceIdentityType).to.eql(\"consumers\");",
									"    pm.expect(jsonData.entry[3].additionalFields.sourceIdentityId).to.eql(pm.environment.get(\"consumer_id_eur\"));",
									"    pm.expect(jsonData.entry[3].additionalFields.sourceIdentityName).to.eql(pm.environment.get(\"new_kyc_cons_name_eur\"));",
									"    pm.expect(jsonData.entry[3].transactionState).to.eql(\"PENDING\");",
									"",
									"    pm.expect(jsonData.entry[4].transactionAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[4].transactionAmount.amount).to.eql(\"-5100\");",
									"    pm.expect(jsonData.entry[4].balanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[4].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))));",
									"    pm.expect(jsonData.entry[4].availableBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[4].availableBalanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))));",
									"    pm.expect(jsonData.entry[4].actualBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[4].actualBalanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))));",
									"    pm.expect(jsonData.entry[4].availableBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[4].availableBalanceAdjustment.amount).to.eql(JSON.stringify(-Number(5000+Number(pm.environment.get(\"transfer_send_fee_eur\")))));",
									"    pm.expect(jsonData.entry[4].actualBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[4].actualBalanceAdjustment.amount).to.eql(JSON.stringify(-Number(5000+Number(pm.environment.get(\"transfer_send_fee_eur\")))));",
									"    pm.expect(jsonData.entry[4].cardholderFee.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[4].cardholderFee.amount).to.eql(pm.environment.get(\"transfer_send_fee_eur\"));",
									"    pm.expect(jsonData.entry[4].additionalFields.destinationIdentityType).to.eql(\"consumers\");",
									"    pm.expect(jsonData.entry[4].additionalFields.destinationIdentityId).to.eql(pm.environment.get(\"consumer_id_eur\"));",
									"    pm.expect(jsonData.entry[4].additionalFields.destinationIdentityName).to.eql(pm.environment.get(\"new_kyc_cons_name_eur\"));",
									"",
									"    pm.expect(jsonData.entry[5].txId.type).to.eql(\"SEND\");",
									"    pm.expect(jsonData.entry[5].transactionAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[5].transactionAmount.amount).to.eql(\"-5100\");",
									"    pm.expect(jsonData.entry[5].balanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[5].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))));",
									"    pm.expect(jsonData.entry[5].availableBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[5].availableBalanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))));",
									"    pm.expect(jsonData.entry[5].actualBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[5].actualBalanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")-5000-Number(pm.environment.get(\"transfer_send_fee_eur\"))));",
									"    pm.expect(jsonData.entry[5].availableBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[5].availableBalanceAdjustment.amount).to.eql(JSON.stringify(-Number(5000+Number(pm.environment.get(\"transfer_send_fee_eur\")))));",
									"    pm.expect(jsonData.entry[5].actualBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[5].actualBalanceAdjustment.amount).to.eql(JSON.stringify(-Number(5000+Number(pm.environment.get(\"transfer_send_fee_eur\")))));",
									"    pm.expect(jsonData.entry[5].cardholderFee.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[5].cardholderFee.amount).to.eql(pm.environment.get(\"transfer_send_fee_eur\"));",
									"    pm.expect(jsonData.entry[5].additionalFields.destinationIdentityType).to.eql(\"consumers\");",
									"    pm.expect(jsonData.entry[5].additionalFields.destinationIdentityId).to.eql(pm.environment.get(\"consumer_id_eur\"));",
									"    pm.expect(jsonData.entry[5].additionalFields.destinationIdentityName).to.eql(pm.environment.get(\"new_kyc_cons_name_eur\"));",
									"    pm.expect(jsonData.entry[5].transactionState).to.eql(\"COMPLETED\");",
									"    ",
									"    pm.expect(jsonData.entry[6].txId.type).to.eql(\"DEPOSIT\");",
									"    pm.expect(jsonData.entry[6].transactionAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[6].transactionAmount.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
									"    pm.expect(jsonData.entry[6].balanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[6].balanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
									"    pm.expect(jsonData.entry[6].availableBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[6].availableBalanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
									"    pm.expect(jsonData.entry[6].actualBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[6].actualBalanceAfter.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
									"    pm.expect(jsonData.entry[6].availableBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[6].availableBalanceAdjustment.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
									"    pm.expect(jsonData.entry[6].actualBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[6].actualBalanceAdjustment.amount).to.eql(JSON.stringify(pm.environment.get(\"deposit_amount\")-pm.environment.get(\"deposit_fee_eur\")));",
									"    pm.expect(jsonData.entry[6].cardholderFee.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[6].cardholderFee.amount).to.eql(pm.environment.get(\"deposit_fee_eur\"));",
									"    pm.expect(jsonData.entry[6].transactionState).to.eql(\"COMPLETED\");",
									"    ",
									"    pm.expect(jsonData.count).to.eql(7);",
									"    pm.expect(jsonData.responseCount).to.eql(7);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{corp_token_eur}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
						},
						"url": {
							"raw": "{{server-url}}/app/api/managed_accounts/{{corp_managed_account_id_eur}}/statement/get",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"app",
								"api",
								"managed_accounts",
								"{{corp_managed_account_id_eur}}",
								"statement",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Corp Managed Card Statement EUR After Send",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Statement With Transfer Correct\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.entry[0].txId.type).to.eql(\"SEND\");",
									"    pm.expect(jsonData.entry[0].transactionAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[0].transactionAmount.amount).to.eql(\"200\");",
									"    pm.expect(jsonData.entry[0].balanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[0].balanceAfter.amount).to.eql(JSON.stringify(Number(2000)-500-Number(pm.environment.get(\"transfer_send_fee_eur\"))-300-Number(pm.environment.get(\"transfer_send_fee_eur\"))+Number(200)));",
									"    pm.expect(jsonData.entry[0].availableBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[0].availableBalanceAfter.amount).to.eql(JSON.stringify(Number(2000)-500-Number(pm.environment.get(\"transfer_send_fee_eur\"))-300-Number(pm.environment.get(\"transfer_send_fee_eur\"))+Number(200)));",
									"    pm.expect(jsonData.entry[0].actualBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[0].actualBalanceAfter.amount).to.eql(JSON.stringify(Number(2000)-500-Number(pm.environment.get(\"transfer_send_fee_eur\"))-300-Number(pm.environment.get(\"transfer_send_fee_eur\"))+Number(200)));",
									"    pm.expect(jsonData.entry[0].availableBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[0].availableBalanceAdjustment.amount).to.eql(JSON.stringify(Number(200)));",
									"    pm.expect(jsonData.entry[0].actualBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[0].actualBalanceAdjustment.amount).to.eql(JSON.stringify(Number(0)));",
									"    pm.expect(jsonData.entry[0].additionalFields.sourceIdentityType).to.eql(\"consumers\");",
									"    pm.expect(jsonData.entry[0].additionalFields.sourceIdentityId).to.eql(pm.environment.get(\"consumer_id_eur\"));",
									"    pm.expect(jsonData.entry[0].additionalFields.sourceIdentityName).to.eql(pm.environment.get(\"new_kyc_cons_name_eur\"));",
									"    pm.expect(jsonData.entry[0].transactionState).to.eql(\"COMPLETED\");",
									"",
									"    pm.expect(jsonData.entry[1].txId.type).to.eql(\"SEND\");",
									"    pm.expect(jsonData.entry[1].transactionAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[1].transactionAmount.amount).to.eql(\"200\");",
									"    pm.expect(jsonData.entry[1].balanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[1].balanceAfter.amount).to.eql(JSON.stringify(Number(2000)-500-Number(pm.environment.get(\"transfer_send_fee_eur\"))-300-Number(pm.environment.get(\"transfer_send_fee_eur\"))));",
									"    pm.expect(jsonData.entry[1].availableBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[1].availableBalanceAfter.amount).to.eql(JSON.stringify(Number(2000)-500-Number(pm.environment.get(\"transfer_send_fee_eur\"))-300-Number(pm.environment.get(\"transfer_send_fee_eur\"))));",
									"    pm.expect(jsonData.entry[1].actualBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[1].actualBalanceAfter.amount).to.eql(JSON.stringify(Number(2000)-500-Number(pm.environment.get(\"transfer_send_fee_eur\"))-300-Number(pm.environment.get(\"transfer_send_fee_eur\"))+Number(200)));",
									"    pm.expect(jsonData.entry[1].availableBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[1].availableBalanceAdjustment.amount).to.eql(JSON.stringify(Number(0)));",
									"    pm.expect(jsonData.entry[1].actualBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[1].actualBalanceAdjustment.amount).to.eql(JSON.stringify(Number(200)));",
									"    pm.expect(jsonData.entry[1].additionalFields.sourceIdentityType).to.eql(\"consumers\");",
									"    pm.expect(jsonData.entry[1].additionalFields.sourceIdentityId).to.eql(pm.environment.get(\"consumer_id_eur\"));",
									"    pm.expect(jsonData.entry[1].additionalFields.sourceIdentityName).to.eql(pm.environment.get(\"new_kyc_cons_name_eur\"));",
									"    pm.expect(jsonData.entry[1].transactionState).to.eql(\"PENDING\");",
									"",
									"    pm.expect(jsonData.entry[2].txId.type).to.eql(\"SEND\");",
									"    pm.expect(jsonData.entry[2].transactionAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[2].transactionAmount.amount).to.eql(\"-400\");",
									"    pm.expect(jsonData.entry[2].balanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[2].balanceAfter.amount).to.eql(JSON.stringify(Number(2000)-500-Number(pm.environment.get(\"transfer_send_fee_eur\"))-300-Number(pm.environment.get(\"transfer_send_fee_eur\"))));",
									"    pm.expect(jsonData.entry[2].availableBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[2].availableBalanceAfter.amount).to.eql(JSON.stringify(Number(2000)-500-Number(pm.environment.get(\"transfer_send_fee_eur\"))-300-Number(pm.environment.get(\"transfer_send_fee_eur\"))));",
									"    pm.expect(jsonData.entry[2].actualBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[2].actualBalanceAfter.amount).to.eql(JSON.stringify(Number(2000)-500-Number(pm.environment.get(\"transfer_send_fee_eur\"))-300-Number(pm.environment.get(\"transfer_send_fee_eur\"))));",
									"    pm.expect(jsonData.entry[2].availableBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[2].availableBalanceAdjustment.amount).to.eql(JSON.stringify(-Number(300+Number(pm.environment.get(\"transfer_send_fee_eur\")))));",
									"    pm.expect(jsonData.entry[2].actualBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[2].actualBalanceAdjustment.amount).to.eql(JSON.stringify(-Number(300+Number(pm.environment.get(\"transfer_send_fee_eur\")))));",
									"    pm.expect(jsonData.entry[2].cardholderFee.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[2].cardholderFee.amount).to.eql(pm.environment.get(\"transfer_send_fee_eur\"));",
									"    pm.expect(jsonData.entry[2].additionalFields.destinationIdentityType).to.eql(\"consumers\");",
									"    pm.expect(jsonData.entry[2].additionalFields.destinationIdentityId).to.eql(pm.environment.get(\"consumer_id_eur\"));",
									"    pm.expect(jsonData.entry[2].additionalFields.destinationIdentityName).to.eql(pm.environment.get(\"new_kyc_cons_name_eur\"));",
									"    pm.expect(jsonData.entry[2].transactionState).to.eql(\"COMPLETED\");",
									"",
									"    pm.expect(jsonData.entry[3].txId.type).to.eql(\"SEND\");",
									"    pm.expect(jsonData.entry[3].transactionAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[3].transactionAmount.amount).to.eql(\"-600\");",
									"    pm.expect(jsonData.entry[3].balanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[3].balanceAfter.amount).to.eql(JSON.stringify(Number(2000)-500-Number(pm.environment.get(\"transfer_send_fee_eur\"))));",
									"    pm.expect(jsonData.entry[3].availableBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[3].availableBalanceAfter.amount).to.eql(JSON.stringify(Number(2000)-500-Number(pm.environment.get(\"transfer_send_fee_eur\"))));",
									"    pm.expect(jsonData.entry[3].actualBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[3].actualBalanceAfter.amount).to.eql(JSON.stringify(Number(2000)-500-Number(pm.environment.get(\"transfer_send_fee_eur\"))));",
									"    pm.expect(jsonData.entry[3].availableBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[3].availableBalanceAdjustment.amount).to.eql(JSON.stringify(-Number(500+Number(pm.environment.get(\"transfer_send_fee_eur\")))));",
									"    pm.expect(jsonData.entry[3].actualBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[3].actualBalanceAdjustment.amount).to.eql(JSON.stringify(-Number(500+Number(pm.environment.get(\"transfer_send_fee_eur\")))));",
									"    pm.expect(jsonData.entry[3].cardholderFee.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[3].cardholderFee.amount).to.eql(pm.environment.get(\"transfer_send_fee_eur\"));",
									"    pm.expect(jsonData.entry[3].additionalFields.destinationIdentityType).to.eql(\"consumers\");",
									"    pm.expect(jsonData.entry[3].additionalFields.destinationIdentityId).to.eql(pm.environment.get(\"consumer_id_eur\"));",
									"    pm.expect(jsonData.entry[3].additionalFields.destinationIdentityName).to.eql(pm.environment.get(\"new_kyc_cons_name_eur\"));",
									"    pm.expect(jsonData.entry[3].transactionState).to.eql(\"COMPLETED\");",
									"    ",
									"    pm.expect(jsonData.entry[4].txId.type).to.eql(\"SEND\");",
									"    pm.expect(jsonData.entry[4].transactionAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[4].transactionAmount.amount).to.eql(\"2000\");",
									"    pm.expect(jsonData.entry[4].balanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[4].balanceAfter.amount).to.eql(JSON.stringify(Number(2000)));",
									"    pm.expect(jsonData.entry[4].availableBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[4].availableBalanceAfter.amount).to.eql(JSON.stringify(Number(2000)));",
									"    pm.expect(jsonData.entry[4].actualBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[4].actualBalanceAfter.amount).to.eql(JSON.stringify(Number(2000)));",
									"    pm.expect(jsonData.entry[4].availableBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[4].availableBalanceAdjustment.amount).to.eql(JSON.stringify(Number(2000)));",
									"    pm.expect(jsonData.entry[4].actualBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[4].actualBalanceAdjustment.amount).to.eql(JSON.stringify(Number(0)));",
									"    pm.expect(jsonData.entry[4].additionalFields.sourceIdentityType).to.eql(\"consumers\");",
									"    pm.expect(jsonData.entry[4].additionalFields.sourceIdentityId).to.eql(pm.environment.get(\"consumer_id_eur\"));",
									"    pm.expect(jsonData.entry[4].additionalFields.sourceIdentityName).to.eql(pm.environment.get(\"new_kyc_cons_name_eur\"));",
									"    pm.expect(jsonData.entry[4].transactionState).to.eql(\"COMPLETED\");",
									"",
									"    pm.expect(jsonData.entry[5].txId.type).to.eql(\"SEND\");",
									"    pm.expect(jsonData.entry[5].transactionAmount.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[5].transactionAmount.amount).to.eql(\"2000\");",
									"    pm.expect(jsonData.entry[5].balanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[5].balanceAfter.amount).to.eql(JSON.stringify(0));",
									"    pm.expect(jsonData.entry[5].availableBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[5].availableBalanceAfter.amount).to.eql(JSON.stringify(0));",
									"    pm.expect(jsonData.entry[5].actualBalanceAfter.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[5].actualBalanceAfter.amount).to.eql(JSON.stringify(Number(2000)));",
									"    pm.expect(jsonData.entry[5].availableBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[5].availableBalanceAdjustment.amount).to.eql(JSON.stringify(Number(0)));",
									"    pm.expect(jsonData.entry[5].actualBalanceAdjustment.currency).to.eql(\"EUR\");",
									"    pm.expect(jsonData.entry[5].actualBalanceAdjustment.amount).to.eql(JSON.stringify(Number(2000)));",
									"    pm.expect(jsonData.entry[5].additionalFields.sourceIdentityType).to.eql(\"consumers\");",
									"    pm.expect(jsonData.entry[5].additionalFields.sourceIdentityId).to.eql(pm.environment.get(\"consumer_id_eur\"));",
									"    pm.expect(jsonData.entry[5].additionalFields.sourceIdentityName).to.eql(pm.environment.get(\"new_kyc_cons_name_eur\"));",
									"    pm.expect(jsonData.entry[5].transactionState).to.eql(\"PENDING\");",
									"    ",
									"    pm.expect(jsonData.count).to.eql(6);",
									"    pm.expect(jsonData.responseCount).to.eql(6);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{corp_token_eur}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 0\n  }\n}"
						},
						"url": {
							"raw": "{{server-url}}/app/api/managed_cards/{{corp_managed_card_id_eur}}/statement/get",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"app",
								"api",
								"managed_cards",
								"{{corp_managed_card_id_eur}}",
								"statement",
								"get"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Backoffice",
			"item": [
				{
					"name": "Charge Custom Fee Managed Account Backoffice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"if (pm.environment.get(\"server-url\") == 'api.build.weavr.io') {",
									"    pm.test(\"Response time is less than 800ms\", function () {",
									"        pm.expect(pm.response.responseTime).to.be.below(800);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{corp_token}}",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"source\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{corp_managed_account_id_eur}}\n  },\n  \"feeType\": \"PRINTED_CARD_ACCOUNT_STATEMENT\"\n}"
						},
						"url": {
							"raw": "{{server-url}}/backoffice/api/bo/corporates/{{corporate_id_eur}}/charge_fee",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"backoffice",
								"api",
								"bo",
								"corporates",
								"{{corporate_id_eur}}",
								"charge_fee"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Managed Accounts EUR Corporate Backoffice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.environment.get(\"server-url\") == 'api.build.weavr.io') {",
									"    pm.test(\"Response time is less than 200ms\", function () {",
									"        pm.expect(pm.response.responseTime).to.be.below(200);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 10\n  },\n  \"owner\": {\n    \"type\": \"corporates\",\n    \"id\": \"{{corporate_id_eur}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{server-url}}/backoffice/api/bo/managed_accounts/{{corp_managed_account_id_eur}}/get",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"backoffice",
								"api",
								"bo",
								"managed_accounts",
								"{{corp_managed_account_id_eur}}",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Managed Accounts EUR Corporate Statement Backoffice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.environment.get(\"server-url\") == 'api.build.weavr.io') {",
									"    pm.test(\"Response time is less than 200ms\", function () {",
									"        pm.expect(pm.response.responseTime).to.be.below(200);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 10\n  },\n  \"owner\": {\n    \"type\": \"corporates\",\n    \"id\": \"{{corporate_id_eur}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{server-url}}/backoffice/api/bo/managed_accounts/{{corp_managed_account_id_eur}}/statement/get",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"backoffice",
								"api",
								"bo",
								"managed_accounts",
								"{{corp_managed_account_id_eur}}",
								"statement",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Managed Cards EUR Corporate Backoffice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.environment.get(\"server-url\") == 'api.build.weavr.io') {",
									"    pm.test(\"Response time is less than 200ms\", function () {",
									"        pm.expect(pm.response.responseTime).to.be.below(200);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n}"
						},
						"url": {
							"raw": "{{server-url}}/backoffice/api/bo/managed_cards/{{corp_managed_card_id_eur}}/get",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"backoffice",
								"api",
								"bo",
								"managed_cards",
								"{{corp_managed_card_id_eur}}",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Managed Cards EUR Corporate Backoffice Statement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.environment.get(\"server-url\") == 'api.build.weavr.io') {",
									"    pm.test(\"Response time is less than 200ms\", function () {",
									"        pm.expect(pm.response.responseTime).to.be.below(200);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n}"
						},
						"url": {
							"raw": "{{server-url}}/backoffice/api/bo/managed_cards/{{corp_managed_card_id_eur}}/statement/get",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"backoffice",
								"api",
								"bo",
								"managed_cards",
								"{{corp_managed_card_id_eur}}",
								"statement",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Managed Cards EUR Consumer Backoffice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.environment.get(\"server-url\") == 'api.build.weavr.io') {",
									"    pm.test(\"Response time is less than 200ms\", function () {",
									"        pm.expect(pm.response.responseTime).to.be.below(200);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{server-url}}/backoffice/api/bo/managed_cards/{{cons_managed_card_id_eur}}/get",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"backoffice",
								"api",
								"bo",
								"managed_cards",
								"{{cons_managed_card_id_eur}}",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Managed Cards EUR Corporate Statement Backoffice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.environment.get(\"server-url\") == 'api.build.weavr.io') {",
									"    pm.test(\"Response time is less than 200ms\", function () {",
									"        pm.expect(pm.response.responseTime).to.be.below(200);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 10\n  },\n  \"owner\": {\n    \"type\": \"corporates\",\n    \"id\": \"{{corporate_id_eur}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{server-url}}/backoffice/api/bo/managed_cards/{{corp_managed_card_id_eur}}/statement/get",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"backoffice",
								"api",
								"bo",
								"managed_cards",
								"{{corp_managed_card_id_eur}}",
								"statement",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Managed Cards EUR Consumer Statement Backoffice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.environment.get(\"server-url\") == 'api.build.weavr.io') {",
									"    pm.test(\"Response time is less than 200ms\", function () {",
									"        pm.expect(pm.response.responseTime).to.be.below(200);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 10\n  },\n  \"owner\": {\n    \"type\": \"corporates\",\n    \"id\": \"{{corporate_id_eur}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{server-url}}/backoffice/api/bo/managed_cards/{{cons_managed_card_id_eur}}/statement/get",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"backoffice",
								"api",
								"bo",
								"managed_cards",
								"{{cons_managed_card_id_eur}}",
								"statement",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login admin root",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"postman.setEnvironmentVariable(\"admin_token\", JSON.parse(responseBody).token);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin@weavr.io\",\n  \"password\": {\n    \"value\": \"!Password123!10\"\n  }\n}"
						},
						"url": {
							"raw": "{{server-url}}/admin/api/gateway/login",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"admin",
								"api",
								"gateway",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update transfers profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{admin_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"allowUnsecuredTransfers\" : \"TRUE\"\n}"
						},
						"url": {
							"raw": "{{server-url}}/admin/api/transfers_v2/programmes/{{programme_id}}/profiles/{{transfers_profile_id}}/update",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"admin",
								"api",
								"transfers_v2",
								"programmes",
								"{{programme_id}}",
								"profiles",
								"{{transfers_profile_id}}",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Transfer MA To MC EUR Corporate Backoffice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.environment.get(\"server-url\") == 'api.build.weavr.io') {",
									"    pm.test(\"Response time is less than 200ms\", function () {",
									"        pm.expect(pm.response.responseTime).to.be.below(200);",
									"    });",
									"}",
									"",
									"postman.setEnvironmentVariable(\"corp_transfer_ma_mc_id_eur\", JSON.parse(responseBody).id.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"profileId\": {{transfers_profile_id}},\n  \"tag\": \"string\",\n  \"source\": {\n    \"type\": \"managed_accounts\",\n    \"id\": {{corp_managed_account_id_eur}}\n  },\n  \"destination\": {\n    \"type\": \"managed_cards\",\n    \"id\": {{corp_managed_card_id_eur}}\n  },\n  \"destinationAmount\": {\n    \"currency\": \"EUR\",\n    \"amount\": {{transfer_send_amount}}\n  }\n}\n"
						},
						"url": {
							"raw": "{{server-url}}/backoffice/api/bo/transfers/_/execute",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"backoffice",
								"api",
								"bo",
								"transfers",
								"_",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Transfer MA To MC EUR Corporate Backoffice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.environment.get(\"server-url\") == 'api.build.weavr.io') {",
									"    pm.test(\"Response time is less than 200ms\", function () {",
									"        pm.expect(pm.response.responseTime).to.be.below(200);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"paging\": {\n    \"count\": true,\n    \"offset\": 0,\n    \"limit\": 10\n  },\n  \"owner\": {\n    \"type\": \"corporates\",\n    \"id\": \"{{corporate_id_eur}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{server-url}}/backoffice/api/bo/transfers/{{corp_transfer_ma_mc_id_eur}}/get",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"backoffice",
								"api",
								"bo",
								"transfers",
								"{{corp_transfer_ma_mc_id_eur}}",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update transfers profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{admin_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"allowUnsecuredTransfers\" : \"FALSE\"\n}"
						},
						"url": {
							"raw": "{{server-url}}/admin/api/transfers_v2/programmes/{{programme_id}}/profiles/{{transfers_profile_id}}/update",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"admin",
								"api",
								"transfers_v2",
								"programmes",
								"{{programme_id}}",
								"profiles",
								"{{transfers_profile_id}}",
								"update"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Innovator",
			"item": [
				{
					"name": "Login innovator root",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable(\"pm_token\", JSON.parse(responseBody).token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{innovator_email}}\",\n  \"password\": {\n    \"value\": \"Pass1234!\"\n  }\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/gateway/login",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"gateway",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Innovator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Innovator Details Correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.tenant.id).to.eql(parseInt(pm.environment.get(\"innovator_id\")));",
									"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
									"    pm.expect(jsonData.basicCompanyChecksVerified).to.eql(\"NOT_STARTED\");",
									"    pm.expect(jsonData.kybProviderKey).to.eql(\"SUM_SUB\");",
									"    pm.expect(jsonData.amlProviderKey).to.eql(\"SUM_SUB\");",
									"    pm.expect(jsonData.registrationAddress.addressLine1).to.eql(\"regAddr1\");",
									"    pm.expect(jsonData.registrationAddress.addressLine2).to.eql(\"regAddr2\");",
									"    pm.expect(jsonData.registrationAddress.city).to.eql(\"regCity\");",
									"    pm.expect(jsonData.registrationAddress.country).to.eql(\"MT\");",
									"    pm.expect(jsonData.registrationAddress.postCode).to.eql(\"regMT123\");",
									"    pm.expect(jsonData.registrationAddress.state).to.eql(\"Rabat\");",
									"    pm.expect(jsonData.businessAddress.addressLine1).to.eql(\"busAddr1\");",
									"    pm.expect(jsonData.businessAddress.addressLine2).to.eql(\"busAddr2\");",
									"    pm.expect(jsonData.businessAddress.city).to.eql(\"busCity\");",
									"    pm.expect(jsonData.businessAddress.country).to.eql(\"MT\");",
									"    pm.expect(jsonData.businessAddress.postCode).to.eql(\"regMT123\");",
									"    pm.expect(jsonData.businessAddress.state).to.eql(\"Rabat\");",
									"    pm.expect(jsonData.industry).to.eql(\"ACCOUNTING\");",
									"    pm.expect(jsonData.sourceOfFunds).to.eql(\"LABOUR_CONTRACT\");",
									"    pm.expect(jsonData.rootUser.name).to.eql(\"Innovator\");",
									"    pm.expect(jsonData.rootUser.surname).to.eql(\"Surname\");",
									"    pm.expect(jsonData.rootUser.email).to.eql(pm.environment.get(\"innovator_email\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "X-TOKEN {{pm_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/innovator/get",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"innovator",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Innovator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Innovator Details Correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.tenant.id).to.eql(parseInt(pm.environment.get(\"innovator_id\")));",
									"    pm.expect(jsonData.state).to.eql(\"COMPLETED\");",
									"    pm.expect(jsonData.basicCompanyChecksVerified).to.eql(\"NOT_STARTED\");",
									"    pm.expect(jsonData.kybProviderKey).to.eql(\"SUM_SUB\");",
									"    pm.expect(jsonData.amlProviderKey).to.eql(\"SUM_SUB\");",
									"    pm.expect(jsonData.registrationAddress.addressLine1).to.eql(\"regAddr1\");",
									"    pm.expect(jsonData.registrationAddress.addressLine2).to.eql(\"regAddr2\");",
									"    pm.expect(jsonData.registrationAddress.city).to.eql(\"regCity\");",
									"    pm.expect(jsonData.registrationAddress.country).to.eql(\"MT\");",
									"    pm.expect(jsonData.registrationAddress.postCode).to.eql(\"regMT123\");",
									"    pm.expect(jsonData.registrationAddress.state).to.eql(\"Rabat\");",
									"    pm.expect(jsonData.businessAddress.addressLine1).to.eql(\"busAddr1\");",
									"    pm.expect(jsonData.businessAddress.addressLine2).to.eql(\"busAddr2\");",
									"    pm.expect(jsonData.businessAddress.city).to.eql(\"busCity\");",
									"    pm.expect(jsonData.businessAddress.country).to.eql(\"MT\");",
									"    pm.expect(jsonData.businessAddress.postCode).to.eql(\"regMT123\");",
									"    pm.expect(jsonData.businessAddress.state).to.eql(\"Rabat\");",
									"    pm.expect(jsonData.industry).to.eql(\"ACCOUNTING\");",
									"    pm.expect(jsonData.sourceOfFunds).to.eql(\"LABOUR_CONTRACT\");",
									"    pm.expect(jsonData.rootUser.name).to.eql(\"Innovator\");",
									"    pm.expect(jsonData.rootUser.surname).to.eql(\"Surname\");",
									"    pm.expect(jsonData.rootUser.email).to.eql(pm.environment.get(\"innovator_email\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "X-TOKEN {{pm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"registrationCountry\": \"MT\",\n    \"registrationNumber\": \"123\"\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/innovator/innovators/{{innovator_id}}/update",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"innovator",
								"innovators",
								"{{innovator_id}}",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Programme Full",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Innovator Details Correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.programmeName).to.eql(\"eupayconstest\");",
									"    pm.expect(jsonData.programmeCode).to.eql(\"eupayconstest\");",
									"    pm.expect(jsonData.programmeId).not.equal(null)",
									"    pm.expect(jsonData.corporatesProfileId).to.eql([]);",
									"    pm.expect(jsonData.consumersProfileId[0].Id).not.equal(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{pm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"CONSUMER_PAYMENTS\",\n    \"programmeName\": \"eupayconstest\",\n    \"programmeCode\": \"eupayconstest\"\n}"
						},
						"url": {
							"raw": "{{server-url}}/innovator/api/gateway/payment_models/init",
							"host": [
								"{{server-url}}"
							],
							"path": [
								"innovator",
								"api",
								"gateway",
								"payment_models",
								"init"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Secure Session",
			"item": [
				{
					"name": "Anon Tokenize",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{corp_token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"values\": {\n    \"additionalProp1\": {\n      \"value\": \"Pass1234\",\n      \"field\": \"PASSWORD\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test-server-url}}/api/secure_session/anon_tokenize",
							"host": [
								"{{test-server-url}}"
							],
							"path": [
								"api",
								"secure_session",
								"anon_tokenize"
							]
						}
					},
					"response": []
				},
				{
					"name": "Tokenize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable(\"tokenized_password\", JSON.parse(responseBody).tokens.additionalProp1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "programme-key",
								"value": "{{secret_programme_key}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{corp_token_eur}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"values\": {\n    \"additionalProp1\": {\n      \"value\": \"Pass1234!\",\n      \"field\": \"PASSWORD\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test-server-url}}/api/secure_session/tokenize",
							"host": [
								"{{test-server-url}}"
							],
							"path": [
								"api",
								"secure_session",
								"tokenize"
							]
						}
					},
					"response": []
				},
				{
					"name": "Tokenize PIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable(\"tokenized_pin\", JSON.parse(responseBody).tokens.additionalProp1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "programme-key",
								"type": "text",
								"value": "{{secret_programme_key}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{corp_token_eur}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"values\": {\n    \"additionalProp1\": {\n      \"value\": \"123\",\n      \"field\": \"PIN\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test-server-url}}/api/secure_session/tokenize",
							"host": [
								"{{test-server-url}}"
							],
							"path": [
								"api",
								"secure_session",
								"tokenize"
							]
						}
					},
					"response": []
				},
				{
					"name": "Detokenize PASSWORD",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "programme-key",
								"value": "{{secret_programme_key}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{corp_token_eur}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"{{tokenized_password}}\",\n  \"field\": \"PASSWORD\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test-server-url}}/api/secure_session/detokenize",
							"host": [
								"{{test-server-url}}"
							],
							"path": [
								"api",
								"secure_session",
								"detokenize"
							]
						}
					},
					"response": []
				},
				{
					"name": "Detokenize PIN",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "programme-key",
								"value": "{{secret_programme_key}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{corp_token_eur}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"{{tokenized_pin}}\",\n  \"field\": \"PIN\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test-server-url}}/api/secure_session/detokenize",
							"host": [
								"{{test-server-url}}"
							],
							"path": [
								"api",
								"secure_session",
								"detokenize"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Anon Tokenize",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "programme-key",
						"value": "{{secret_programme_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"values\": {\n    \"additionalProp1\": {\n      \"value\": \"Pass1234\",\n      \"field\": \"PASSWORD\"\n    }\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{test-server-url}}/api/secure_session/anon_tokenize",
					"host": [
						"{{test-server-url}}"
					],
					"path": [
						"api",
						"secure_session",
						"anon_tokenize"
					]
				}
			},
			"response": []
		}
	]
}